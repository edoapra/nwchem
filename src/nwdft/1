Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I./include -I./grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_ENERGY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_ENERGY) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(3,24)
  -> EXTERN: (16,16) rtdb_cput_
  -> (18,20) NWDFT
  -> EXTERN: (19,12) grid_cleanup_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(3,24):remark #34051: REGISTER ALLOCATION : [dft_energy_] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F:3

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbp rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      12
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NWDFT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NWDFT) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(97,24)
  -> EXTERN: (157,16) ga_nodeid_
  -> EXTERN: (160,17) rtdb_parallel_
  -> EXTERN: (161,12) util_print_push_
  -> EXTERN: (162,12) util_print_rtdb_load_
  -> EXTERN: (165,12) dft_pstat_init_
  -> EXTERN: (168,12) dft_fdist_init_
  -> EXTERN: (171,11) rtdb_get_
  -> EXTERN: (172,28) __getsp_inlined
  -> EXTERN: (172,28) errquit_
  -> EXTERN: (172,28) __resetsp_inlined
  -> EXTERN: (172,46) _alloca
  -> EXTERN: (172,46) for_concat
  -> EXTERN: (178,16) util_print_
  -> EXTERN: (179,17) rtdb_get_
  -> EXTERN: (181,17) rtdb_get_
  -> EXTERN: (185,19) rtdb_cget_
  -> EXTERN: (186,14) for_cpystr
  -> EXTERN: (189,13) for_write_seq_lis
  -> EXTERN: (190,18) util_print_centered_
  -> EXTERN: (193,13) for_write_seq_lis
  -> EXTERN: (194,18) util_print_centered_
  -> EXTERN: (197,11) for_write_seq_lis
  -> EXTERN: (198,11) for_write_seq_lis
  -> EXTERN: (199,21) for_cpstr
  -> EXTERN: (200,18) util_print_centered_
  -> EXTERN: (201,13) for_write_seq_lis
  -> EXTERN: (202,13) for_write_seq_lis
  -> EXTERN: (209,12) dft_rdinput_
  -> EXTERN: (211,12) dft_printinfo_
  -> EXTERN: (215,12) rtdb_get_
  -> EXTERN: (217,18) cosmo_initialize_
  -> EXTERN: (224,21) rtdb_get_
  -> EXTERN: (231,18) rtdb_get_
  -> EXTERN: (236,18) rtdb_get_
  -> EXTERN: (239,19) geom_ncent_
  -> EXTERN: (240,10) errquit_
  -> EXTERN: (241,14) ga_nodeid_
  -> EXTERN: (242,11) set_modelpotential_params_
  -> EXTERN: (247,21) for_cpstr
  -> EXTERN: (248,20) rtdb_cget_
  -> EXTERN: (249,15) errquit_
  -> EXTERN: (249,15) __getsp_inlined
  -> EXTERN: (249,15) __resetsp_inlined
  -> EXTERN: (249,33) for_concat
  -> EXTERN: (249,33) _alloca
  -> EXTERN: (252,23) for_cpstr
  -> EXTERN: (253,19) util_print_centered_
  -> EXTERN: (255,14) for_write_seq_lis
  -> EXTERN: (256,14) for_write_seq_lis
  -> EXTERN: (260,20) for_cpstr
  -> EXTERN: (260,40) for_cpstr
  -> EXTERN: (261,21) xc_gotxc_
  -> EXTERN: (264,24) grid_reopen_
  -> EXTERN: (268,18) ga_igop_
  -> EXTERN: (269,29) ga_nnodes_
  -> EXTERN: (270,30) grid_cleanup_
  -> EXTERN: (272,17) movecs_converged_
  -> EXTERN: (277,25) for_cpstr
  -> EXTERN: (278,26) rtdb_get_
  -> EXTERN: (279,20) errquit_
  -> EXTERN: (279,20) __getsp_inlined
  -> EXTERN: (279,20) __resetsp_inlined
  -> EXTERN: (280,25) for_concat
  -> EXTERN: (280,25) _alloca
  -> EXTERN: (282,26) rtdb_get_
  -> EXTERN: (283,20) errquit_
  -> EXTERN: (283,20) __resetsp_inlined
  -> EXTERN: (283,20) __getsp_inlined
  -> EXTERN: (284,25) _alloca
  -> EXTERN: (284,25) for_concat
  -> EXTERN: (287,19) for_write_seq_fmt
  -> EXTERN: (288,24) util_flush_
  -> EXTERN: (352,10) xc_hascam_
  -> EXTERN: (355,18) int_forcenwints_
  -> EXTERN: (356,15) errquit_
  -> EXTERN: (359,12) int_init_
  -> EXTERN: (361,12) print_integrals_
  -> EXTERN: (364,12) schwarz_init_
  -> EXTERN: (367,31) ga_nnodes_
  -> EXTERN: (369,13) for_write_seq_lis
  -> EXTERN: (370,18) util_flush_
  -> EXTERN: (373,15) int_1e_cache_ga_
  -> EXTERN: (378,12) grid_setquad_
  -> EXTERN: (381,12) dft_inpana_
  -> EXTERN: (384,12) dft_cscf_init_
  -> EXTERN: (402,16) geom_systype_get_
  -> EXTERN: (410,20) rt_tddft_
  -> EXTERN: (412,20) dft_main0d_
  -> EXTERN: (419,14) __getsp_inlined
  -> EXTERN: (419,14) errquit_
  -> EXTERN: (419,14) __resetsp_inlined
  -> EXTERN: (419,27) _alloca
  -> EXTERN: (419,27) for_concat
  -> EXTERN: (423,20) int_1e_uncache_ga_
  -> EXTERN: (424,12) schwarz_tidy_
  -> EXTERN: (425,12) int_terminate_
  -> EXTERN: (433,15) cosmo_tidy_
  -> EXTERN: (449,19) bas_destroy_
  -> EXTERN: (450,11) errquit_
  -> EXTERN: (450,11) __getsp_inlined
  -> EXTERN: (450,11) __resetsp_inlined
  -> EXTERN: (450,30) for_concat
  -> EXTERN: (450,30) _alloca
  -> EXTERN: (458,19) geom_destroy_
  -> EXTERN: (459,11) errquit_
  -> EXTERN: (459,11) __getsp_inlined
  -> EXTERN: (459,11) __resetsp_inlined
  -> EXTERN: (459,30) for_concat
  -> EXTERN: (459,30) _alloca
  -> EXTERN: (465,16) bas_destroy_
  -> EXTERN: (466,10) errquit_
  -> EXTERN: (466,10) __getsp_inlined
  -> EXTERN: (466,10) __resetsp_inlined
  -> EXTERN: (466,28) for_concat
  -> EXTERN: (466,28) _alloca
  -> EXTERN: (469,16) bas_destroy_
  -> EXTERN: (470,9) errquit_
  -> EXTERN: (470,9) __getsp_inlined
  -> EXTERN: (470,9) __resetsp_inlined
  -> EXTERN: (470,27) for_concat
  -> EXTERN: (470,27) _alloca
  -> EXTERN: (473,9) bas_destroy_
  -> EXTERN: (474,15) geom_destroy_
  -> EXTERN: (475,9) errquit_
  -> EXTERN: (475,9) __resetsp_inlined
  -> EXTERN: (475,9) __getsp_inlined
  -> EXTERN: (475,28) _alloca
  -> EXTERN: (475,28) for_concat
  -> EXTERN: (479,22) util_flush_
  -> EXTERN: (481,12) dft_pstat_print_
  -> EXTERN: (482,12) util_print_pop_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(155,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 5  
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(155,7)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.080 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(155,7)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(97,24):remark #34051: REGISTER ALLOCATION : [nwdft_] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F:97

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     732
            Global    :     141
            Local     :     591
        Regenerable   :     503
        Spilled       :       6
        
    Routine stack
        Variables     :     488 bytes*
            Reads     :      11 [5.66e-01 ~ 0.6%]
            Writes    :      68 [1.12e+00 ~ 1.1%]
        Spills        :       8 bytes*
            Reads     :       1 [8.40e-03 ~ 0.0%]
            Writes    :       1 [8.40e-03 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SODFT_ENERGY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SODFT_ENERGY) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(24,24)
  -> EXTERN: (37,16) rtdb_cput_
  -> (39,22) NWDFT
  -> EXTERN: (40,12) grid_cleanup_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(24,24):remark #34051: REGISTER ALLOCATION : [sodft_energy_] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F:24

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbp rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      25
            Global    :       9
            Local     :      16
        Regenerable   :      12
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_RT_TDDFT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_RT_TDDFT) [4] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(46,24)
  -> EXTERN: (60,16) rtdb_cput_
  -> EXTERN: (62,17) rtdb_put_
  -> EXTERN: (63,11) errquit_
  -> (65,22) NWDFT
  -> EXTERN: (66,12) grid_cleanup_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(46,24):remark #34051: REGISTER ALLOCATION : [dft_rt_tddft_] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F:46

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 r15]
        
    Routine temporaries
        Total         :      44
            Global    :      13
            Local     :      31
        Regenerable   :      28
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SODFT_RT_TDDFT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SODFT_RT_TDDFT) [5] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(72,24)
  -> EXTERN: (86,16) rtdb_cput_
  -> EXTERN: (88,17) rtdb_put_
  -> EXTERN: (89,11) errquit_
  -> (91,24) NWDFT
  -> EXTERN: (92,12) grid_cleanup_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(72,24):remark #34051: REGISTER ALLOCATION : [sodft_rt_tddft_] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F:72

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 r15]
        
    Routine temporaries
        Total         :      44
            Global    :      13
            Local     :      31
        Regenerable   :      28
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I./include -I./grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	c
2	c     == DFT energy ==
3	      logical function dft_energy(rtdb)
!INLINE REPORT: (DFT_ENERGY) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(3,24)
!  -> EXTERN: (16,16) rtdb_cput_
!  -> (18,20) NWDFT
!  -> EXTERN: (19,12) grid_cleanup_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(3,24):remark #34051: REGISTER ALLOCATION : [dft_energy_] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F:3
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :    8[ rax rdx rcx rbp rsi rdi r8-r9]
!        
!    Routine temporaries
!        Total         :      25
!            Global    :       9
!            Local     :      16
!        Regenerable   :      12
!        Spilled       :       1
!        
!    Routine stack
!        Variables     :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
4	c
5	      implicit none
6	c
7	#include "rtdb.fh"
8	c
9	      integer rtdb
10	c
11	      logical nwdft
12	      external nwdft
13	      logical status
14	c
15	c     == Add theory flag ==
16	      status = rtdb_cput(rtdb,'dft:theory', 1, 'dft')
17	c
18	      dft_energy = nwdft(rtdb)
19	      call grid_cleanup(.true.)
20	c
21	      end
22	c
23	c     == Spin-Orbit DFT energy ==
24	      logical function sodft_energy(rtdb)
!INLINE REPORT: (SODFT_ENERGY) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(24,24)
!  -> EXTERN: (37,16) rtdb_cput_
!  -> (39,22) NWDFT
!  -> EXTERN: (40,12) grid_cleanup_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(24,24):remark #34051: REGISTER ALLOCATION : [sodft_energy_] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F:24
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :    8[ rax rdx rcx rbp rsi rdi r8-r9]
!        
!    Routine temporaries
!        Total         :      25
!            Global    :       9
!            Local     :      16
!        Regenerable   :      12
!        Spilled       :       1
!        
!    Routine stack
!        Variables     :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
25	c
26	      implicit none
27	c
28	#include "rtdb.fh"
29	c
30	      integer rtdb
31	c
32	      logical nwdft
33	      external nwdft
34	      logical status
35	c
36	c     == Add theory flag ==
37	      status = rtdb_cput(rtdb,'dft:theory', 1, 'sodft')
38	c
39	      sodft_energy = nwdft(rtdb)
40	      call grid_cleanup(.true.)
41	c
42	      end
43	C
44	C     == DFT RT_TDDFT ==
45	C
46	      logical function dft_rt_tddft(rtdb)
!INLINE REPORT: (DFT_RT_TDDFT) [4] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(46,24)
!  -> EXTERN: (60,16) rtdb_cput_
!  -> EXTERN: (62,17) rtdb_put_
!  -> EXTERN: (63,11) errquit_
!  -> (65,22) NWDFT
!  -> EXTERN: (66,12) grid_cleanup_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(46,24):remark #34051: REGISTER ALLOCATION : [dft_rt_tddft_] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F:46
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 r15]
!        
!    Routine temporaries
!        Total         :      44
!            Global    :      13
!            Local     :      31
!        Regenerable   :      28
!        Spilled       :       1
!        
!    Routine stack
!        Variables     :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
47	
48	      implicit none
49	
50	#include "errquit.fh"
51	#include "mafdecls.fh"
52	#include "rtdb.fh"
53	
54	      integer rtdb
55	
56	      logical nwdft
57	      external nwdft
58	      logical status
59	
60	      status = rtdb_cput(rtdb,'dft:theory', 1, 'dft')
61	
62	      if (.not. rtdb_put(rtdb,'dft:lrt_tddft',mt_log,1,.true.))
63	     &    call errquit('dft_rt_tddft: rtdb_put failed',0,RTDB_ERR)
64	
65	      dft_rt_tddft = nwdft (rtdb)
66	      call grid_cleanup(.true.)
67	
68	      end
69	C
70	C     == SODFT RT_TDDFT ==
71	C
72	      logical function sodft_rt_tddft(rtdb)
!INLINE REPORT: (SODFT_RT_TDDFT) [5] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(72,24)
!  -> EXTERN: (86,16) rtdb_cput_
!  -> EXTERN: (88,17) rtdb_put_
!  -> EXTERN: (89,11) errquit_
!  -> (91,24) NWDFT
!  -> EXTERN: (92,12) grid_cleanup_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(72,24):remark #34051: REGISTER ALLOCATION : [sodft_rt_tddft_] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F:72
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 r15]
!        
!    Routine temporaries
!        Total         :      44
!            Global    :      13
!            Local     :      31
!        Regenerable   :      28
!        Spilled       :       1
!        
!    Routine stack
!        Variables     :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
73	
74	      implicit none
75	
76	#include "errquit.fh"
77	#include "mafdecls.fh"
78	#include "rtdb.fh"
79	
80	      integer rtdb
81	
82	      logical nwdft
83	      external nwdft
84	      logical status
85	
86	      status = rtdb_cput(rtdb,'dft:theory', 1, 'sodft')
87	
88	      if (.not. rtdb_put(rtdb,'dft:lrt_tddft',mt_log,1,.true.))
89	     &    call errquit('dft_rt_tddft: rtdb_put failed',0,RTDB_ERR)
90	
91	      sodft_rt_tddft = nwdft(rtdb)
92	      call grid_cleanup(.true.)
93	
94	      end
95	c
96	c     == Main DFT driver ==
97	      logical function nwdft(rtdb)
!INLINE REPORT: (NWDFT) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(97,24)
!  -> EXTERN: (157,16) ga_nodeid_
!  -> EXTERN: (160,17) rtdb_parallel_
!  -> EXTERN: (161,12) util_print_push_
!  -> EXTERN: (162,12) util_print_rtdb_load_
!  -> EXTERN: (165,12) dft_pstat_init_
!  -> EXTERN: (168,12) dft_fdist_init_
!  -> EXTERN: (171,11) rtdb_get_
!  -> EXTERN: (172,28) __getsp_inlined
!  -> EXTERN: (172,28) errquit_
!  -> EXTERN: (172,28) __resetsp_inlined
!  -> EXTERN: (172,46) _alloca
!  -> EXTERN: (172,46) for_concat
!  -> EXTERN: (178,16) util_print_
!  -> EXTERN: (179,17) rtdb_get_
!  -> EXTERN: (181,17) rtdb_get_
!  -> EXTERN: (185,19) rtdb_cget_
!  -> EXTERN: (186,14) for_cpystr
!  -> EXTERN: (189,13) for_write_seq_lis
!  -> EXTERN: (190,18) util_print_centered_
!  -> EXTERN: (193,13) for_write_seq_lis
!  -> EXTERN: (194,18) util_print_centered_
!  -> EXTERN: (197,11) for_write_seq_lis
!  -> EXTERN: (198,11) for_write_seq_lis
!  -> EXTERN: (199,21) for_cpstr
!  -> EXTERN: (200,18) util_print_centered_
!  -> EXTERN: (201,13) for_write_seq_lis
!  -> EXTERN: (202,13) for_write_seq_lis
!  -> EXTERN: (209,12) dft_rdinput_
!  -> EXTERN: (211,12) dft_printinfo_
!  -> EXTERN: (215,12) rtdb_get_
!  -> EXTERN: (217,18) cosmo_initialize_
!  -> EXTERN: (224,21) rtdb_get_
!  -> EXTERN: (231,18) rtdb_get_
!  -> EXTERN: (236,18) rtdb_get_
!  -> EXTERN: (239,19) geom_ncent_
!  -> EXTERN: (240,10) errquit_
!  -> EXTERN: (241,14) ga_nodeid_
!  -> EXTERN: (242,11) set_modelpotential_params_
!  -> EXTERN: (247,21) for_cpstr
!  -> EXTERN: (248,20) rtdb_cget_
!  -> EXTERN: (249,15) errquit_
!  -> EXTERN: (249,15) __getsp_inlined
!  -> EXTERN: (249,15) __resetsp_inlined
!  -> EXTERN: (249,33) for_concat
!  -> EXTERN: (249,33) _alloca
!  -> EXTERN: (252,23) for_cpstr
!  -> EXTERN: (253,19) util_print_centered_
!  -> EXTERN: (255,14) for_write_seq_lis
!  -> EXTERN: (256,14) for_write_seq_lis
!  -> EXTERN: (260,20) for_cpstr
!  -> EXTERN: (260,40) for_cpstr
!  -> EXTERN: (261,21) xc_gotxc_
!  -> EXTERN: (264,24) grid_reopen_
!  -> EXTERN: (268,18) ga_igop_
!  -> EXTERN: (269,29) ga_nnodes_
!  -> EXTERN: (270,30) grid_cleanup_
!  -> EXTERN: (272,17) movecs_converged_
!  -> EXTERN: (277,25) for_cpstr
!  -> EXTERN: (278,26) rtdb_get_
!  -> EXTERN: (279,20) errquit_
!  -> EXTERN: (279,20) __getsp_inlined
!  -> EXTERN: (279,20) __resetsp_inlined
!  -> EXTERN: (280,25) for_concat
!  -> EXTERN: (280,25) _alloca
!  -> EXTERN: (282,26) rtdb_get_
!  -> EXTERN: (283,20) errquit_
!  -> EXTERN: (283,20) __resetsp_inlined
!  -> EXTERN: (283,20) __getsp_inlined
!  -> EXTERN: (284,25) _alloca
!  -> EXTERN: (284,25) for_concat
!  -> EXTERN: (287,19) for_write_seq_fmt
!  -> EXTERN: (288,24) util_flush_
!  -> EXTERN: (352,10) xc_hascam_
!  -> EXTERN: (355,18) int_forcenwints_
!  -> EXTERN: (356,15) errquit_
!  -> EXTERN: (359,12) int_init_
!  -> EXTERN: (361,12) print_integrals_
!  -> EXTERN: (364,12) schwarz_init_
!  -> EXTERN: (367,31) ga_nnodes_
!  -> EXTERN: (369,13) for_write_seq_lis
!  -> EXTERN: (370,18) util_flush_
!  -> EXTERN: (373,15) int_1e_cache_ga_
!  -> EXTERN: (378,12) grid_setquad_
!  -> EXTERN: (381,12) dft_inpana_
!  -> EXTERN: (384,12) dft_cscf_init_
!  -> EXTERN: (402,16) geom_systype_get_
!  -> EXTERN: (410,20) rt_tddft_
!  -> EXTERN: (412,20) dft_main0d_
!  -> EXTERN: (419,14) __getsp_inlined
!  -> EXTERN: (419,14) errquit_
!  -> EXTERN: (419,14) __resetsp_inlined
!  -> EXTERN: (419,27) _alloca
!  -> EXTERN: (419,27) for_concat
!  -> EXTERN: (423,20) int_1e_uncache_ga_
!  -> EXTERN: (424,12) schwarz_tidy_
!  -> EXTERN: (425,12) int_terminate_
!  -> EXTERN: (433,15) cosmo_tidy_
!  -> EXTERN: (449,19) bas_destroy_
!  -> EXTERN: (450,11) errquit_
!  -> EXTERN: (450,11) __getsp_inlined
!  -> EXTERN: (450,11) __resetsp_inlined
!  -> EXTERN: (450,30) for_concat
!  -> EXTERN: (450,30) _alloca
!  -> EXTERN: (458,19) geom_destroy_
!  -> EXTERN: (459,11) errquit_
!  -> EXTERN: (459,11) __getsp_inlined
!  -> EXTERN: (459,11) __resetsp_inlined
!  -> EXTERN: (459,30) for_concat
!  -> EXTERN: (459,30) _alloca
!  -> EXTERN: (465,16) bas_destroy_
!  -> EXTERN: (466,10) errquit_
!  -> EXTERN: (466,10) __getsp_inlined
!  -> EXTERN: (466,10) __resetsp_inlined
!  -> EXTERN: (466,28) for_concat
!  -> EXTERN: (466,28) _alloca
!  -> EXTERN: (469,16) bas_destroy_
!  -> EXTERN: (470,9) errquit_
!  -> EXTERN: (470,9) __getsp_inlined
!  -> EXTERN: (470,9) __resetsp_inlined
!  -> EXTERN: (470,27) for_concat
!  -> EXTERN: (470,27) _alloca
!  -> EXTERN: (473,9) bas_destroy_
!  -> EXTERN: (474,15) geom_destroy_
!  -> EXTERN: (475,9) errquit_
!  -> EXTERN: (475,9) __resetsp_inlined
!  -> EXTERN: (475,9) __getsp_inlined
!  -> EXTERN: (475,28) _alloca
!  -> EXTERN: (475,28) for_concat
!  -> EXTERN: (479,22) util_flush_
!  -> EXTERN: (481,12) dft_pstat_print_
!  -> EXTERN: (482,12) util_print_pop_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(97,24):remark #34051: REGISTER ALLOCATION : [nwdft_] /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F:97
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
!        
!    Routine temporaries
!        Total         :     732
!            Global    :     141
!            Local     :     591
!        Regenerable   :     503
!        Spilled       :       6
!        
!    Routine stack
!        Variables     :     488 bytes*
!            Reads     :      11 [5.66e-01 ~ 0.6%]
!            Writes    :      68 [1.12e+00 ~ 1.1%]
!        Spills        :       8 bytes*
!            Reads     :       1 [8.40e-03 ~ 0.0%]
!            Writes    :       1 [8.40e-03 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
98	c     
99	C$Id$
100	c
101	      implicit none
102	c     
103	c     == Include standard input and memory checking common structures ==
104	c     
105	#include "errquit.fh"
106	#include "mafdecls.fh"
107	#include "global.fh"
108	#include "tcgmsg.fh"
109	#include "stdio.fh"
110	#include "bas.fh"
111	#include "geom.fh"
112	#include "rtdb.fh"
113	#include "cdft.fh"
114	#include "util.fh"
115	#include "cgridfile.fh"
116	#include "cosmo.fh"
117	#include "modelpotential.fh"
118	#include "zora.fh"
119	cinclude "crohf.fh"
120	c
121	      integer rtdb
122	c     
123	c     == Local declarations ==
124	      double precision energy
125	      integer iproc,itype
126	cc AJL/Begin/FDE
127	c      integer bases(3), i3
128	      integer bases(4), i3
129	cc AJL/End
130	      logical LResult, oprint, converged
131	      logical dyall_mod_dir  ! do modified Dirac calculation
132	c
133	      logical dft_main0d, movecs_converged,grid_reopen,xc_gotxc  
134	      external dft_main0d, movecs_converged,grid_reopen,xc_gotxc  
135	      logical grid_ok,l1ecache
136	      integer igok
137	      character*80 theory
138	      logical lrt_tddft
139	      character*32 pname
140	      integer nclosed, nopen
141	c
142	      integer natoms
143	      logical dftmp2
144	c
145	cc AJL/Begin/FDE
146	c      logical frozemb_fde
147	cc AJL/End
148	
149	      logical rt_tddft
150	      external rt_tddft
151	      logical xc_hascam,int_forcenwints
152	      external xc_hascam,int_forcenwints
153	      character*24 rtdb_errmsg
154	c     
155	      pname = "nwdft:"
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(155,7)
!   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 4 
!   remark #15477: vector cost: 4.000 
!   remark #15478: estimated potential speedup: 0.760 
!   remark #15488: --- end vector cost summary ---
!   remark #25436: completely unrolled by 5  
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(155,7)
!   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 2 
!   remark #15477: vector cost: 0.750 
!   remark #15478: estimated potential speedup: 2.080 
!   remark #15488: --- end vector cost summary ---
!   remark #25015: Estimate of max trip count of loop=1
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/nwdft.F(155,7)
!<Remainder loop for vectorization>
!   remark #25436: completely unrolled by 2  
!LOOP END
156	      nwdft = .false.
157	      iproc  = ga_nodeid()
158	c
159	c     == Make sure database is parallel, push context down to DFT ==
160	      LResult = rtdb_parallel(.true.)
161	      call util_print_push
162	      call util_print_rtdb_load(rtdb, 'dft')
163	c
164	c     == Init pstat ==
165	      call dft_pstat_init(rtdb)
166	c
167	c     == Init fdist ==
168	      call dft_fdist_init(rtdb)
169	c
170	c     == If Dyall-mod-dir is set, exit with error ==
171	      if (rtdb_get(rtdb,'dyall_mod_dir',mt_log,1,dyall_mod_dir)) then
172	        if (dyall_mod_dir) call errquit(pname//
173	     &      'Cannot do DFT calculation with Dyall-modified-Dirac method'
174	     &      ,99, RTDB_ERR)
175	      end if
176	c
177	c     == Print header ==
178	      oprint = util_print('information', print_low)
179	      if (.not. rtdb_get(rtdb,'dft:lrt_tddft',mt_log,1,lrt_tddft))
180	     &   lrt_tddft = .false.
181	      if (.not. rtdb_get(rtdb,'dft:dftmp2',mt_log,1,dftmp2))
182	     $     dftmp2 = .false.
183	c
184	      if (oprint) then
185	        if (.not. rtdb_cget(rtdb, 'title', 1, title))
186	     &       title = ' '
187	        if(iproc.eq.0) then
188	          if (.not.lrt_tddft) then
189	            write(LuOut,*)
190	            call util_print_centered(
191	     &         LuOut, 'NWChem DFT Module', 40, .true.)
192	          else
193	            write(LuOut,*)
194	            call util_print_centered(
195	     &         LuOut, 'NWChem Real-Time TDDFT Module', 40, .true.)
196	          end if
197	          write(LuOut,*)
198	          write(LuOut,*)
199	          if (title .ne. ' ') then
200	            call util_print_centered(LuOut, title, 40, .false.)
201	            write(LuOut,*)
202	            write(LuOut,*)
203	          endif
204	        endif
205	      endif
206	c
207	c     == Gather input from all available resources e.g. input unit, ==
208	c     == old checkpoint files, etc. ==
209	      call dft_rdinput(rtdb)
210	c
211	      call dft_printinfo()
212	c
213	c     == Cosmo initialization ==
214	      cosmo_last = .false.
215	      if ( rtdb_get(rtdb,'slv:cosmo',mt_log,1,cosmo_on)) then
216	         if(cosmo_on) then
217	            call cosmo_initialize(rtdb,geom,ao_bas_han,oprint)
218	c
219	c           Turn cosmo on, we want to run the calculation
220	c           Start with gas_phase run unless told otherwise
221	c
222	            cosmo_last = .true.
223	            cosmo_on = .true.
224	            if(.not.rtdb_get(rtdb,'cosmo_phase',mt_int,1,cosmo_phase))
225	     >         cosmo_phase = 1
226	
227	         endif
228	      endif
229	c
230	c     == Relativistic model potential initialization ==
231	      if (.not. (rtdb_get(rtdb,'zora',mt_log,1,do_zora))) 
232	     &        do_zora = .false.
233	c
234	      use_modelpotential = .false.
235	      if (do_zora) then
236	       if (.not. rtdb_get(rtdb, 'modelpotential', mt_log, 1,
237	     &  use_modelpotential)) use_modelpotential = .false.
238	       if (use_modelpotential) then
239	        if (.not. geom_ncent(geom, natoms))
240	     &   call errquit('nwdft: geom_ncent failed',73, GEOM_ERR)
241	         if (ga_nodeid().eq.0)
242	     &    call set_modelpotential_params(rtdb, geom, natoms)
243	       end if 
244	      end if  ! do_zora
245	c
246	c     == Check to see if system is already converged? ==
247	      if (movecs_in .eq. movecs_out) then
248	         if (.not. rtdb_cget(rtdb, 'dft:theory', 1, theory))
249	     $        call errquit(pname//'Theory not specified',0, RTDB_ERR)
250	c
251	          if(iproc.eq.0) then
252	           if (theory .eq. 'sodft') then
253	             call util_print_centered(
254	     &         LuOut, 'Spin-Orbit DFT', 40, .true.)
255	             write(LuOut,*)
256	             write(LuOut,*)
257	           endif
258	          endif
259	c
260	         if(theory .eq. 'dft'.or.theory.eq.'sodft')then 
261	            if(.not.xc_gotxc()) then
262	               grid_ok=.true.
263	            else
264	               grid_ok=grid_reopen(geom)
265	            endif
266	            igok=0
267	            if(grid_ok) igok=1
268	            call ga_igop(999,igok,1,'+')
269	            grid_ok=igok.eq.ga_nnodes()
270	            if(.not.grid_ok) call grid_cleanup(.true.)
271	            if(.not.dftmp2) then
272	            if (movecs_converged(rtdb, ao_bas_han,theory, movecs_in).
273	     &      and.grid_ok)     then
274	c
275	c     check if we can get the grid from a file
276	c         
277	               if(theory.eq.'sodft') then
278	                 if(.not.rtdb_get(rtdb,'sodft:energy',mt_dbl,1,energy)) 
279	     &             call errquit(
280	     &             pname//'Failed getting converged energy',0, RTDB_ERR)
281	               else
282	                 if(.not.rtdb_get(rtdb,'dft:energy', mt_dbl,1,energy)) 
283	     &             call errquit(
284	     &             pname//'Failed getting converged energy',0, RTDB_ERR)
285	               endif
286	               if (iproc.eq.0 .and. oprint)then
287	                  write(LuOut,1011)energy
288	                  call util_flush(Luout)
289	               endif
290	               converged = .true.
291	               nwdft = .true.
292	               if (.not. lrt_tddft) goto 1101
293	            endif
294	         endif
295	      endif
296	      endif
297	 1011 format(/'  The DFT is already converged '//,
298	     &     '         Total DFT energy =', f20.12/)
299	c     
300	c     == Initialize the integral object ==
301	c 
302	cc AJL/Begin/FDE
303	c
304	c      frozemb_fde = .true.
305	c      if( FD_bas_han.eq.-99999 ) frozemb_fde = .false.
306	
307	c      if(XCFIT.and.CDFIT) then
308	      if(XCFIT.and.CDFIT.and.frozemb_fde) then
309	        i3 = 4
310	        bases(1) = AO_bas_han
311	        bases(2) = CD_bas_han
312	        bases(3) = XC_bas_han
313	        bases(4) = FD_bas_han
314	      elseif((.not.XCFIT).and.CDFIT.and.frozemb_fde) then
315	        i3 = 3
316	        bases(1) = AO_bas_han
317	        bases(2) = CD_bas_han
318	        bases(3) = FD_bas_han
319	      elseif((.not.CDFIT).and.XCFIT.and.frozemb_fde) then
320	        i3 = 3
321	        bases(1) = AO_bas_han
322	        bases(2) = XC_bas_han
323	        bases(3) = FD_bas_han
324	      elseif((.not.frozemb_fde).and.XCFIT.and.CDFIT.and.(.not.ADFT))then
325	        i3 = 3
326	        bases(1) = AO_bas_han
327	        bases(2) = CD_bas_han
328	        bases(3) = XC_bas_han
329	      elseif((.not.XCFIT).and.(.not.CDFIT).and.frozemb_fde) then
330	        i3 = 2
331	        bases(1) = AO_bas_han
332	        bases(2) = FD_bas_han
333	      elseif((.not.CDFIT).and.XCFIT.and.(.not.frozemb_fde)) then
334	        i3 = 2
335	        bases(1) = AO_bas_han
336	        bases(2) = XC_bas_han
337	      elseif((.not.frozemb_fde).and.(.not.XCFIT).and.CDFIT) then
338	        i3 = 2
339	        bases(1) = AO_bas_han
340	        bases(2) = CD_bas_han
341	      elseif((.not.frozemb_fde).and.ADFT) then
342	        i3 = 2
343	        bases(1) = AO_bas_han
344	        bases(2) = CD_bas_han
345	      else
346	        i3 = 1
347	        bases(1) = AO_bas_han
348	      endif
349	c
350	cc AJL/End
351	c
352	      if(xc_hascam(rtdb)) then
353	c
354	c     Force use of nw ints for CAM calculations
355	         if(.not.int_forcenwints(rtdb,rtdb_errmsg))
356	     &        call errquit(rtdb_errmsg,0, RTDB_ERR)
357	      endif
358	      
359	      call int_init(rtdb, i3, bases)
360	c
361	      call print_integrals(bases, oskel) ! print integrals, if needed
362	c
363	c     == Get 1-el in cache ==
364	      call schwarz_init(geom, AO_bas_han)
365	c
366	      l1ecache=.false.
367	      if ((nbf_ao*nbf_ao*3*8)/ga_nnodes() .lt. 8000000) then ! Cache if < 8MB/node
368	         if (iproc.eq.0 .and. oprint)then
369	            write(LuOut,*) ' Caching 1-el integrals '
370	            call util_flush(Luout)
371	         endif
372	         l1ecache=.true.
373	         call int_1e_cache_ga(AO_bas_han, oskel)
374	      endif
375	c
376	c     == Build the grid ==
377	      grid_written=.false.
378	      call grid_setquad(rtdb)
379	c
380	c     == Analyze set parameters for consistency ==
381	      call dft_inpana(rtdb)
382	c
383	c     == Pump the settings into cscf.fh ==
384	      call dft_cscf_init(rtdb,g_conv,rcharge,oskel,oadapt,iterations,
385	     &                   geom,ao_bas_han,mult-1,nbf_ao,noc,
386	     &                   movecs_in,movecs_out,movecs_guess,title)
387	c
388	c     == Set stuff in crohf.fh ==
389	c     if (mult.eq.1) then
390	c       nclosed = noc(1)
391	c       nopen   = 0
392	c     else
393	c       nclosed = min(noc(1),noc(2))
394	c       nopen   = mult - 1
395	c     endif
396	c     crohf_vlen = (nbf_ao-nclosed-nopen)*(nclosed+nopen)
397	c    &           + (nclosed*nopen)
398	c     crohf_init_flag = 1
399	c     
400	c     == Determine system type (molecule, polymer,surface,crystal) ==
401	c     == if no system type exists in db --> default = molecular case ==    
402	      if(.not. geom_systype_get(geom,itype)) itype = 0
403	c
404	      if(itype.eq.0) then
405	#ifdef GA_TRACE
406	        call trace_init(100000)                       ! initialize trace
407	#endif
408	
409	        if (lrt_tddft) then
410	           nwdft = rt_tddft (rtdb)
411	        else
412	           nwdft = dft_main0d(rtdb)
413	        endif
414	
415	#ifdef GA_TRACE
416	        call trace_end(ga_nodeid())                   ! end trace
417	#endif
418	      else
419	        call errquit(pname//'Problem with system type',0, INPUT_ERR)
420	      endif
421	c     
422	c     == Terminate integrals ==
423	      if(l1ecache) call int_1e_uncache_ga()
424	      call schwarz_tidy
425	      call int_terminate
426	c
427	c     == Go here if already converged ==
428	c
429	 1101 continue
430	c
431	c     == Clean up cosmo stuff, if necessary ==
432	      if (cosmo_on) then
433	         call cosmo_tidy(rtdb)
434	         cosmo_on = .false.
435	         cosmo_phase = 1
436	      endif
437	c     
438	c     == Destroy basis set handles and geom object ==
439	      XCFIT    = .TRUE.
440	      if( XC_bas_han.eq.-99999 ) XCFIT = .FALSE.
441	      CDFIT    = .TRUE.
442	      if( CD_bas_han.eq.-99999 ) CDFIT = .FALSE.
443	c
444	cc AJL/BEGIN
445	c      frozemb_fde  = .true.
446	c      if( FD_bas_han.eq.-99999 ) frozemb_fde = .false.
447	
448	      if (frozemb_fde) then
449	        if (.not. bas_destroy(FD_bas_han))
450	     &    call errquit (pname//'Destroying FD basis handles',0,
451	     &         BASIS_ERR)
452	c      endif
453	c
454	c Reuse frozemb_fde as we don't use this again
455	c      if( geom_fde.eq.-99999 ) frozemb_fde = .false.
456	c
457	c      if (frozemb_fde) then
458	        if (.not. geom_destroy(geom_fde))
459	     &    call errquit (pname//'Destroying FD geom handles',0,
460	     &         BASIS_ERR)
461	      endif
462	cc AJL/END
463	c
464	      if(.not.(ADFT) .and. XCFIT)then
465	       if(.not.bas_destroy(XC_bas_han))
466	     &   call errquit(pname//'Destroying XC basis handle',0, BASIS_ERR)
467	      endif
468	      if(CDFIT)then
469	       if(.not.bas_destroy(CD_bas_han))
470	     &  call errquit(pname//'Destroying CD basis handle',0, BASIS_ERR)
471	      endif
472	      if (.not.(
473	     &  bas_destroy(AO_bas_han)
474	     &  .and. geom_destroy(geom)))
475	     &  call errquit (pname//'Destroying geom and basis handles',0,
476	     &       BASIS_ERR)
477	c
478	c     == Flush output buffer ==
479	      if(iproc.eq.0) call util_flush(LuOut)
480	c
481	      call dft_pstat_print
482	      call util_print_pop
483	c
484	      return
485	      end
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_SWAPAB

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_SWAPAB) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_swapab.F(1,18)
  -> EXTERN: (21,12) ga_copy_
  -> EXTERN: (22,12) ga_copy_
  -> EXTERN: (23,12) ga_copy_
  -> EXTERN: (27,12) ga_copy_
  -> EXTERN: (28,12) ga_copy_
  -> EXTERN: (29,12) ga_copy_
  -> EXTERN: (33,12) dcopy_
  -> EXTERN: (34,12) dcopy_
  -> EXTERN: (35,12) dcopy_
  -> EXTERN: (39,12) dcopy_
  -> EXTERN: (40,12) dcopy_
  -> EXTERN: (41,12) dcopy_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_swapab.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_swapab_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_swapab.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      86
            Global    :      22
            Local     :      64
        Regenerable   :      35
        Spilled       :      10
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       5 [4.27e+00 ~ 4.3%]
            Writes    :       4 [3.42e+00 ~ 3.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_swapab.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	      Subroutine dft_swapab(g_dens, g_movecs,nbf_ao,nocc,
!INLINE REPORT: (DFT_SWAPAB) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_swapab.F(1,18)
!  -> EXTERN: (21,12) ga_copy_
!  -> EXTERN: (22,12) ga_copy_
!  -> EXTERN: (23,12) ga_copy_
!  -> EXTERN: (27,12) ga_copy_
!  -> EXTERN: (28,12) ga_copy_
!  -> EXTERN: (29,12) ga_copy_
!  -> EXTERN: (33,12) dcopy_
!  -> EXTERN: (34,12) dcopy_
!  -> EXTERN: (35,12) dcopy_
!  -> EXTERN: (39,12) dcopy_
!  -> EXTERN: (40,12) dcopy_
!  -> EXTERN: (41,12) dcopy_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_swapab.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_swapab_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_swapab.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15]
!        
!    Routine temporaries
!        Total         :      86
!            Global    :      22
!            Local     :      64
!        Regenerable   :      35
!        Spilled       :      10
!        
!    Routine stack
!        Variables     :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!        Spills        :      32 bytes*
!            Reads     :       5 [4.27e+00 ~ 4.3%]
!            Writes    :       4 [3.42e+00 ~ 3.4%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	     ,        evals,occ,g_tmp,ktmp)
3	
4	C$Id$
5	      Implicit none
6	      integer nbf_ao              ! [input] number of ao basis functions
7	      integer g_dens(2)           ! dens       [input/out] 
8	      integer g_movecs(2)         ! eigenvecs [input/output]
9	      integer g_tmp            ! scratch space
10	      double precision evals(nbf_ao,2)! eigenvalues  [input/output]
11	      double precision occ(nbf_ao,2)! occup nos  [input/output]
12	      double precision ktmp(*)! [scratch]
13	      integer nocc(2)
14	c
15	c     local
16	c
17	      integer scsc
18	c
19	c     DM
20	c
21	      call ga_copy(g_dens(2),g_tmp)
22	      call ga_copy(g_dens(1),g_dens(2))
23	      call ga_copy(g_tmp,g_dens(1))
24	c
25	c     MOs
26	c
27	      call ga_copy(g_movecs(2),g_tmp)
28	      call ga_copy(g_movecs(1),g_movecs(2))
29	      call ga_copy(g_tmp,g_movecs(1))
30	c
31	c     evals
32	c
33	      call dcopy(nbf_ao,evals,1,ktmp,1)
34	      call dcopy(nbf_ao,evals(1,2),1,evals(1,1),1)
35	      call dcopy(nbf_ao,ktmp,1,evals(1,2),1)
36	c
37	c     evals
38	c
39	      call dcopy(nbf_ao,occ,1,ktmp,1)
40	      call dcopy(nbf_ao,occ(1,2),1,occ(1,1),1)
41	      call dcopy(nbf_ao,ktmp,1,occ(1,2),1)
42	c
43	      scsc=nocc(1)
44	      nocc(1)=nocc(2)
45	      nocc(2)=scsc
46	      return
47	      end
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_MAIN0D

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_MAIN0D) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_main0d.F(3,24)
  -> EXTERN: (96,12) ga_nodeid_
  -> EXTERN: (97,15) ga_nnodes_
  -> EXTERN: (98,16) util_print_
  -> EXTERN: (99,21) util_print_
  -> EXTERN: (100,23) util_print_
  -> EXTERN: (101,10) ga_nodeid_
  -> EXTERN: (102,12) util_print_
  -> EXTERN: (103,17) geom_print_
  -> EXTERN: (103,35) errquit_
  -> EXTERN: (103,35) __getsp_inlined
  -> EXTERN: (103,35) __resetsp_inlined
  -> EXTERN: (104,19) for_concat
  -> EXTERN: (104,19) _alloca
  -> EXTERN: (115,17) rtdb_put_
  -> EXTERN: (116,10) errquit_
  -> EXTERN: (118,17) rtdb_put_
  -> EXTERN: (119,10) errquit_
  -> EXTERN: (126,12) slexit_
  -> EXTERN: (127,12) slexit2_
  -> EXTERN: (128,17) rtdb_cget_
  -> EXTERN: (134,17) rtdb_get_
  -> EXTERN: (140,10) rtdb_get_
  -> EXTERN: (148,20) rtdb_put_
  -> EXTERN: (149,13) errquit_
  -> EXTERN: (149,13) __getsp_inlined
  -> EXTERN: (149,13) __resetsp_inlined
  -> EXTERN: (149,31) for_concat
  -> EXTERN: (149,31) _alloca
  -> EXTERN: (155,16) rtdb_get_
  -> EXTERN: (160,17) rtdb_get_
  -> EXTERN: (164,17) geom_nuc_rep_energy_
  -> EXTERN: (166,8) errquit_
  -> EXTERN: (166,8) __resetsp_inlined
  -> EXTERN: (166,8) __getsp_inlined
  -> EXTERN: (166,26) _alloca
  -> EXTERN: (166,26) for_concat
  -> EXTERN: (170,17) bas_numbf_
  -> EXTERN: (171,15) errquit_
  -> EXTERN: (171,15) __resetsp_inlined
  -> EXTERN: (171,15) __getsp_inlined
  -> EXTERN: (171,28) _alloca
  -> EXTERN: (171,28) for_concat
  -> EXTERN: (175,17) rtdb_get_
  -> EXTERN: (178,14) dft_xps_
  -> EXTERN: (188,11) rtdb_get_
  -> EXTERN: (191,16) rtdb_get_
  -> EXTERN: (194,16) rtdb_get_
  -> EXTERN: (197,17) rtdb_put_
  -> EXTERN: (198,11) errquit_
  -> EXTERN: (202,15) rtdb_get_
  -> EXTERN: (204,15) rtdb_get_
  -> EXTERN: (207,15) rtdb_get_
  -> EXTERN: (210,15) rtdb_get_
  -> EXTERN: (213,15) rtdb_get_
  -> EXTERN: (220,11) rtdb_get_
  -> EXTERN: (223,15) rtdb_get_
  -> EXTERN: (229,12) rel_init_con_
  -> EXTERN: (233,16) rtdb_get_
  -> EXTERN: (235,16) rtdb_get_
  -> EXTERN: (237,16) rtdb_get_
  -> EXTERN: (239,16) rtdb_get_
  -> EXTERN: (241,16) rtdb_get_
  -> EXTERN: (246,12) rtdb_get_
  -> EXTERN: (251,22) rtdb_put_
  -> EXTERN: (252,17) errquit_
  -> EXTERN: (253,22) rtdb_put_
  -> EXTERN: (254,17) errquit_
  -> EXTERN: (256,22) rtdb_put_
  -> EXTERN: (257,17) errquit_
  -> EXTERN: (259,16) ga_nodeid_
  -> EXTERN: (260,15) for_write_seq_lis
  -> EXTERN: (261,15) for_write_seq_lis
  -> EXTERN: (262,15) for_write_seq_lis
  -> EXTERN: (263,15) for_write_seq_lis
  -> EXTERN: (264,15) for_write_seq_lis
  -> EXTERN: (290,20) bas_numbf_
  -> EXTERN: (291,18) errquit_
  -> EXTERN: (299,26) ga_create_
  -> EXTERN: (301,18) errquit_
  -> EXTERN: (301,18) __resetsp_inlined
  -> EXTERN: (301,18) __getsp_inlined
  -> EXTERN: (301,36) _alloca
  -> EXTERN: (301,36) for_concat
  -> EXTERN: (302,21) ga_zero_
  -> EXTERN: (304,23) ga_create_
  -> EXTERN: (306,16) errquit_
  -> EXTERN: (306,16) __resetsp_inlined
  -> EXTERN: (306,16) __getsp_inlined
  -> EXTERN: (306,34) _alloca
  -> EXTERN: (306,34) for_concat
  -> EXTERN: (307,18) ga_zero_
  -> EXTERN: (308,18) int_1e_ga_
  -> EXTERN: (310,23) sym_symmetrize_
  -> EXTERN: (313,18) dft_cholinv_
  -> EXTERN: (315,23) ga_destroy_
  -> EXTERN: (315,41) errquit_
  -> EXTERN: (315,41) __resetsp_inlined
  -> EXTERN: (315,41) __getsp_inlined
  -> EXTERN: (316,22) _alloca
  -> EXTERN: (316,22) for_concat
  -> EXTERN: (319,19) dft_invio_
  -> EXTERN: (321,14) __resetsp_inlined
  -> EXTERN: (321,14) errquit_
  -> EXTERN: (321,14) __getsp_inlined
  -> EXTERN: (321,32) for_concat
  -> EXTERN: (321,32) _alloca
  -> EXTERN: (325,23) ga_destroy_
  -> EXTERN: (325,44) errquit_
  -> EXTERN: (325,44) __getsp_inlined
  -> EXTERN: (325,44) __resetsp_inlined
  -> EXTERN: (326,22) for_concat
  -> EXTERN: (326,22) _alloca
  -> EXTERN: (348,22) pstat_on_
  -> EXTERN: (349,20) bas_numbf_
  -> EXTERN: (350,18) errquit_
  -> EXTERN: (355,20) ga_create_
  -> EXTERN: (357,13) errquit_
  -> EXTERN: (357,13) __getsp_inlined
  -> EXTERN: (357,13) __resetsp_inlined
  -> EXTERN: (357,31) for_concat
  -> EXTERN: (357,31) _alloca
  -> EXTERN: (359,15) ga_zero_
  -> EXTERN: (360,15) dft_get2eri_
  -> EXTERN: (361,22) pstat_off_
  -> EXTERN: (362,20) sym_symmetrize_
  -> EXTERN: (364,15) ga_sync_
  -> EXTERN: (365,20) ga_duplicate_
  -> EXTERN: (366,15) errquit_
  -> EXTERN: (366,15) __getsp_inlined
  -> EXTERN: (366,15) __resetsp_inlined
  -> EXTERN: (366,33) for_concat
  -> EXTERN: (366,33) _alloca
  -> EXTERN: (368,15) dft_cholinv_
  -> EXTERN: (382,21) dft_invio_
  -> EXTERN: (383,31) errquit_
  -> EXTERN: (383,31) __resetsp_inlined
  -> EXTERN: (383,31) __getsp_inlined
  -> EXTERN: (384,22) _alloca
  -> EXTERN: (384,22) for_concat
  -> EXTERN: (387,21) dft_invio_
  -> EXTERN: (388,31) errquit_
  -> EXTERN: (388,31) __getsp_inlined
  -> EXTERN: (388,31) __resetsp_inlined
  -> EXTERN: (389,22) for_concat
  -> EXTERN: (389,22) _alloca
  -> EXTERN: (393,21) ga_print_
  -> EXTERN: (394,21) ga_print_
  -> EXTERN: (398,23) ga_destroy_
  -> EXTERN: (398,44) errquit_
  -> EXTERN: (398,44) __resetsp_inlined
  -> EXTERN: (398,44) __getsp_inlined
  -> EXTERN: (399,22) _alloca
  -> EXTERN: (399,22) for_concat
  -> EXTERN: (400,23) ga_destroy_
  -> EXTERN: (400,44) errquit_
  -> EXTERN: (400,44) __getsp_inlined
  -> EXTERN: (400,44) __resetsp_inlined
  -> EXTERN: (401,22) for_concat
  -> EXTERN: (401,22) _alloca
  -> EXTERN: (412,17) rtdb_get_
  -> EXTERN: (416,16) ga_create_atom_blocked_
  -> EXTERN: (418,20) ga_create_
  -> EXTERN: (420,15) errquit_
  -> EXTERN: (420,15) __resetsp_inlined
  -> EXTERN: (420,15) __getsp_inlined
  -> EXTERN: (420,33) _alloca
  -> EXTERN: (420,33) for_concat
  -> EXTERN: (422,12) ga_zero_
  -> EXTERN: (423,16) ma_push_get_
  -> EXTERN: (425,10) errquit_
  -> EXTERN: (425,10) __resetsp_inlined
  -> EXTERN: (425,10) __getsp_inlined
  -> EXTERN: (425,28) _alloca
  -> EXTERN: (425,28) for_concat
  -> EXTERN: (427,12) dfill_
  -> EXTERN: (428,12) int_1e_ga_
  -> EXTERN: (429,17) sym_symmetrize_
  -> EXTERN: (436,17) ga_duplicate_
  -> EXTERN: (437,12) errquit_
  -> EXTERN: (437,12) __resetsp_inlined
  -> EXTERN: (437,12) __getsp_inlined
  -> EXTERN: (437,30) _alloca
  -> EXTERN: (437,30) for_concat
  -> EXTERN: (438,12) ga_zero_
  -> EXTERN: (439,19) pstat_on_
  -> EXTERN: (446,15) dft_scaleig_
  -> EXTERN: (454,19) pstat_off_
  -> EXTERN: (456,17) ga_duplicate_
  -> EXTERN: (457,12) errquit_
  -> EXTERN: (457,12) __resetsp_inlined
  -> EXTERN: (457,12) __getsp_inlined
  -> EXTERN: (457,30) _alloca
  -> EXTERN: (457,30) for_concat
  -> EXTERN: (458,12) ga_zero_
  -> EXTERN: (460,17) ga_duplicate_
  -> EXTERN: (461,8) errquit_
  -> EXTERN: (461,8) __resetsp_inlined
  -> EXTERN: (461,8) __getsp_inlined
  -> EXTERN: (461,26) _alloca
  -> EXTERN: (461,26) for_concat
  -> EXTERN: (462,12) ga_zero_
  -> EXTERN: (464,17) ga_duplicate_
  -> EXTERN: (465,8) errquit_
  -> EXTERN: (465,8) __resetsp_inlined
  -> EXTERN: (465,8) __getsp_inlined
  -> EXTERN: (465,26) _alloca
  -> EXTERN: (465,26) for_concat
  -> EXTERN: (466,12) ga_zero_
  -> EXTERN: (469,18) ga_duplicate_
  -> EXTERN: (470,9) errquit_
  -> EXTERN: (470,9) __getsp_inlined
  -> EXTERN: (470,9) __resetsp_inlined
  -> EXTERN: (470,27) for_concat
  -> EXTERN: (470,27) _alloca
  -> EXTERN: (471,13) ga_zero_
  -> EXTERN: (473,18) ga_duplicate_
  -> EXTERN: (474,9) errquit_
  -> EXTERN: (474,9) __getsp_inlined
  -> EXTERN: (474,9) __resetsp_inlined
  -> EXTERN: (474,27) for_concat
  -> EXTERN: (474,27) _alloca
  -> EXTERN: (475,13) ga_zero_
  -> EXTERN: (477,18) ga_duplicate_
  -> EXTERN: (478,9) errquit_
  -> EXTERN: (478,9) __getsp_inlined
  -> EXTERN: (478,9) __resetsp_inlined
  -> EXTERN: (478,27) for_concat
  -> EXTERN: (478,27) _alloca
  -> EXTERN: (479,13) ga_zero_
  -> EXTERN: (481,18) ga_duplicate_
  -> EXTERN: (482,9) errquit_
  -> EXTERN: (482,9) __getsp_inlined
  -> EXTERN: (482,9) __resetsp_inlined
  -> EXTERN: (482,27) for_concat
  -> EXTERN: (482,27) _alloca
  -> EXTERN: (483,13) ga_zero_
  -> EXTERN: (487,12) dft_cscf_movecs_
  -> EXTERN: (490,17) ga_duplicate_
  -> EXTERN: (491,12) errquit_
  -> EXTERN: (491,12) __resetsp_inlined
  -> EXTERN: (491,12) __getsp_inlined
  -> EXTERN: (491,30) _alloca
  -> EXTERN: (491,30) for_concat
  -> EXTERN: (492,12) ga_zero_
  -> EXTERN: (500,17) ga_create_
  -> EXTERN: (501,27) errquit_
  -> EXTERN: (501,27) __getsp_inlined
  -> EXTERN: (501,27) __resetsp_inlined
  -> EXTERN: (501,45) for_concat
  -> EXTERN: (501,45) _alloca
  -> EXTERN: (502,12) ga_zero_
  -> EXTERN: (504,17) ga_create_
  -> EXTERN: (505,27) errquit_
  -> EXTERN: (505,27) __getsp_inlined
  -> EXTERN: (505,27) __resetsp_inlined
  -> EXTERN: (505,45) for_concat
  -> EXTERN: (505,45) _alloca
  -> EXTERN: (506,12) ga_zero_
  -> EXTERN: (508,17) ga_create_
  -> EXTERN: (509,27) errquit_
  -> EXTERN: (509,27) __getsp_inlined
  -> EXTERN: (509,27) __resetsp_inlined
  -> EXTERN: (509,45) for_concat
  -> EXTERN: (509,45) _alloca
  -> EXTERN: (510,12) ga_zero_
  -> EXTERN: (513,12) int_dip_ga_
  -> EXTERN: (524,16) nga_create_
  -> EXTERN: (524,63) errquit_
  -> EXTERN: (524,63) __getsp_inlined
  -> EXTERN: (524,63) __resetsp_inlined
  -> EXTERN: (525,22) for_concat
  -> EXTERN: (525,22) _alloca
  -> EXTERN: (526,12) ga_zero_
  -> EXTERN: (527,12) int_giao_1ega_
  -> EXTERN: (532,17) ga_create_
  -> EXTERN: (533,28) errquit_
  -> EXTERN: (533,28) __getsp_inlined
  -> EXTERN: (533,28) __resetsp_inlined
  -> EXTERN: (533,46) for_concat
  -> EXTERN: (533,46) _alloca
  -> EXTERN: (534,12) ga_zero_
  -> EXTERN: (541,12) util_tolls_
  -> EXTERN: (544,17) ga_duplicate_
  -> EXTERN: (545,12) errquit_
  -> EXTERN: (545,12) __resetsp_inlined
  -> EXTERN: (545,12) __getsp_inlined
  -> EXTERN: (545,30) _alloca
  -> EXTERN: (545,30) for_concat
  -> EXTERN: (546,12) diis_bld12_
  -> EXTERN: (548,17) ga_destroy_
  -> EXTERN: (548,36) errquit_
  -> EXTERN: (548,36) __resetsp_inlined
  -> EXTERN: (548,36) __getsp_inlined
  -> EXTERN: (549,16) _alloca
  -> EXTERN: (549,16) for_concat
  -> EXTERN: (550,22) ga_copy_
  -> EXTERN: (552,17) rtdb_get_
  -> EXTERN: (556,20) rtdb_get_
  -> EXTERN: (557,12) errquit_
  -> EXTERN: (557,12) __getsp_inlined
  -> EXTERN: (557,12) __resetsp_inlined
  -> EXTERN: (557,30) for_concat
  -> EXTERN: (557,30) _alloca
  -> EXTERN: (560,24) dft_tstamp_
  -> EXTERN: (562,17) rtdb_cget_
  -> EXTERN: (563,12) errquit_
  -> EXTERN: (564,19) pstat_on_
  -> EXTERN: (568,8) for_write_seq_lis
  -> EXTERN: (569,8) for_write_seq_lis
  -> EXTERN: (570,13) errquit_
  -> EXTERN: (574,18) for_cpstr
  -> EXTERN: (577,26) dft_scf_
  -> EXTERN: (583,26) dft_cg_solve_
  -> EXTERN: (588,23) for_cpstr
  -> EXTERN: (592,15) util_print_centered_
  -> EXTERN: (594,10) for_write_seq_lis
  -> EXTERN: (599,22) dft_scf_so_
  -> EXTERN: (607,19) pstat_off_
  -> EXTERN: (610,17) ga_destroy_
  -> EXTERN: (610,34) errquit_
  -> EXTERN: (610,34) __resetsp_inlined
  -> EXTERN: (610,34) __getsp_inlined
  -> EXTERN: (611,19) _alloca
  -> EXTERN: (611,19) for_concat
  -> EXTERN: (614,18) dft_invio_
  -> EXTERN: (615,18) dft_invio_
  -> EXTERN: (618,18) dft_invio_
  -> EXTERN: (622,20) ga_destroy_
  -> EXTERN: (622,41) errquit_
  -> EXTERN: (622,41) __getsp_inlined
  -> EXTERN: (622,41) __resetsp_inlined
  -> EXTERN: (623,19) for_concat
  -> EXTERN: (623,19) _alloca
  -> EXTERN: (624,20) ga_destroy_
  -> EXTERN: (624,41) errquit_
  -> EXTERN: (624,41) __getsp_inlined
  -> EXTERN: (624,41) __resetsp_inlined
  -> EXTERN: (625,19) for_concat
  -> EXTERN: (625,19) _alloca
  -> EXTERN: (628,20) ga_destroy_
  -> EXTERN: (628,41) errquit_
  -> EXTERN: (628,41) __getsp_inlined
  -> EXTERN: (628,41) __resetsp_inlined
  -> EXTERN: (629,19) for_concat
  -> EXTERN: (629,19) _alloca
  -> EXTERN: (631,17) ga_destroy_
  -> EXTERN: (631,37) errquit_
  -> EXTERN: (631,37) __resetsp_inlined
  -> EXTERN: (631,37) __getsp_inlined
  -> EXTERN: (632,16) _alloca
  -> EXTERN: (632,16) for_concat
  -> EXTERN: (634,20) ga_destroy_
  -> EXTERN: (634,42) errquit_
  -> EXTERN: (634,42) __getsp_inlined
  -> EXTERN: (634,42) __resetsp_inlined
  -> EXTERN: (635,19) for_concat
  -> EXTERN: (635,19) _alloca
  -> EXTERN: (638,20) ga_destroy_
  -> EXTERN: (638,44) errquit_
  -> EXTERN: (638,44) __getsp_inlined
  -> EXTERN: (638,44) __resetsp_inlined
  -> EXTERN: (639,19) for_concat
  -> EXTERN: (639,19) _alloca
  -> EXTERN: (640,20) ga_destroy_
  -> EXTERN: (640,43) errquit_
  -> EXTERN: (640,43) __getsp_inlined
  -> EXTERN: (640,43) __resetsp_inlined
  -> EXTERN: (641,19) for_concat
  -> EXTERN: (641,19) _alloca
  -> EXTERN: (642,20) ga_destroy_
  -> EXTERN: (642,46) errquit_
  -> EXTERN: (642,46) __getsp_inlined
  -> EXTERN: (642,46) __resetsp_inlined
  -> EXTERN: (643,19) for_concat
  -> EXTERN: (643,19) _alloca
  -> EXTERN: (646,17) ga_destroy_
  -> EXTERN: (646,41) errquit_
  -> EXTERN: (646,41) __resetsp_inlined
  -> EXTERN: (646,41) __getsp_inlined
  -> EXTERN: (647,16) _alloca
  -> EXTERN: (647,16) for_concat
  -> EXTERN: (648,17) ga_destroy_
  -> EXTERN: (648,40) errquit_
  -> EXTERN: (648,40) __resetsp_inlined
  -> EXTERN: (648,40) __getsp_inlined
  -> EXTERN: (649,16) _alloca
  -> EXTERN: (649,16) for_concat
  -> EXTERN: (650,17) ga_destroy_
  -> EXTERN: (650,43) errquit_
  -> EXTERN: (650,43) __resetsp_inlined
  -> EXTERN: (650,43) __getsp_inlined
  -> EXTERN: (651,16) _alloca
  -> EXTERN: (651,16) for_concat
  -> EXTERN: (652,17) ga_destroy_
  -> EXTERN: (652,38) errquit_
  -> EXTERN: (652,38) __resetsp_inlined
  -> EXTERN: (652,38) __getsp_inlined
  -> EXTERN: (653,16) _alloca
  -> EXTERN: (653,16) for_concat
  -> EXTERN: (657,18) ga_destroy_
  -> EXTERN: (657,38) errquit_
  -> EXTERN: (657,38) __getsp_inlined
  -> EXTERN: (657,38) __resetsp_inlined
  -> EXTERN: (658,16) for_concat
  -> EXTERN: (658,16) _alloca
  -> EXTERN: (659,18) ga_destroy_
  -> EXTERN: (659,38) errquit_
  -> EXTERN: (659,38) __getsp_inlined
  -> EXTERN: (659,38) __resetsp_inlined
  -> EXTERN: (660,16) for_concat
  -> EXTERN: (660,16) _alloca
  -> EXTERN: (661,18) ga_destroy_
  -> EXTERN: (661,38) errquit_
  -> EXTERN: (661,38) __getsp_inlined
  -> EXTERN: (661,38) __resetsp_inlined
  -> EXTERN: (662,16) for_concat
  -> EXTERN: (662,16) _alloca
  -> EXTERN: (663,18) ga_destroy_
  -> EXTERN: (663,37) errquit_
  -> EXTERN: (663,37) __getsp_inlined
  -> EXTERN: (663,37) __resetsp_inlined
  -> EXTERN: (664,16) for_concat
  -> EXTERN: (664,16) _alloca
  -> EXTERN: (665,18) ga_destroy_
  -> EXTERN: (665,39) errquit_
  -> EXTERN: (665,39) __getsp_inlined
  -> EXTERN: (665,39) __resetsp_inlined
  -> EXTERN: (666,16) for_concat
  -> EXTERN: (666,16) _alloca
  -> EXTERN: (669,16) ma_chop_stack_
  -> EXTERN: (670,9) errquit_
  -> EXTERN: (670,9) __resetsp_inlined
  -> EXTERN: (670,9) __getsp_inlined
  -> EXTERN: (670,27) _alloca
  -> EXTERN: (670,27) for_concat


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_main0d.F(95,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.860 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 10  
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_main0d.F(95,7)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 5  
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_main0d.F(95,7)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 2.620 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_main0d.F(3,24):remark #34051: REGISTER ALLOCATION : [dft_main0d_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_main0d.F:3

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :    2072
            Global    :     419
            Local     :    1653
        Regenerable   :    1482
        Spilled       :      75
        
    Routine stack
        Variables     :    2120 bytes*
            Reads     :      23 [1.42e+00 ~ 1.4%]
            Writes    :     258 [2.61e+00 ~ 2.6%]
        Spills        :     560 bytes*
            Reads     :      71 [4.43e-01 ~ 0.4%]
            Writes    :      70 [5.76e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_main0d.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	c
2	c     == Main DFT driver ==
3	      logical function dft_main0d(rtdb)
!INLINE REPORT: (DFT_MAIN0D) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_main0d.F(3,24)
!  -> EXTERN: (96,12) ga_nodeid_
!  -> EXTERN: (97,15) ga_nnodes_
!  -> EXTERN: (98,16) util_print_
!  -> EXTERN: (99,21) util_print_
!  -> EXTERN: (100,23) util_print_
!  -> EXTERN: (101,10) ga_nodeid_
!  -> EXTERN: (102,12) util_print_
!  -> EXTERN: (103,17) geom_print_
!  -> EXTERN: (103,35) errquit_
!  -> EXTERN: (103,35) __getsp_inlined
!  -> EXTERN: (103,35) __resetsp_inlined
!  -> EXTERN: (104,19) for_concat
!  -> EXTERN: (104,19) _alloca
!  -> EXTERN: (115,17) rtdb_put_
!  -> EXTERN: (116,10) errquit_
!  -> EXTERN: (118,17) rtdb_put_
!  -> EXTERN: (119,10) errquit_
!  -> EXTERN: (126,12) slexit_
!  -> EXTERN: (127,12) slexit2_
!  -> EXTERN: (128,17) rtdb_cget_
!  -> EXTERN: (134,17) rtdb_get_
!  -> EXTERN: (140,10) rtdb_get_
!  -> EXTERN: (148,20) rtdb_put_
!  -> EXTERN: (149,13) errquit_
!  -> EXTERN: (149,13) __getsp_inlined
!  -> EXTERN: (149,13) __resetsp_inlined
!  -> EXTERN: (149,31) for_concat
!  -> EXTERN: (149,31) _alloca
!  -> EXTERN: (155,16) rtdb_get_
!  -> EXTERN: (160,17) rtdb_get_
!  -> EXTERN: (164,17) geom_nuc_rep_energy_
!  -> EXTERN: (166,8) errquit_
!  -> EXTERN: (166,8) __resetsp_inlined
!  -> EXTERN: (166,8) __getsp_inlined
!  -> EXTERN: (166,26) _alloca
!  -> EXTERN: (166,26) for_concat
!  -> EXTERN: (170,17) bas_numbf_
!  -> EXTERN: (171,15) errquit_
!  -> EXTERN: (171,15) __resetsp_inlined
!  -> EXTERN: (171,15) __getsp_inlined
!  -> EXTERN: (171,28) _alloca
!  -> EXTERN: (171,28) for_concat
!  -> EXTERN: (175,17) rtdb_get_
!  -> EXTERN: (178,14) dft_xps_
!  -> EXTERN: (188,11) rtdb_get_
!  -> EXTERN: (191,16) rtdb_get_
!  -> EXTERN: (194,16) rtdb_get_
!  -> EXTERN: (197,17) rtdb_put_
!  -> EXTERN: (198,11) errquit_
!  -> EXTERN: (202,15) rtdb_get_
!  -> EXTERN: (204,15) rtdb_get_
!  -> EXTERN: (207,15) rtdb_get_
!  -> EXTERN: (210,15) rtdb_get_
!  -> EXTERN: (213,15) rtdb_get_
!  -> EXTERN: (220,11) rtdb_get_
!  -> EXTERN: (223,15) rtdb_get_
!  -> EXTERN: (229,12) rel_init_con_
!  -> EXTERN: (233,16) rtdb_get_
!  -> EXTERN: (235,16) rtdb_get_
!  -> EXTERN: (237,16) rtdb_get_
!  -> EXTERN: (239,16) rtdb_get_
!  -> EXTERN: (241,16) rtdb_get_
!  -> EXTERN: (246,12) rtdb_get_
!  -> EXTERN: (251,22) rtdb_put_
!  -> EXTERN: (252,17) errquit_
!  -> EXTERN: (253,22) rtdb_put_
!  -> EXTERN: (254,17) errquit_
!  -> EXTERN: (256,22) rtdb_put_
!  -> EXTERN: (257,17) errquit_
!  -> EXTERN: (259,16) ga_nodeid_
!  -> EXTERN: (260,15) for_write_seq_lis
!  -> EXTERN: (261,15) for_write_seq_lis
!  -> EXTERN: (262,15) for_write_seq_lis
!  -> EXTERN: (263,15) for_write_seq_lis
!  -> EXTERN: (264,15) for_write_seq_lis
!  -> EXTERN: (290,20) bas_numbf_
!  -> EXTERN: (291,18) errquit_
!  -> EXTERN: (299,26) ga_create_
!  -> EXTERN: (301,18) errquit_
!  -> EXTERN: (301,18) __resetsp_inlined
!  -> EXTERN: (301,18) __getsp_inlined
!  -> EXTERN: (301,36) _alloca
!  -> EXTERN: (301,36) for_concat
!  -> EXTERN: (302,21) ga_zero_
!  -> EXTERN: (304,23) ga_create_
!  -> EXTERN: (306,16) errquit_
!  -> EXTERN: (306,16) __resetsp_inlined
!  -> EXTERN: (306,16) __getsp_inlined
!  -> EXTERN: (306,34) _alloca
!  -> EXTERN: (306,34) for_concat
!  -> EXTERN: (307,18) ga_zero_
!  -> EXTERN: (308,18) int_1e_ga_
!  -> EXTERN: (310,23) sym_symmetrize_
!  -> EXTERN: (313,18) dft_cholinv_
!  -> EXTERN: (315,23) ga_destroy_
!  -> EXTERN: (315,41) errquit_
!  -> EXTERN: (315,41) __resetsp_inlined
!  -> EXTERN: (315,41) __getsp_inlined
!  -> EXTERN: (316,22) _alloca
!  -> EXTERN: (316,22) for_concat
!  -> EXTERN: (319,19) dft_invio_
!  -> EXTERN: (321,14) __resetsp_inlined
!  -> EXTERN: (321,14) errquit_
!  -> EXTERN: (321,14) __getsp_inlined
!  -> EXTERN: (321,32) for_concat
!  -> EXTERN: (321,32) _alloca
!  -> EXTERN: (325,23) ga_destroy_
!  -> EXTERN: (325,44) errquit_
!  -> EXTERN: (325,44) __getsp_inlined
!  -> EXTERN: (325,44) __resetsp_inlined
!  -> EXTERN: (326,22) for_concat
!  -> EXTERN: (326,22) _alloca
!  -> EXTERN: (348,22) pstat_on_
!  -> EXTERN: (349,20) bas_numbf_
!  -> EXTERN: (350,18) errquit_
!  -> EXTERN: (355,20) ga_create_
!  -> EXTERN: (357,13) errquit_
!  -> EXTERN: (357,13) __getsp_inlined
!  -> EXTERN: (357,13) __resetsp_inlined
!  -> EXTERN: (357,31) for_concat
!  -> EXTERN: (357,31) _alloca
!  -> EXTERN: (359,15) ga_zero_
!  -> EXTERN: (360,15) dft_get2eri_
!  -> EXTERN: (361,22) pstat_off_
!  -> EXTERN: (362,20) sym_symmetrize_
!  -> EXTERN: (364,15) ga_sync_
!  -> EXTERN: (365,20) ga_duplicate_
!  -> EXTERN: (366,15) errquit_
!  -> EXTERN: (366,15) __getsp_inlined
!  -> EXTERN: (366,15) __resetsp_inlined
!  -> EXTERN: (366,33) for_concat
!  -> EXTERN: (366,33) _alloca
!  -> EXTERN: (368,15) dft_cholinv_
!  -> EXTERN: (382,21) dft_invio_
!  -> EXTERN: (383,31) errquit_
!  -> EXTERN: (383,31) __resetsp_inlined
!  -> EXTERN: (383,31) __getsp_inlined
!  -> EXTERN: (384,22) _alloca
!  -> EXTERN: (384,22) for_concat
!  -> EXTERN: (387,21) dft_invio_
!  -> EXTERN: (388,31) errquit_
!  -> EXTERN: (388,31) __getsp_inlined
!  -> EXTERN: (388,31) __resetsp_inlined
!  -> EXTERN: (389,22) for_concat
!  -> EXTERN: (389,22) _alloca
!  -> EXTERN: (393,21) ga_print_
!  -> EXTERN: (394,21) ga_print_
!  -> EXTERN: (398,23) ga_destroy_
!  -> EXTERN: (398,44) errquit_
!  -> EXTERN: (398,44) __resetsp_inlined
!  -> EXTERN: (398,44) __getsp_inlined
!  -> EXTERN: (399,22) _alloca
!  -> EXTERN: (399,22) for_concat
!  -> EXTERN: (400,23) ga_destroy_
!  -> EXTERN: (400,44) errquit_
!  -> EXTERN: (400,44) __getsp_inlined
!  -> EXTERN: (400,44) __resetsp_inlined
!  -> EXTERN: (401,22) for_concat
!  -> EXTERN: (401,22) _alloca
!  -> EXTERN: (412,17) rtdb_get_
!  -> EXTERN: (416,16) ga_create_atom_blocked_
!  -> EXTERN: (418,20) ga_create_
!  -> EXTERN: (420,15) errquit_
!  -> EXTERN: (420,15) __resetsp_inlined
!  -> EXTERN: (420,15) __getsp_inlined
!  -> EXTERN: (420,33) _alloca
!  -> EXTERN: (420,33) for_concat
!  -> EXTERN: (422,12) ga_zero_
!  -> EXTERN: (423,16) ma_push_get_
!  -> EXTERN: (425,10) errquit_
!  -> EXTERN: (425,10) __resetsp_inlined
!  -> EXTERN: (425,10) __getsp_inlined
!  -> EXTERN: (425,28) _alloca
!  -> EXTERN: (425,28) for_concat
!  -> EXTERN: (427,12) dfill_
!  -> EXTERN: (428,12) int_1e_ga_
!  -> EXTERN: (429,17) sym_symmetrize_
!  -> EXTERN: (436,17) ga_duplicate_
!  -> EXTERN: (437,12) errquit_
!  -> EXTERN: (437,12) __resetsp_inlined
!  -> EXTERN: (437,12) __getsp_inlined
!  -> EXTERN: (437,30) _alloca
!  -> EXTERN: (437,30) for_concat
!  -> EXTERN: (438,12) ga_zero_
!  -> EXTERN: (439,19) pstat_on_
!  -> EXTERN: (446,15) dft_scaleig_
!  -> EXTERN: (454,19) pstat_off_
!  -> EXTERN: (456,17) ga_duplicate_
!  -> EXTERN: (457,12) errquit_
!  -> EXTERN: (457,12) __resetsp_inlined
!  -> EXTERN: (457,12) __getsp_inlined
!  -> EXTERN: (457,30) _alloca
!  -> EXTERN: (457,30) for_concat
!  -> EXTERN: (458,12) ga_zero_
!  -> EXTERN: (460,17) ga_duplicate_
!  -> EXTERN: (461,8) errquit_
!  -> EXTERN: (461,8) __resetsp_inlined
!  -> EXTERN: (461,8) __getsp_inlined
!  -> EXTERN: (461,26) _alloca
!  -> EXTERN: (461,26) for_concat
!  -> EXTERN: (462,12) ga_zero_
!  -> EXTERN: (464,17) ga_duplicate_
!  -> EXTERN: (465,8) errquit_
!  -> EXTERN: (465,8) __resetsp_inlined
!  -> EXTERN: (465,8) __getsp_inlined
!  -> EXTERN: (465,26) _alloca
!  -> EXTERN: (465,26) for_concat
!  -> EXTERN: (466,12) ga_zero_
!  -> EXTERN: (469,18) ga_duplicate_
!  -> EXTERN: (470,9) errquit_
!  -> EXTERN: (470,9) __getsp_inlined
!  -> EXTERN: (470,9) __resetsp_inlined
!  -> EXTERN: (470,27) for_concat
!  -> EXTERN: (470,27) _alloca
!  -> EXTERN: (471,13) ga_zero_
!  -> EXTERN: (473,18) ga_duplicate_
!  -> EXTERN: (474,9) errquit_
!  -> EXTERN: (474,9) __getsp_inlined
!  -> EXTERN: (474,9) __resetsp_inlined
!  -> EXTERN: (474,27) for_concat
!  -> EXTERN: (474,27) _alloca
!  -> EXTERN: (475,13) ga_zero_
!  -> EXTERN: (477,18) ga_duplicate_
!  -> EXTERN: (478,9) errquit_
!  -> EXTERN: (478,9) __getsp_inlined
!  -> EXTERN: (478,9) __resetsp_inlined
!  -> EXTERN: (478,27) for_concat
!  -> EXTERN: (478,27) _alloca
!  -> EXTERN: (479,13) ga_zero_
!  -> EXTERN: (481,18) ga_duplicate_
!  -> EXTERN: (482,9) errquit_
!  -> EXTERN: (482,9) __getsp_inlined
!  -> EXTERN: (482,9) __resetsp_inlined
!  -> EXTERN: (482,27) for_concat
!  -> EXTERN: (482,27) _alloca
!  -> EXTERN: (483,13) ga_zero_
!  -> EXTERN: (487,12) dft_cscf_movecs_
!  -> EXTERN: (490,17) ga_duplicate_
!  -> EXTERN: (491,12) errquit_
!  -> EXTERN: (491,12) __resetsp_inlined
!  -> EXTERN: (491,12) __getsp_inlined
!  -> EXTERN: (491,30) _alloca
!  -> EXTERN: (491,30) for_concat
!  -> EXTERN: (492,12) ga_zero_
!  -> EXTERN: (500,17) ga_create_
!  -> EXTERN: (501,27) errquit_
!  -> EXTERN: (501,27) __getsp_inlined
!  -> EXTERN: (501,27) __resetsp_inlined
!  -> EXTERN: (501,45) for_concat
!  -> EXTERN: (501,45) _alloca
!  -> EXTERN: (502,12) ga_zero_
!  -> EXTERN: (504,17) ga_create_
!  -> EXTERN: (505,27) errquit_
!  -> EXTERN: (505,27) __getsp_inlined
!  -> EXTERN: (505,27) __resetsp_inlined
!  -> EXTERN: (505,45) for_concat
!  -> EXTERN: (505,45) _alloca
!  -> EXTERN: (506,12) ga_zero_
!  -> EXTERN: (508,17) ga_create_
!  -> EXTERN: (509,27) errquit_
!  -> EXTERN: (509,27) __getsp_inlined
!  -> EXTERN: (509,27) __resetsp_inlined
!  -> EXTERN: (509,45) for_concat
!  -> EXTERN: (509,45) _alloca
!  -> EXTERN: (510,12) ga_zero_
!  -> EXTERN: (513,12) int_dip_ga_
!  -> EXTERN: (524,16) nga_create_
!  -> EXTERN: (524,63) errquit_
!  -> EXTERN: (524,63) __getsp_inlined
!  -> EXTERN: (524,63) __resetsp_inlined
!  -> EXTERN: (525,22) for_concat
!  -> EXTERN: (525,22) _alloca
!  -> EXTERN: (526,12) ga_zero_
!  -> EXTERN: (527,12) int_giao_1ega_
!  -> EXTERN: (532,17) ga_create_
!  -> EXTERN: (533,28) errquit_
!  -> EXTERN: (533,28) __getsp_inlined
!  -> EXTERN: (533,28) __resetsp_inlined
!  -> EXTERN: (533,46) for_concat
!  -> EXTERN: (533,46) _alloca
!  -> EXTERN: (534,12) ga_zero_
!  -> EXTERN: (541,12) util_tolls_
!  -> EXTERN: (544,17) ga_duplicate_
!  -> EXTERN: (545,12) errquit_
!  -> EXTERN: (545,12) __resetsp_inlined
!  -> EXTERN: (545,12) __getsp_inlined
!  -> EXTERN: (545,30) _alloca
!  -> EXTERN: (545,30) for_concat
!  -> EXTERN: (546,12) diis_bld12_
!  -> EXTERN: (548,17) ga_destroy_
!  -> EXTERN: (548,36) errquit_
!  -> EXTERN: (548,36) __resetsp_inlined
!  -> EXTERN: (548,36) __getsp_inlined
!  -> EXTERN: (549,16) _alloca
!  -> EXTERN: (549,16) for_concat
!  -> EXTERN: (550,22) ga_copy_
!  -> EXTERN: (552,17) rtdb_get_
!  -> EXTERN: (556,20) rtdb_get_
!  -> EXTERN: (557,12) errquit_
!  -> EXTERN: (557,12) __getsp_inlined
!  -> EXTERN: (557,12) __resetsp_inlined
!  -> EXTERN: (557,30) for_concat
!  -> EXTERN: (557,30) _alloca
!  -> EXTERN: (560,24) dft_tstamp_
!  -> EXTERN: (562,17) rtdb_cget_
!  -> EXTERN: (563,12) errquit_
!  -> EXTERN: (564,19) pstat_on_
!  -> EXTERN: (568,8) for_write_seq_lis
!  -> EXTERN: (569,8) for_write_seq_lis
!  -> EXTERN: (570,13) errquit_
!  -> EXTERN: (574,18) for_cpstr
!  -> EXTERN: (577,26) dft_scf_
!  -> EXTERN: (583,26) dft_cg_solve_
!  -> EXTERN: (588,23) for_cpstr
!  -> EXTERN: (592,15) util_print_centered_
!  -> EXTERN: (594,10) for_write_seq_lis
!  -> EXTERN: (599,22) dft_scf_so_
!  -> EXTERN: (607,19) pstat_off_
!  -> EXTERN: (610,17) ga_destroy_
!  -> EXTERN: (610,34) errquit_
!  -> EXTERN: (610,34) __resetsp_inlined
!  -> EXTERN: (610,34) __getsp_inlined
!  -> EXTERN: (611,19) _alloca
!  -> EXTERN: (611,19) for_concat
!  -> EXTERN: (614,18) dft_invio_
!  -> EXTERN: (615,18) dft_invio_
!  -> EXTERN: (618,18) dft_invio_
!  -> EXTERN: (622,20) ga_destroy_
!  -> EXTERN: (622,41) errquit_
!  -> EXTERN: (622,41) __getsp_inlined
!  -> EXTERN: (622,41) __resetsp_inlined
!  -> EXTERN: (623,19) for_concat
!  -> EXTERN: (623,19) _alloca
!  -> EXTERN: (624,20) ga_destroy_
!  -> EXTERN: (624,41) errquit_
!  -> EXTERN: (624,41) __getsp_inlined
!  -> EXTERN: (624,41) __resetsp_inlined
!  -> EXTERN: (625,19) for_concat
!  -> EXTERN: (625,19) _alloca
!  -> EXTERN: (628,20) ga_destroy_
!  -> EXTERN: (628,41) errquit_
!  -> EXTERN: (628,41) __getsp_inlined
!  -> EXTERN: (628,41) __resetsp_inlined
!  -> EXTERN: (629,19) for_concat
!  -> EXTERN: (629,19) _alloca
!  -> EXTERN: (631,17) ga_destroy_
!  -> EXTERN: (631,37) errquit_
!  -> EXTERN: (631,37) __resetsp_inlined
!  -> EXTERN: (631,37) __getsp_inlined
!  -> EXTERN: (632,16) _alloca
!  -> EXTERN: (632,16) for_concat
!  -> EXTERN: (634,20) ga_destroy_
!  -> EXTERN: (634,42) errquit_
!  -> EXTERN: (634,42) __getsp_inlined
!  -> EXTERN: (634,42) __resetsp_inlined
!  -> EXTERN: (635,19) for_concat
!  -> EXTERN: (635,19) _alloca
!  -> EXTERN: (638,20) ga_destroy_
!  -> EXTERN: (638,44) errquit_
!  -> EXTERN: (638,44) __getsp_inlined
!  -> EXTERN: (638,44) __resetsp_inlined
!  -> EXTERN: (639,19) for_concat
!  -> EXTERN: (639,19) _alloca
!  -> EXTERN: (640,20) ga_destroy_
!  -> EXTERN: (640,43) errquit_
!  -> EXTERN: (640,43) __getsp_inlined
!  -> EXTERN: (640,43) __resetsp_inlined
!  -> EXTERN: (641,19) for_concat
!  -> EXTERN: (641,19) _alloca
!  -> EXTERN: (642,20) ga_destroy_
!  -> EXTERN: (642,46) errquit_
!  -> EXTERN: (642,46) __getsp_inlined
!  -> EXTERN: (642,46) __resetsp_inlined
!  -> EXTERN: (643,19) for_concat
!  -> EXTERN: (643,19) _alloca
!  -> EXTERN: (646,17) ga_destroy_
!  -> EXTERN: (646,41) errquit_
!  -> EXTERN: (646,41) __resetsp_inlined
!  -> EXTERN: (646,41) __getsp_inlined
!  -> EXTERN: (647,16) _alloca
!  -> EXTERN: (647,16) for_concat
!  -> EXTERN: (648,17) ga_destroy_
!  -> EXTERN: (648,40) errquit_
!  -> EXTERN: (648,40) __resetsp_inlined
!  -> EXTERN: (648,40) __getsp_inlined
!  -> EXTERN: (649,16) _alloca
!  -> EXTERN: (649,16) for_concat
!  -> EXTERN: (650,17) ga_destroy_
!  -> EXTERN: (650,43) errquit_
!  -> EXTERN: (650,43) __resetsp_inlined
!  -> EXTERN: (650,43) __getsp_inlined
!  -> EXTERN: (651,16) _alloca
!  -> EXTERN: (651,16) for_concat
!  -> EXTERN: (652,17) ga_destroy_
!  -> EXTERN: (652,38) errquit_
!  -> EXTERN: (652,38) __resetsp_inlined
!  -> EXTERN: (652,38) __getsp_inlined
!  -> EXTERN: (653,16) _alloca
!  -> EXTERN: (653,16) for_concat
!  -> EXTERN: (657,18) ga_destroy_
!  -> EXTERN: (657,38) errquit_
!  -> EXTERN: (657,38) __getsp_inlined
!  -> EXTERN: (657,38) __resetsp_inlined
!  -> EXTERN: (658,16) for_concat
!  -> EXTERN: (658,16) _alloca
!  -> EXTERN: (659,18) ga_destroy_
!  -> EXTERN: (659,38) errquit_
!  -> EXTERN: (659,38) __getsp_inlined
!  -> EXTERN: (659,38) __resetsp_inlined
!  -> EXTERN: (660,16) for_concat
!  -> EXTERN: (660,16) _alloca
!  -> EXTERN: (661,18) ga_destroy_
!  -> EXTERN: (661,38) errquit_
!  -> EXTERN: (661,38) __getsp_inlined
!  -> EXTERN: (661,38) __resetsp_inlined
!  -> EXTERN: (662,16) for_concat
!  -> EXTERN: (662,16) _alloca
!  -> EXTERN: (663,18) ga_destroy_
!  -> EXTERN: (663,37) errquit_
!  -> EXTERN: (663,37) __getsp_inlined
!  -> EXTERN: (663,37) __resetsp_inlined
!  -> EXTERN: (664,16) for_concat
!  -> EXTERN: (664,16) _alloca
!  -> EXTERN: (665,18) ga_destroy_
!  -> EXTERN: (665,39) errquit_
!  -> EXTERN: (665,39) __getsp_inlined
!  -> EXTERN: (665,39) __resetsp_inlined
!  -> EXTERN: (666,16) for_concat
!  -> EXTERN: (666,16) _alloca
!  -> EXTERN: (669,16) ma_chop_stack_
!  -> EXTERN: (670,9) errquit_
!  -> EXTERN: (670,9) __resetsp_inlined
!  -> EXTERN: (670,9) __getsp_inlined
!  -> EXTERN: (670,27) _alloca
!  -> EXTERN: (670,27) for_concat
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_main0d.F(3,24):remark #34051: REGISTER ALLOCATION : [dft_main0d_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_main0d.F:3
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
!        
!    Routine temporaries
!        Total         :    2072
!            Global    :     419
!            Local     :    1653
!        Regenerable   :    1482
!        Spilled       :      75
!        
!    Routine stack
!        Variables     :    2120 bytes*
!            Reads     :      23 [1.42e+00 ~ 1.4%]
!            Writes    :     258 [2.61e+00 ~ 2.6%]
!        Spills        :     560 bytes*
!            Reads     :      71 [4.43e-01 ~ 0.4%]
!            Writes    :      70 [5.76e-01 ~ 0.6%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
4	c     
5	c     $Id$
6	c     
7	      implicit none
8	c
9	#include "errquit.fh"
10	c
11	      integer rtdb              ! rtdb handle [input]
12	      Logical LResult, IOLGC, oprint, oprint_time, oprint_ioinfo
13	c     
14	#include "bas.fh"
15	#include "geom.fh"
16	#include "rtdb.fh"
17	#include "mafdecls.fh"
18	#include "stdio.fh"
19	#include "cdft.fh"
20	#include "dft_conv.fh"
21	#include "global.fh"
22	#include "util.fh"
23	#include "tcgmsg.fh"
24	#include "schwarz.fh"
25	#include "msgids.fh"
26	#include "dftps.fh"
27	#include "bgj.fh"
28	c
29	#ifdef SCALAPACK
30	#include "dft_scaleig.fh"
31	      integer ga_cholesky,ga_llt_i
32	      external ga_cholesky,ga_llt_i
33	#endif
34	c     
35	#include "zora.fh"
36	#include "rel_consts.fh"
37	#include "x2c.fh"
38	#include "case.fh"
39	c
40	      integer  ga_create_atom_blocked
41	      external ga_create_atom_blocked
42	c
43	      integer g_dens(2), g_evecs(2), g_vxc(4)
44	c
45	      integer g_dens_at(2)
46	c
47	      integer g_svecs, g_xcinv, g_oi
48	      integer g_s, g_fock, g_tmpb, g_tmp
49	      integer nvxc
50	      integer me, nproc, info
51	      double precision Enuc, Etold
52	      integer iter, nconstr
53	      integer iVxc_opt, lmiss, ivcoul_opt
54	      integer isvals, lsvals,  idum,n_dep
55	      double precision toll_s
56	c
57	      logical lsuccess, ltried_scf, ltried_cgmin, lcgmin
58	      logical dft_scf,atmblk, lcdft, dft_cscf_equals_scftype
59	      external dft_scf, dft_cscf_equals_scftype
60	      logical dft_scf_so
61	      external dft_scf_so
62	      logical  dft_uks_nr_solve, dft_roks_nr_solve
63	      external dft_uks_nr_solve, dft_roks_nr_solve
64	      logical  dft_cg_solve
65	      external dft_cg_solve
66	c
67	c     == RT_TDDFT ==
68	      logical lrt_tddft       ! real-time TDDFT dynamics flag
69	      integer g_dipx  ! ga for dipole x
70	      integer g_dipy  ! ga for dipole y
71	      integer g_dipz  ! ga for dipole z
72	      integer g_vel   ! velocity ga's
73	      integer g_ddotE ! ga for D.E
74	      integer alo(3),ahi(3)
75	      double precision origin(3)
76	      data origin/0d0,0d0,0d0/
77	c
78	      character*80 theory
79	      logical status
80	      logical ldirect, xc_active
81	      character*32 pname
82	      character*1 yev0
83	c 
84	      double precision eone, etwo, enrep, energy
85	      double precision dft_time
86	c
87	      logical largenode
88	c
89	      logical lxps
90	c
91	      nexc = 1
92	c
93	c     == Preliminaries ==
94	      dft_main0d = .false.
95	      pname = "dft_main0d:"
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_main0d.F(95,7)
!   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 4 
!   remark #15477: vector cost: 4.000 
!   remark #15478: estimated potential speedup: 0.860 
!   remark #15488: --- end vector cost summary ---
!   remark #25436: completely unrolled by 10  
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_main0d.F(95,7)
!<Peeled loop for vectorization>
!   remark #25436: completely unrolled by 5  
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_main0d.F(95,7)
!   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
!   remark #15449: unmasked aligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 2 
!   remark #15477: vector cost: 0.370 
!   remark #15478: estimated potential speedup: 2.620 
!   remark #15488: --- end vector cost summary ---
!   remark #25015: Estimate of max trip count of loop=1
!LOOP END
96	      me = ga_nodeid()
97	      nproc = ga_nnodes()
98	      oprint = util_print('dft info', print_default)
99	      oprint_time = util_print('dft timings', print_high)
100	      oprint_ioinfo = util_print('io info', print_debug)
101	      if(ga_nodeid().eq.0.and.
102	     .     util_print('geometry', print_high)) then
103	        if(.not.geom_print(geom)) call errquit(
104	     .       pname//'geom print failed',0, GEOM_ERR)
105	      endif
106	      IOLGC = .TRUE.
107	      if (noio.eq.1) IOLGC = .FALSE.
108	c
109	      lcgmin = .false.
110	      lsuccess = .false.
111	      ltried_scf = .false.
112	      ltried_cgmin = .false.
113	c
114	c     initialize
115	      if (.not. rtdb_put(rtdb, 'dft:energy', MT_DBL, 1, 0.d0))
116	     &   call errquit('dft_scf: failed to store energy in rtdb', 0,
117	     &       RTDB_ERR)
118	      if (.not. rtdb_put(rtdb, 'dft:converged', MT_LOG, 1, .false.))
119	     &   call errquit('dft_scf: failed to store converged in rtdb', 0,
120	     &       RTDB_ERR)
121	c
122	c     == SCALAPACK related ==
123	c
124	#ifdef SCALAPACK
125	#if defined(PARALLEL_DIAG)
126	      call slexit
127	      call slexit2
128	      if (.not. rtdb_cget(rtdb, 'dft:scaladiag',1,yev))
129	#ifdef USE_PDSYEVR__
130	     &     yev='r'
131	#else
132	     &     yev='d'
133	#endif
134	      if (.not. rtdb_get(rtdb, 'dft:scalanb',mt_int,1,nb))
135	     &     nb=0
136	#endif
137	#endif
138	c
139	c     == Trash junk that may have remained in restart calcs ==
140	      if(rtdb_get(rtdb,'bgj:xc_active', MT_LOG, 1,xc_active)) then
141	        if (xc_active) then
142	c         Junk left from previous run, clobber it!!!
143	c         Leaving it causes trouble in fock_2e because it then also
144	c         calls fock_xc. The routine dft_fockbld does not expect to be
145	c         using fock_xc anywhere but computes the XC-contributions by
146	c         a different route. This conflict will cause the calculation
147	c         to fail.
148	          if(.not. rtdb_put(rtdb,'bgj:xc_active', MT_LOG, 1, .false.))
149	     &      call errquit(pname//"could not store xc_active",
150	     &                   0,RTDB_ERR)
151	        endif
152	      endif
153	c
154	c     == Check which solver to use ==
155	      if (.not.rtdb_get(rtdb, 'dft:cgmin', mt_log, 1, lcgmin))
156	     &   lcgmin=.false.
157	c
158	c     == Check real-time TDDFT flag ==
159	      lrt_tddft = .false.
160	      if (.not. rtdb_get(rtdb, 'dft:lrt_tddft', mt_log, 1, lrt_tddft))
161	     &   lrt_tddft = .false.
162	c
163	c     == Evaluate the nuclear repulsion energy ==
164	      LResult = geom_nuc_rep_energy(geom, Enuc)
165	      if (.not.LResult) 
166	     & call errquit(pname//'Error in nuclear repulsion',1, BASIS_ERR)
167	c     
168	c     == Determine the characteristics of the AO Gaussian basis set ==
169	c     == This uses the old NWdft data structures, rather than tthe rtdb ==
170	      if (.not. bas_numbf(AO_bas_han, nbf_ao)) then
171	         call errquit(pname//'Exiting',1, BASIS_ERR)
172	      endif 
173	c
174	c     Do XPS calculation
175	      if (.not. rtdb_get(rtdb, 'dft:lxps',mt_log,1,lxps))
176	     &   lxps = .false.
177	      if (lxps) then
178	        call dft_xps(rtdb,ao_bas_han,geom)
179	        dft_main0d = .true.
180	        return
181	      endif ! lxps
182	c
183	      iter = 0
184	      Etold = 0.D0
185	c
186	c     == ZORA options ==
187	      do_zora_get_correction=.false.
188	      if (rtdb_get(rtdb,'zora:calc',mt_log,1,
189	     &    do_zora_get_correction)) 
190	     &    do_zora_get_correction=.true.
191	      if (.not.rtdb_get(rtdb,'zora',mt_log,1,do_zora)) do_zora = .false.
192	c
193	c     turn off grid nodisk with zora
194	      if (.not.rtdb_get(rtdb,'dft:largenode', mt_log, 1, largenode))
195	     &     largenode=.false.
196	      if (do_zora.and.largenode) then
197	        if(.not.rtdb_put(rtdb,'dft:largenode',mt_log,1,.false.))
198	     &    call errquit('grid_inp: rtdb_put failed', 1660, RTDB_ERR)
199	      end if ! do_zora and largenode
200	c
201	c     == Get the grid cutoff or set default ==
202	      if(.not.rtdb_get(rtdb,'zora:cutoff',mt_dbl,1,zoracutoff))
203	     &  zoracutoff = 1.0d-08
204	      if(.not.rtdb_get(rtdb,'zora:cutoff_EFG',          ! FA
205	     &                 mt_dbl,1,zoracutoff_EFG))        ! FA
206	     &  zoracutoff_EFG = 1.0d-08                        ! FA
207	      if(.not.rtdb_get(rtdb,'zora:cutoff_NMR',          ! FA
208	     &                 mt_dbl,1,zoracutoff_NMR))        ! FA
209	     &  zoracutoff_NMR = 1.0d-08                        ! FA
210	      if(.not.rtdb_get(rtdb,'zora:do_NonRel',           ! FA
211	     &                 mt_log,1,do_NonRel))             ! FA
212	     &  do_NonRel = .false.                             ! FA
213	      if(.not.rtdb_get(rtdb,'zora:not_zora_scale',      ! FA
214	     &                 mt_log,1,not_zora_scale))        ! FA
215	     &  not_zora_scale = .false.                        ! FA
216	
217	c ... jochen:
218	c     == X2C options ==
219	      do_x2c = .false.
220	      if (rtdb_get(rtdb,'x2c:on',mt_log,1,do_x2c))
221	     &     do_x2c = .true.
222	c     we use the variable zoracutoff also for the x2c option
223	      if(.not.rtdb_get(rtdb,'x2c:cutoff',mt_dbl,1,zoracutoff))
224	     &  zoracutoff = 1.0d-08
225	c
226	
227	c
228	c     == Get the light speed and other constants, if specified ==
229	      call rel_init_con(rtdb)
230	      clight_au = cau
231	c
232	c     == Coulomb Attenuation Method (CAM/LC) parameters ==
233	      if (.not.rtdb_get(rtdb, 'dft:cam_exch', mt_log, 1,
234	     &   cam_exch)) cam_exch=.false.
235	      if (.not.rtdb_get(rtdb, 'dft:cam_srhf', mt_log, 1,
236	     &   cam_srhf)) cam_srhf=.false.
237	      if (.not.rtdb_get(rtdb, 'dft:cam_omega', mt_dbl, 1,
238	     &   cam_omega)) cam_omega=0.d0
239	      if (.not.rtdb_get(rtdb, 'dft:cam_alpha', mt_dbl, 1,
240	     &   cam_alpha)) cam_alpha=0.d0
241	      if (.not.rtdb_get(rtdb, 'dft:cam_beta', mt_dbl, 1,
242	     &   cam_beta)) cam_beta=0.d0
243	c
244	      ldirect = .false.
245	      if (cam_exch .and. (.not.CDFIT) ) then
246	       if (rtdb_get(rtdb, 'dft:direct', mt_log, 1, ldirect)) then
247	        if (.not.ldirect) then
248	#if 1
249	c     force direct
250	           ldirect=.true.
251	           if (.not. rtdb_put(rtdb, 'dft:direct',mt_log,1,ldirect))
252	     &          call errquit('dftmain0d: rtdb_put failed',400,RTDB_ERR)
253	           if (.not. rtdb_put(rtdb,'int2e:filesize',mt_int,1,-1))
254	     $          call errquit('dftmain0d: failed to store filesize',401,
255	     &          RTDB_ERR)
256	           if (.not. rtdb_put(rtdb,'int2e:memsize',mt_int,1,-1))
257	     $          call errquit('dftmain0d: failed to store filesize',402,
258	     &          RTDB_ERR)
259	           if (ga_nodeid().eq.0) then
260	              write(luout,*) " "
261	              write(luout,*) " CAM type calculations without CDFIT are"
262	              write(luout,*) " only available with the direct option."
263	              write(luout,*) " Forcing Direct SCF"
264	              write(luout,*) " "
265	          end if
266	#else
267	          if (ga_nodeid().eq.0) then
268	           write(luout,*) "CAM type calculations without CDFIT are only"
269	           write(luout,*) "available with the direct option"
270	          end if
271	          call errquit('Please use the direct option',4, INPUT_ERR)
272	#endif
273	        end if
274	       end if
275	      end if
276	c     
277	c     == Select method to compute the XC potential ==
278	      if (XC_bas_han.eq.-99999)then
279	         iVxc_opt = 0
280	         XCFIT    = .FALSE.
281	      else
282	         iVxc_opt = 1
283	         XCFIT    = .TRUE.
284	      endif
285	
286	      if (XCFIT)then
287	c     
288	c        Determine the characteristics of the XC Gaussian basis set.
289	c     
290	         if (.not. bas_numbf(XC_bas_han, nbf_xc)) then
291	            call errquit('Exiting from scfdriver',4, BASIS_ERR)
292	         endif 
293	
294	         if (.not.ADFT) then
295	c     
296	c           Compute the matrix inverse of the 2-ctr OIs.
297	c     
298	*ga:1:0
299	               if (.not. ga_create(mt_dbl, nbf_xc, nbf_xc, 'XCinv', 
300	     &                             nbf_xc, 0, g_xcinv)) 
301	     &           call errquit(pname//'Error creating g_xcinv',0,GA_ERR)
302	               call ga_zero(g_xcinv)
303	*ga:1:0
304	            if (.not. ga_create(mt_dbl, nbf_xc, nbf_xc, 'g_oi', 
305	     &                          nbf_xc, 0, g_oi)) 
306	     &         call errquit(pname//'Error creating g_oi',0,GA_ERR)
307	            call ga_zero(g_oi)
308	            call int_1e_ga(xc_bas_han, xc_bas_han,
309	     .           g_oi, 'overlap', oskel)
310	            if (oskel)call sym_symmetrize(
311	     (           geom, xc_bas_han, .false., g_oi)
312	
313	            call dft_cholinv(g_oi, g_xcinv)
314	
315	            if (.not. ga_destroy(g_oi)) call errquit
316	     &         (pname//'Could not destroy g_oi', 0, GA_ERR)
317	            if (me.eq.0.and.IOLGC) then
318	             lmiss = 0
319	             call dft_invio('XC', g_xcinv, nbf_xc, 'WRITE', lmiss)
320	             if (lmiss.ne.0)
321	     &       call errquit(pname//'dft_invio - abnormal write of XC ', 0,
322	     &       DISK_ERR)
323	            endif
324	         if (IOLGC)then
325	            if (.not. ga_destroy(g_xcinv)) call errquit
326	     &         (pname//'Could not destroy g_xcinv', 0, GA_ERR)
327	         endif
328	         endif
329	      endif
330	c
331	c     == Done with XC setup stuff ==
332	c     
333	c     == Select method to compute Coulomb potential ==
334	c     
335	      if (CD_bas_han.eq.-99999)then
336	         iVcoul_opt = 0
337	         CDFIT      = .FALSE.
338	      else
339	         iVcoul_opt = 1
340	         CDFIT      = .TRUE.
341	      endif
342	c
343	c
344	      if (CDFIT)then
345	c     
346	c        Determine the characteristics of the CD Gaussian basis set.
347	c     
348	         if (odftps) call pstat_on(ps_2cer)
349	         if (.not. bas_numbf(CD_bas_han, nbf_cd)) then
350	            call errquit('Exiting from scfdriver',5, BASIS_ERR)
351	         endif 
352	c     
353	c        Compute the matrix inverse of the CD 2-ctr ERIs.
354	c     
355	         if (.not. ga_create(mt_dbl, nbf_cd, nbf_cd, 'CD 2cERI', 
356	     &                       0, nbf_cd, g_2ceri)) 
357	     &      call errquit(pname//'Error creating g_2ceri',0,
358	     &       GA_ERR)
359	         call ga_zero(g_2ceri)
360	         call dft_get2eri(CD_bas_han, g_2ceri,oskel)
361	         if (odftps) call pstat_off(ps_2cer)
362	         if (oskel)call 
363	     .        sym_symmetrize(geom,cd_bas_han,.false.,g_2ceri)
364	         call ga_sync()
365	         if (.not. ga_duplicate(g_2ceri, g_cdinv, 'CD 2cERInv'))
366	     &        call errquit(pname//'Error creating g_cdinv',0, GA_ERR)
367	
368	         call dft_cholinv(g_2ceri, g_cdinv)
369	#ifndef SCALAPACK            
370	c
371	c     second build of g_2ceri needed becuase previous calls destroyed it
372	c     
373	            if (odftps) call pstat_on(ps_2cer)
374	            call ga_zero(g_2ceri)
375	            call dft_get2eri(CD_bas_han, g_2ceri,oskel)
376	            if (oskel)call 
377	     .           sym_symmetrize(geom,cd_bas_han,.false.,g_2ceri)
378	            if (odftps) call pstat_off(ps_2cer)
379	#endif
380	            if (IOLGC.and.(me.eq.0)) then
381	               lmiss = 0
382	               call dft_invio('CDI', g_cdinv, nbf_cd, 'WRITE', lmiss)
383	               if (lmiss.ne.0)call errquit
384	     &         (pname//'dft_invio - abnormal write of CDI ', 0,
385	     &       DISK_ERR)
386	               lmiss = 0
387	               call dft_invio('CD', g_2ceri, nbf_cd, 'WRITE', lmiss)
388	               if (lmiss.ne.0)call errquit
389	     &         (pname//'dft_invio - abnormal write of CD ', 0,
390	     &       DISK_ERR)
391	            endif
392	            if (oprint_ioinfo)then
393	               call ga_print(g_cdinv)
394	               call ga_print(g_2ceri)
395	            endif
396	c         endif
397	         if (IOLGC) then
398	            if (.not. ga_destroy(g_cdinv)) call errquit
399	     &         (pname//'Could not destroy g_xcinv', 0, GA_ERR)
400	            if (.not. ga_destroy(g_2ceri)) call errquit
401	     &         (pname//'Could not destroy g_xcinv', 0, GA_ERR)
402	         elseif(ADFT) then
403	            g_xcinv = g_cdinv
404	            g_oi = g_2ceri
405	         endif
406	      endif
407	c
408	c     Done with CD setup stuff
409	c     
410	c     Compute the AO overlap matrix.
411	c     
412	      if (.not. rtdb_get(rtdb, 'dft:atomblock',mt_log,1,atmblk))
413	     &     atmblk=.true.
414	
415	      if(atmblk) then
416	         g_s = ga_create_atom_blocked(geom, AO_bas_han, 'AO ovl')
417	      else
418	         if (.not. ga_create(mt_dbl, nbf_ao, nbf_ao, 'AO ovl',
419	     &        0, 0, g_s))
420	     &        call errquit(pname//'Error creating ga',0,GA_ERR)
421	      endif
422	      call ga_zero(g_s)
423	      if (.not.MA_Push_Get(MT_Dbl, nbf_ao, 'ovl eig vals', lsvals, 
424	     &   isvals))
425	     &   call errquit(pname//'Cannot allocate ovl eig vals', 0,
426	     &       MA_ERR)
427	      call dfill(nbf_ao, 0.0d0, dbl_mb(isvals), 1)
428	      call int_1e_ga(AO_bas_han, AO_bas_han, g_s, 'overlap', oskel)
429	      if (oskel)call sym_symmetrize(geom, AO_bas_han, .false., g_s)
430	c     
431	c     
432	c     orthog BS
433	c     
434	c     Diag Overlap Matrix
435	c     
436	      if (.not. ga_duplicate(g_s, g_svecs, 'AO ovl eig vecs'))
437	     &     call errquit(pname//'Error creating ga',0,GA_ERR)
438	      call ga_zero(g_svecs)
439	      if (odftps) call pstat_on(ps_diag)
440	#if defined(PARALLEL_DIAG)
441	#ifdef SCALAPACK
442	c     we need all eigenvectors for the overlap matrix,
443	         yev0=yev
444	         if(yev.eq.'m')  yev='r'
445	         idum=0
446	         call dft_scaleig(g_s, g_svecs, Dbl_MB(isvals), idum)
447	         yev=yev0
448	#else
449	      call ga_diag_std(g_s, g_svecs, Dbl_MB(isvals))
450	#endif
451	#else 
452	      call ga_diag_std_seq(g_s, g_svecs, Dbl_MB(isvals))
453	#endif
454	      if (odftps) call pstat_off(ps_diag)
455	c     
456	      if (.not. ga_duplicate(g_s, g_evecs(1), 'alpha evecs'))
457	     &     call errquit(pname//'Error creating ga',0,GA_ERR)
458	      call ga_zero(g_evecs(1))
459	c
460	      if (.not. ga_duplicate(g_s, g_dens(1), 'alpha density'))
461	     & call errquit(pname//'Error creating ga',0,GA_ERR)
462	      call ga_zero(g_dens(1))
463	c
464	      if (.not. ga_duplicate(g_s, g_dens_at(1), 'alpha atomic density'))
465	     & call errquit(pname//'Error creating ga',0,GA_ERR)
466	      call ga_zero(g_dens_at(1))
467	c
468	      if (ipol.ne.1) then
469	       if (.not. ga_duplicate(g_s, g_dens(2), 'beta density'))
470	     &  call errquit(pname//'Error creating ga',0,GA_ERR)
471	       call ga_zero(g_dens(2))
472	c
473	       if (.not. ga_duplicate(g_s, g_dens_at(2), 'beta atomic density'))
474	     &  call errquit(pname//'Error creating ga',0,GA_ERR)
475	       call ga_zero(g_dens_at(2))
476	c
477	       if (.not. ga_duplicate(g_s, g_evecs(2), 'beta evecs'))
478	     &  call errquit(pname//'Error creating ga',0,GA_ERR)
479	       call ga_zero(g_evecs(2))
480	c
481	       if (.not. ga_duplicate(g_s, g_vxc(2), 'Vxcs'))
482	     &  call errquit(pname//'Error creating ga',0,GA_ERR)
483	       call ga_zero(g_Vxc(2))
484	c
485	      endif 
486	c
487	      call dft_cscf_movecs(g_evecs)
488	c
489	      nVxc = ipol
490	      if (.not. ga_duplicate(g_s, g_fock, 'fock matrix'))
491	     &     call errquit(pname//'Error creating ga',0,GA_ERR)
492	      call ga_zero(g_fock)
493	      g_vxc(1) = g_fock
494	c
495	c     == Create the following GA's for RT_TDDFT
496	      if (lrt_tddft) then
497	c
498	c     == Create and get the dipole matrix element ga: g_dipx,g_dipy,g_dipz ==
499	      ! x
500	      if (.not. ga_create(MT_DBL, nbf, nbf, 'g_dipx',
501	     $   nbf, 0, g_dipx)) call errquit(pname//'g_dipx',0, GA_ERR)
502	      call ga_zero(g_dipx)
503	      ! y
504	      if (.not. ga_create(MT_DBL, nbf, nbf, 'g_dipy',
505	     $   nbf, 0, g_dipy)) call errquit(pname//'g_dipy',0, GA_ERR)
506	      call ga_zero(g_dipy)
507	      ! z
508	      if (.not. ga_create(MT_DBL, nbf, nbf, 'g_dipz',
509	     $   nbf, 0, g_dipz)) call errquit(pname//'g_dipz',0, GA_ERR)
510	      call ga_zero(g_dipz)
511	c
512	c     == Get the dipole integrals for the 3 components ==
513	      call int_dip_ga(ao_bas_han, ao_bas_han, g_dipx, g_dipy, g_dipz)
514	c
515	c     == Velocity integral element ga's ==
516	      alo(1) = nbf
517	      alo(2) = -1
518	      alo(3) = -1
519	      ahi(1) = nbf
520	      ahi(2) = nbf
521	      ahi(3) = 3
522	c
523	c     == Velocity integrals ==
524	      if (.not.nga_create(MT_DBL,3,ahi,'e-dipole',alo,g_vel)) call
525	     &  errquit(pname//'nga_create failed g_vel',0,GA_ERR)
526	      call ga_zero(g_vel)
527	      call int_giao_1ega(ao_bas_han,ao_bas_han,g_vel,'velocity',
528	     &  origin,1,.false.)
529	      !call ga_print(g_vel)
530	c
531	c     == D.E ==
532	      if (.not. ga_create(MT_DBL, nbf, nbf, 'g_ddotE',
533	     $   nbf, 0, g_ddotE)) call errquit(pname//'g_ddotE',0, GA_ERR)
534	      call ga_zero(g_ddotE)
535	      end if  ! lrt_tddft   ! for real-time TDDFT dynamics
536	c
537	c     == Keeps hardwired right now ... better something smarter ==
538	      lkeeps=.false.
539	c
540	c     == Set orbital overlap tolerance ==
541	      call util_tolls(rtdb,.false.,toll_s,n_dep,dbl_mb(isvals),nbf_ao)
542	cc     
543	c     == Begin iteration sequence with S**(-1/2) in g_evecs arrays ==
544	      if (.not. ga_duplicate(g_s, g_tmp, 'temp'))
545	     &     call errquit(pname//'Error creating ga',0,GA_ERR)
546	      call diis_bld12(toll_s, dbl_mb(isvals), g_svecs, g_evecs(1), 
547	     &     g_tmp,  2)
548	      if (.not. ga_destroy(g_tmp)) call errquit
549	     &   (pname//'Could not destroy g_tmp', 0, GA_ERR)
550	      if (ipol.gt.1) call ga_copy(g_evecs(1), g_evecs(2))
551	c     
552	      if (.not. rtdb_get(rtdb, 'dft:lcdft', mt_log, 1, lcdft))
553	     &     lcdft = .false.
554	      nconstr = 0
555	      if(lcdft) then
556	         if (.not. rtdb_get(rtdb, 'dft:nconstr', mt_int, 1, nconstr))
557	     &     call errquit(pname//'nconstr not found', 0, RTDB_ERR)
558	      endif
559	c
560	      if (oprint_time) call dft_tstamp(' Before call to DFT_SCF. ')
561	c 
562	      if (.not. rtdb_cget(rtdb, 'dft:theory', 1, theory))
563	     $     call errquit('task:energy: theory not specified',0, RTDB_ERR)
564	      if (odftps) call pstat_on(ps_scfdft)
565	c
566	c     == Block CDFT calculations with RT_TDDFT ==
567	      if (lcdft .and. lrt_tddft) then
568	       write(luout,*) "Real-time TDDFT is not available with"
569	       write(luout,*) "constrained DFT"
570	       call errquit('Please comment/remove these keywords',4, INPUT_ERR)
571	      end if
572	c
573	c     == Call the main drivers ==
574	      if (theory .eq. 'dft') then
575	       if (.not.lrt_tddft) then
576	          if ((.not.lcgmin)) then
577	            dft_main0d = dft_scf(rtdb, Etold, Enuc, iVcoul_opt,
578	     &                         iVxc_opt, iter, g_dens, g_dens_at,
579	     &                         g_evecs, g_vxc, g_fock, g_svecs,
580	     &                         dbl_mb(isvals), g_xcinv, g_s, lcdft,
581	     &                         nconstr)
582	          else if (lcgmin) then
583	            dft_main0d = dft_cg_solve(rtdb)
584	          endif
585	       else
586	          dft_main0d = .false.
587	       end if   ! lrt_tddft
588	      else if (theory .eq. 'sodft') then
589	c
590	c      announce that spin-orbit calculations are being performed
591	       if (me.eq.0) then
592	         call util_print_centered(LuOut,
593	     $    'Performing spin-orbit DFT (SO-DFT) calculations', 23, .true.)
594	         write(LuOut,*)
595	       endif
596	c
597	       if (.not.lrt_tddft) then
598	        ! Spin-Orbit DFT
599	        dft_main0d = dft_scf_so(rtdb, Etold, Enuc, iVcoul_opt,
600	     &       iVxc_opt, iter, g_dens, g_dens_at, g_evecs, g_vxc, g_fock,
601	     &       g_svecs, dbl_mb(isvals), g_xcinv, g_s)
602	       else
603	        dft_main0d = .false.
604	       end if  ! lrt_tddft
605	      endif ! theory
606	c
607	      if (odftps) call pstat_off(ps_scfdft)
608	c     
609	c     == Clean up memory usage ==
610	      if (.not. ga_destroy(g_s)) call errquit
611	     &      (pname//'Could not destroy g_s', 0, GA_ERR)
612	      if (me.eq.0) then
613	         if (CDFIT.and.IOLGC) then
614	            call dft_invio('CD', idum, 1, 'KILL', lmiss)
615	            call dft_invio('CDI', idum, 1, 'KILL', lmiss)
616	         endif
617	         if ((.not.ADFT).and.XCFIT.and.IOLGC) then
618	            call dft_invio('XC', idum, 1, 'KILL', lmiss)
619	         endif
620	      endif
621	      if (CDFIT.and.(.not.IOLGC)) then
622	         if (.not. ga_destroy(g_cdinv)) call errquit
623	     &      (pname//'Could not destroy g_cdinv', 0, GA_ERR)
624	         if (.not. ga_destroy(g_2ceri)) call errquit
625	     &      (pname//'Could not destroy g_2ceri', 0, GA_ERR)
626	      endif
627	      if (XCFIT.and.(.not.IOLGC).and.(.not.ADFT))then
628	         if (.not. ga_destroy(g_xcinv)) call errquit
629	     &      (pname//'Could not destroy g_xcinv', 0, GA_ERR)
630	      endif
631	      if (.not. ga_destroy(g_fock)) call errquit
632	     &   (pname//'Could not destroy g_fock', 0, GA_ERR)
633	      if (ipol.eq.2)then
634	         if (.not. ga_destroy(g_vxc(2))) call errquit
635	     &      (pname//'Could not destroy g_vxc(2)', 0, GA_ERR)
636	      endif
637	      if (ipol.ne.1) then
638	         if (.not. ga_destroy(g_evecs(2))) call errquit
639	     &      (pname//'Could not destroy g_evecs(2)', 0, GA_ERR)
640	         if (.not. ga_destroy(g_dens(2))) call errquit
641	     &      (pname//'Could not destroy g_dens(2)', 0, GA_ERR)
642	         if (.not. ga_destroy(g_dens_at(2))) call errquit
643	     &      (pname//'Could not destroy g_dens_at(2)', 0, GA_ERR)
644	      endif   ! ipol
645	c
646	      if (.not. ga_destroy(g_evecs(1))) call errquit
647	     &   (pname//'Could not destroy g_evecs(1)', 0, GA_ERR)
648	      if (.not. ga_destroy(g_dens(1))) call errquit
649	     &   (pname//'Could not destroy g_dens(1)', 0, GA_ERR)
650	      if (.not. ga_destroy(g_dens_at(1))) call errquit
651	     &   (pname//'Could not destroy g_dens_at(1)', 0, GA_ERR)
652	      if (.not. ga_destroy(g_svecs)) call errquit
653	     &   (pname//'Could not destroy g_svecs', 0, GA_ERR)
654	
655	c     Clean up time propagation arrays
656	      if (lrt_tddft) then
657	       if (.not. ga_destroy(g_dipx)) call errquit
658	     &   (pname//'Could not destroy g_dipx', 0, GA_ERR)
659	       if (.not. ga_destroy(g_dipy)) call errquit
660	     &   (pname//'Could not destroy g_dipy', 0, GA_ERR)
661	       if (.not. ga_destroy(g_dipz)) call errquit
662	     &   (pname//'Could not destroy g_dipz', 0, GA_ERR)
663	       if (.not. ga_destroy(g_vel)) call errquit
664	     &   (pname//'Could not destroy g_vel', 0, GA_ERR)
665	       if (.not. ga_destroy(g_ddotE)) call errquit
666	     &   (pname//'Could not destroy g_ddotE', 0, GA_ERR)
667	      end if
668	c
669	      if (.not.ma_chop_stack(lsvals))
670	     &  call errquit(pname//'Cannot chop stack lsvals', 12, MA_ERR)
671	c
672	      return
673	      end
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_SCF

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_SCF) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(4,24)
  -> EXTERN: (264,18) rtdb_get_
  -> EXTERN: (266,9) errquit_
  -> EXTERN: (269,18) rtdb_get_
  -> EXTERN: (271,9) errquit_
  -> EXTERN: (274,18) rtdb_get_
  -> EXTERN: (276,8) errquit_
  -> EXTERN: (280,20) rtdb_get_
  -> EXTERN: (282,11) errquit_
  -> EXTERN: (296,12) ecce_print_module_entry_
  -> EXTERN: (300,16) util_print_
  -> EXTERN: (301,21) util_print_
  -> EXTERN: (302,21) util_print_
  -> EXTERN: (303,21) util_print_
  -> EXTERN: (304,21) util_print_
  -> EXTERN: (305,29) util_print_
  -> EXTERN: (307,21) util_print_
  -> EXTERN: (308,21) util_print_
  -> EXTERN: (309,21) util_print_
  -> EXTERN: (310,21) util_print_
  -> EXTERN: (311,20) util_print_
  -> EXTERN: (312,28) util_print_
  -> EXTERN: (314,34) util_print_
  -> EXTERN: (316,26) util_print_
  -> EXTERN: (317,31) util_print_
  -> EXTERN: (319,27) util_print_
  -> EXTERN: (320,20) util_print_
  -> EXTERN: (321,23) util_print_
  -> EXTERN: (322,8) ga_nodeid_
  -> EXTERN: (323,15) util_print_
  -> EXTERN: (325,12) ga_nodeid_
  -> EXTERN: (326,15) ga_nnodes_
  -> EXTERN: (344,14) errquit_
  -> EXTERN: (351,22) for_write_seq_lis
  -> EXTERN: (354,22) for_write_seq_lis
  -> EXTERN: (357,12) x2c_scf_init_
  -> EXTERN: (362,17) rtdb_put_
  -> EXTERN: (363,12) errquit_
  -> EXTERN: (375,16) rtdb_get_
  -> EXTERN: (379,16) rtdb_get_
  -> EXTERN: (381,11) rtdb_get_
  -> EXTERN: (383,14) rtdb_get_
  -> EXTERN: (397,11) rtdb_get_
  -> EXTERN: (399,23) errquit_
  -> EXTERN: (403,16) rtdb_get_
  -> EXTERN: (404,18) errquit_
  -> EXTERN: (406,16) rtdb_get_
  -> EXTERN: (407,20) errquit_
  -> EXTERN: (409,16) rtdb_get_
  -> EXTERN: (410,18) errquit_
  -> EXTERN: (412,11) rtdb_get_
  -> EXTERN: (421,16) rtdb_get_
  -> EXTERN: (426,16) rtdb_get_
  -> EXTERN: (431,17) rtdb_get_
  -> EXTERN: (436,17) geom_ncent_
  -> EXTERN: (437,10) errquit_
  -> EXTERN: (438,17) geom_nuc_charge_
  -> EXTERN: (439,10) errquit_
  -> EXTERN: (445,16) ma_push_get_
  -> EXTERN: (447,10) errquit_
  -> EXTERN: (448,16) ma_push_get_
  -> EXTERN: (450,10) errquit_
  -> EXTERN: (451,16) ma_push_get_
  -> EXTERN: (453,10) errquit_
  -> EXTERN: (455,12) build_maps_
  -> EXTERN: (458,17) rtdb_get_
  -> EXTERN: (459,10) errquit_
  -> EXTERN: (460,17) ma_push_get_
  -> EXTERN: (461,10) errquit_
  -> EXTERN: (465,12) util_tolls_
  -> EXTERN: (486,12) xc_xdm_init_
  -> EXTERN: (489,12) xc_sicinit_
  -> EXTERN: (492,18) util_module_avail_
  -> EXTERN: (494,15) nwxc_getvals_
  -> EXTERN: (496,19) util_module_avail_
  -> EXTERN: (498,15) dimqm_init_
  -> EXTERN: (499,15) dimqm_used_
  -> EXTERN: (500,15) dimqm_getgo_
  -> EXTERN: (511,16) ma_push_get_
  -> EXTERN: (513,10) errquit_
  -> EXTERN: (521,15) dfill_
  -> EXTERN: (529,15) dfill_
  -> EXTERN: (555,12) dft_tstamp_
  -> EXTERN: (574,16) rtdb_get_
  -> EXTERN: (577,18) xc_chkdispauto_
  -> EXTERN: (578,13) xc_vdw_
  -> EXTERN: (581,17) ga_duplicate_
  -> EXTERN: (582,9) errquit_
  -> EXTERN: (583,17) ga_duplicate_
  -> EXTERN: (584,9) errquit_
  -> EXTERN: (623,19) ma_alloc_get_
  -> EXTERN: (625,15) errquit_
  -> EXTERN: (627,22) ma_alloc_get_
  -> EXTERN: (629,18) errquit_
  -> EXTERN: (630,22) ma_alloc_get_
  -> EXTERN: (632,18) errquit_
  -> EXTERN: (654,16) ma_push_get_
  -> EXTERN: (655,12) errquit_
  -> EXTERN: (661,35) dft_dump_info_
  -> EXTERN: (670,17) rtdb_cput_
  -> EXTERN: (671,10) errquit_
  -> EXTERN: (674,16) ma_push_get_
  -> EXTERN: (675,10) errquit_
  -> EXTERN: (676,12) ifill_
  -> EXTERN: (679,17) rtdb_put_
  -> EXTERN: (680,10) errquit_
  -> EXTERN: (682,17) bas_name_
  -> EXTERN: (683,12) errquit_
  -> EXTERN: (686,16) rtdb_get_
  -> EXTERN: (688,12) scf_get_fock_param_
  -> EXTERN: (691,12) fock_force_direct_
  -> EXTERN: (698,44) x2c_noatm_
  -> EXTERN: (699,14) ga_zero_
  -> EXTERN: (700,24) ga_zero_
  -> EXTERN: (701,14) guess_dens_
  -> EXTERN: (702,14) dft_quickguess_
  -> EXTERN: (705,29) x2c_noatm_
  -> EXTERN: (706,14) ga_zero_
  -> EXTERN: (707,24) ga_zero_
  -> EXTERN: (711,16) rtdb_get_
  -> EXTERN: (715,15) util_print_centered_
  -> EXTERN: (717,10) for_write_seq_lis
  -> EXTERN: (721,14) util_file_name_
  -> EXTERN: (724,17) ga_duplicate_
  -> EXTERN: (725,12) errquit_
  -> EXTERN: (726,14) ga_zero_
  -> EXTERN: (728,18) ga_duplicate_
  -> EXTERN: (729,12) errquit_
  -> EXTERN: (730,17) ga_zero_
  -> EXTERN: (734,17) ga_duplicate_
  -> EXTERN: (735,12) errquit_
  -> EXTERN: (736,14) ga_zero_
  -> EXTERN: (738,18) ga_duplicate_
  -> EXTERN: (739,12) errquit_
  -> EXTERN: (740,17) ga_zero_
  -> EXTERN: (745,17) ga_duplicate_
  -> EXTERN: (746,10) errquit_
  -> EXTERN: (747,15) ga_zero_
  -> EXTERN: (753,19) ga_ddot_
  -> EXTERN: (754,21) rtdb_put_
  -> EXTERN: (755,14) errquit_
  -> EXTERN: (761,18) dft_zora_read_
  -> EXTERN: (765,26) zora_recalc_
  -> EXTERN: (769,15) for_write_seq_lis
  -> EXTERN: (776,17) util_print_centered_
  -> EXTERN: (778,12) for_write_seq_lis
  -> EXTERN: (785,17) rtdb_get_
  -> EXTERN: (786,14) ga_nodeid_
  -> EXTERN: (787,12) for_write_seq_lis
  -> EXTERN: (787,12) for_write_seq_lis_xmit
  -> EXTERN: (791,20) rtdb_get_
  -> EXTERN: (798,17) rtdb_get_
  -> EXTERN: (800,19) ma_alloc_get_
  -> EXTERN: (802,10) errquit_
  -> EXTERN: (803,15) get_zetanuc_arr_
  -> EXTERN: (811,15) zora_getv_sf_
  -> EXTERN: (814,20) ma_free_heap_
  -> EXTERN: (814,46) errquit_
  -> EXTERN: (818,18) dft_zora_write_
  -> EXTERN: (820,10) errquit_
  -> EXTERN: (827,16) ga_copy_
  -> EXTERN: (836,22) for_write_seq_lis
  -> EXTERN: (836,22) for_write_seq_lis_xmit
  -> EXTERN: (838,17) ga_duplicate_
  -> EXTERN: (839,12) errquit_
  -> EXTERN: (840,14) ga_zero_
  -> EXTERN: (842,22) for_write_seq_lis
  -> EXTERN: (850,14) calc_x2c_1e_scalar_ga_
  -> EXTERN: (856,19) ga_duplicate_
  -> EXTERN: (857,12) errquit_
  -> EXTERN: (858,16) ga_copy_
  -> EXTERN: (865,15) rtdb_get_
  -> EXTERN: (867,24) for_cpystr
  -> EXTERN: (868,12) dft_guessin_
  -> EXTERN: (872,15) rtdb_get_
  -> EXTERN: (877,19) pstat_on_
  -> EXTERN: (878,16) rtdb_get_
  -> EXTERN: (880,29) util_statldb_
  -> EXTERN: (881,12) scf_vectors_guess_
  -> EXTERN: (888,33) util_statldb_
  -> EXTERN: (889,12) dft_guessout_
  -> EXTERN: (891,12) for_write_seq_fmt
  -> EXTERN: (892,12) util_wallsec_
  -> EXTERN: (893,19) pstat_off_
  -> EXTERN: (895,15) rtdb_get_
  -> EXTERN: (897,34) for_cpstr
  -> EXTERN: (898,17) rtdb_put_
  -> EXTERN: (899,14) errquit_
  -> EXTERN: (900,19) rtdb_cput_
  -> EXTERN: (901,14) errquit_
  -> EXTERN: (903,19) rtdb_cput_
  -> EXTERN: (904,14) errquit_
  -> EXTERN: (906,12) dft_quickguess_
  -> EXTERN: (912,14) ga_symmetrize_
  -> EXTERN: (913,23) ga_symmetrize_
  -> EXTERN: (918,14) dft_densm_
  -> EXTERN: (932,19) ga_ddot_
  -> EXTERN: (933,14) ga_nodeid_
  -> EXTERN: (934,13) for_write_seq_fmt
  -> EXTERN: (935,13) for_write_seq_fmt
  -> EXTERN: (935,13) for_write_seq_fmt_xmit
  -> EXTERN: (938,21) rtdb_put_
  -> EXTERN: (939,14) errquit_
  -> EXTERN: (946,16) open_xc_exact_pot_
  -> EXTERN: (954,14) dft_prevals_
  -> EXTERN: (962,12) fock_2e_tidy_
  -> EXTERN: (965,21) pstat_on_
  -> EXTERN: (966,12) dft_mem3c_
  -> EXTERN: (970,16) dft_3cincor_
  -> EXTERN: (974,41) for_write_seq_fmt
  -> EXTERN: (977,21) pstat_off_
  -> EXTERN: (985,23) for_cpstr
  -> EXTERN: (1002,23) for_cpstr
  -> EXTERN: (1017,21) nwxc_reset_rho_tolerance_
  -> EXTERN: (1024,20) __powr8i8
  -> EXTERN: (1028,12) scf_get_fock_param_
  -> EXTERN: (1033,15) ga_dadd_
  -> EXTERN: (1038,21) dft_mulwrap_
  -> EXTERN: (1055,19) ga_duplicate_
  -> EXTERN: (1056,12) errquit_
  -> EXTERN: (1057,14) ga_zero_
  -> EXTERN: (1060,16) dft_frozemb_fde_init_
  -> EXTERN: (1063,16) dft_frozemb_fde_
  -> EXTERN: (1066,16) dft_frozemb_
  -> EXTERN: (1077,25) util_wallsec_
  -> EXTERN: (1078,10) for_write_seq_fmt
  -> EXTERN: (1084,20) util_wallsec_
  -> EXTERN: (1085,19) util_cpusec_
  -> EXTERN: (1089,12) dft_tstamp_
  -> EXTERN: (1094,20) ga_duplicate_
  -> EXTERN: (1095,15) errquit_
  -> EXTERN: (1100,19) ga_duplicate_
  -> EXTERN: (1101,12) errquit_
  -> EXTERN: (1103,21) ga_duplicate_
  -> EXTERN: (1104,14) errquit_
  -> EXTERN: (1108,19) rtdb_get_
  -> EXTERN: (1109,19) rtdb_get_
  -> EXTERN: (1110,19) rtdb_get_
  -> EXTERN: (1111,19) rtdb_get_
  -> EXTERN: (1112,10) errquit_
  -> EXTERN: (1113,19) rtdb_get_
  -> EXTERN: (1114,10) errquit_
  -> EXTERN: (1115,19) rtdb_get_
  -> EXTERN: (1116,10) errquit_
  -> EXTERN: (1117,19) rtdb_get_
  -> EXTERN: (1119,18) rtdb_get_
  -> EXTERN: (1121,19) rtdb_put_
  -> EXTERN: (1122,10) errquit_
  -> EXTERN: (1125,20) ga_duplicate_
  -> EXTERN: (1126,13) errquit_
  -> EXTERN: (1128,17) rtdb_put_
  -> EXTERN: (1129,12) errquit_
  -> EXTERN: (1130,19) ga_duplicate_
  -> EXTERN: (1131,12) errquit_
  -> EXTERN: (1133,11) diis_bld12_
  -> EXTERN: (1135,14) cdft_init_
  -> EXTERN: (1138,18) ga_destroy_
  -> EXTERN: (1138,39) errquit_
  -> EXTERN: (1146,17) rtdb_get_
  -> EXTERN: (1154,16) ga_duplicate_
  -> EXTERN: (1155,11) errquit_
  -> EXTERN: (1163,17) ga_duplicate_
  -> EXTERN: (1164,12) errquit_
  -> EXTERN: (1166,20) ga_duplicate_
  -> EXTERN: (1167,15) errquit_
  -> EXTERN: (1171,20) ga_destroy_
  -> EXTERN: (1171,44) errquit_
  -> EXTERN: (1174,23) ga_destroy_
  -> EXTERN: (1174,47) errquit_
  -> EXTERN: (1177,23) ma_free_heap_
  -> EXTERN: (1177,47) errquit_
  -> EXTERN: (1181,22) pstat_on_
  -> EXTERN: (1189,10) for_write_seq_fmt_xmit
  -> EXTERN: (1189,10) for_write_seq_fmt_xmit
  -> EXTERN: (1189,10) for_write_seq_fmt
  -> EXTERN: (1193,34) for_write_seq_fmt_xmit
  -> EXTERN: (1193,34) for_write_seq_fmt_xmit
  -> EXTERN: (1193,34) for_write_seq_fmt
  -> EXTERN: (1205,9) for_cpystr
  -> EXTERN: (1207,11) ga_dadd_
  -> EXTERN: (1208,14) cosmo_charges_from_dmat_
  -> EXTERN: (1211,11) ga_dadd_
  -> EXTERN: (1219,14) dimqm_main_
  -> EXTERN: (1234,17) ga_ddot_
  -> EXTERN: (1235,12) ga_nodeid_
  -> EXTERN: (1236,11) for_write_seq_fmt
  -> EXTERN: (1237,11) for_write_seq_fmt
  -> EXTERN: (1237,11) for_write_seq_fmt_xmit
  -> EXTERN: (1240,19) rtdb_put_
  -> EXTERN: (1241,12) errquit_
  -> EXTERN: (1248,10) util_print_
  -> EXTERN: (1249,19) util_wallsec_
  -> EXTERN: (1251,17) rtdb_get_info_
  -> EXTERN: (1254,19) ma_push_get_
  -> EXTERN: (1256,15) errquit_
  -> EXTERN: (1257,19) rtdb_get_
  -> EXTERN: (1259,15) errquit_
  -> EXTERN: (1261,15) mull_pop_
  -> EXTERN: (1262,15) mull_pop_
  -> EXTERN: (1263,15) dft_spinflip_
  -> EXTERN: (1265,15) mull_pop_
  -> EXTERN: (1266,15) mull_pop_
  -> EXTERN: (1267,19) ma_pop_stack_
  -> EXTERN: (1268,15) errquit_
  -> EXTERN: (1270,18) rtdb_delete_
  -> EXTERN: (1271,15) errquit_
  -> EXTERN: (1273,12) dft_fockbld_
  -> EXTERN: (1289,10) util_print_
  -> EXTERN: (1290,19) util_wallsec_
  -> EXTERN: (1293,10) util_print_
  -> EXTERN: (1295,11) for_write_seq_fmt
  -> EXTERN: (1311,10) for_write_seq_lis_xmit
  -> EXTERN: (1311,10) for_write_seq_lis_xmit
  -> EXTERN: (1311,10) for_write_seq_lis_xmit
  -> EXTERN: (1311,10) for_write_seq_lis_xmit
  -> EXTERN: (1311,10) for_write_seq_lis_xmit
  -> EXTERN: (1311,10) for_write_seq_lis_xmit
  -> EXTERN: (1311,10) for_write_seq_lis
  -> EXTERN: (1336,16) rtdb_get_
  -> EXTERN: (1343,14) dft_densm_
  -> EXTERN: (1360,18) ga_dadd_
  -> EXTERN: (1369,20) rtdb_put_
  -> EXTERN: (1371,12) errquit_
  -> EXTERN: (1381,14) sym_symmetrize_
  -> EXTERN: (1382,14) ga_symmetrize_
  -> EXTERN: (1386,12) dft_convpam_
  -> EXTERN: (1395,18) ga_dadd_
  -> EXTERN: (1398,18) ga_dadd_
  -> EXTERN: (1405,11) for_write_seq_lis
  -> EXTERN: (1407,13) for_write_seq_fmt_xmit
  -> EXTERN: (1407,13) for_write_seq_fmt
  -> EXTERN: (1409,11) for_write_seq_fmt_xmit
  -> EXTERN: (1409,11) for_write_seq_fmt
  -> EXTERN: (1410,16) util_flush_
  -> EXTERN: (1421,15) dft_tstamp_
  -> EXTERN: (1422,18) diis_driver_
  -> EXTERN: (1430,18) dft_tstamp_
  -> EXTERN: (1435,15) ga_copy_
  -> EXTERN: (1443,14) dfill_
  -> EXTERN: (1444,14) dfill_
  -> EXTERN: (1447,11) for_write_seq_lis
  -> EXTERN: (1449,11) for_write_seq_lis
  -> EXTERN: (1451,13) for_write_seq_fmt_xmit
  -> EXTERN: (1451,13) for_write_seq_fmt
  -> EXTERN: (1453,16) errquit_
  -> EXTERN: (1460,10) util_print_
  -> EXTERN: (1461,13) ga_nodeid_
  -> EXTERN: (1462,11) for_write_seq_lis
  -> EXTERN: (1463,16) util_print_centered_
  -> EXTERN: (1465,11) for_write_seq_lis
  -> EXTERN: (1466,16) util_flush_
  -> EXTERN: (1468,14) ga_print_
  -> EXTERN: (1469,24) ga_print_
  -> EXTERN: (1475,17) ga_copy_
  -> EXTERN: (1478,19) ga_dadd_
  -> EXTERN: (1481,19) ga_dadd_
  -> EXTERN: (1486,15) dft_diagn_
  -> EXTERN: (1503,13) for_write_seq_fmt
  -> EXTERN: (1503,13) for_write_seq_fmt_xmit
  -> EXTERN: (1503,13) for_write_seq_fmt_xmit
  -> EXTERN: (1503,13) for_write_seq_fmt_xmit
  -> EXTERN: (1505,15) ga_sync_
  -> EXTERN: (1513,11) ga_copy_
  -> EXTERN: (1516,13) ga_dgemm_
  -> EXTERN: (1520,17) for_write_seq_lis
  -> EXTERN: (1523,30) ga_scale_
  -> EXTERN: (1526,13) cdft_deriv_
  -> EXTERN: (1533,31) ga_scale_
  -> EXTERN: (1544,26) ga_create_
  -> EXTERN: (1545,48) errquit_
  -> EXTERN: (1547,21) ga_copy_patch_
  -> EXTERN: (1556,18) scf_movecs_sym_adapt_
  -> EXTERN: (1561,21) ga_copy_patch_
  -> EXTERN: (1564,26) ga_destroy_
  -> EXTERN: (1564,47) errquit_
  -> EXTERN: (1581,17) find_la_
  -> EXTERN: (1584,21) ma_push_get_
  -> EXTERN: (1586,15) errquit_
  -> EXTERN: (1587,17) cdft_newt_
  -> EXTERN: (1592,21) ma_pop_stack_
  -> EXTERN: (1593,16) errquit_
  -> EXTERN: (1596,21) errquit_
  -> EXTERN: (1603,21) errquit_
  -> EXTERN: (1608,16) ga_copy_
  -> EXTERN: (1614,12) ga_sync_
  -> EXTERN: (1616,20) dft_rabuck_
  -> EXTERN: (1625,12) dft_tstamp_
  -> EXTERN: (1626,12) dft_densm_
  -> EXTERN: (1636,18) ga_ddot_
  -> EXTERN: (1637,13) ga_nodeid_
  -> EXTERN: (1637,31) for_write_seq_fmt_xmit
  -> EXTERN: (1637,31) for_write_seq_fmt
  -> EXTERN: (1640,21) ga_ddot_
  -> EXTERN: (1641,16) ga_nodeid_
  -> EXTERN: (1641,34) for_write_seq_fmt_xmit
  -> EXTERN: (1641,34) for_write_seq_fmt
  -> EXTERN: (1647,12) dft_tstamp_
  -> EXTERN: (1654,19) ma_push_get_
  -> EXTERN: (1655,15) errquit_
  -> EXTERN: (1656,15) dft_swapab_
  -> EXTERN: (1658,19) ma_pop_stack_
  -> EXTERN: (1659,15) errquit_
  -> EXTERN: (1670,22) for_write_seq_lis
  -> EXTERN: (1672,15) diis_driver_
  -> EXTERN: (1689,16) dft_symbr_
  -> EXTERN: (1699,23) dft_dencvg_
  -> EXTERN: (1705,18) ga_dadd_
  -> EXTERN: (1711,12) ga_sync_
  -> EXTERN: (1715,18) ma_inquire_heap_
  -> EXTERN: (1716,19) ma_inquire_stack_
  -> EXTERN: (1717,10) for_write_seq_fmt
  -> EXTERN: (1718,10) for_write_seq_fmt_xmit
  -> EXTERN: (1718,10) for_write_seq_fmt_xmit
  -> EXTERN: (1718,10) for_write_seq_fmt
  -> EXTERN: (1720,10) for_write_seq_fmt_xmit
  -> EXTERN: (1720,10) for_write_seq_fmt_xmit
  -> EXTERN: (1720,10) for_write_seq_fmt
  -> EXTERN: (1722,15) util_flush_
  -> EXTERN: (1723,10) for_write_seq_fmt
  -> EXTERN: (1728,13) for_write_seq_fmt
  -> EXTERN: (1730,13) for_write_seq_fmt
  -> EXTERN: (1737,25) util_wallsec_
  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
  -> EXTERN: (1739,13) for_write_seq_fmt
  -> EXTERN: (1742,27) for_write_seq_fmt_xmit
  -> EXTERN: (1742,27) for_write_seq_fmt
  -> EXTERN: (1744,13) for_write_seq_fmt_xmit
  -> EXTERN: (1744,13) for_write_seq_fmt_xmit
  -> EXTERN: (1744,13) for_write_seq_fmt_xmit
  -> EXTERN: (1744,13) for_write_seq_fmt_xmit
  -> EXTERN: (1744,13) for_write_seq_fmt_xmit
  -> EXTERN: (1744,13) for_write_seq_fmt_xmit
  -> EXTERN: (1744,13) for_write_seq_fmt
  -> EXTERN: (1747,27) for_write_seq_fmt
  -> EXTERN: (1749,15) util_flush_
  -> EXTERN: (1754,12) ecce_print1_
  -> EXTERN: (1755,12) ecce_print1_
  -> EXTERN: (1757,12) ecce_print1_
  -> EXTERN: (1760,12) ga_sync_
  -> EXTERN: (1764,16) movecs_write_
  -> EXTERN: (1767,10) errquit_
  -> EXTERN: (1771,12) dft_prevals_
  -> EXTERN: (1778,15) dft_mxspin_ovlp_
  -> EXTERN: (1786,15) dft_s2_value_
  -> EXTERN: (1794,15) ga_dadd_
  -> EXTERN: (1802,15) dimqm_setgo_
  -> EXTERN: (1804,12) ga_sync_
  -> EXTERN: (1806,12) dft_tstamp_
  -> EXTERN: (1808,12) dft_scfcvg_
  -> EXTERN: (1814,12) dft_tstamp_
  -> EXTERN: (1818,22) util_wallsec_
  -> EXTERN: (1841,16) util_test_time_remaining_
  -> EXTERN: (1843,13) for_write_seq_lis
  -> EXTERN: (1844,18) util_print_centered_
  -> EXTERN: (1846,13) for_write_seq_lis
  -> EXTERN: (1863,9) for_write_seq_lis
  -> EXTERN: (1865,11) for_write_seq_fmt_xmit
  -> EXTERN: (1865,11) for_write_seq_fmt
  -> EXTERN: (1873,15) dft_remshft_
  -> EXTERN: (1898,15) dimqm_getenergy_
  -> EXTERN: (1904,17) ga_destroy_
  -> EXTERN: (1904,41) errquit_
  -> EXTERN: (1907,21) ga_destroy_
  -> EXTERN: (1907,45) errquit_
  -> EXTERN: (1912,14) parlam_xc_exact_pot_
  -> EXTERN: (1918,14) close_xc_exact_pot_
  -> EXTERN: (1924,15) xc_sicdeg_
  -> EXTERN: (1925,15) localize_sic_
  -> EXTERN: (1926,15) xc_sic_pert_
  -> EXTERN: (1932,13) for_write_seq_lis_xmit
  -> EXTERN: (1932,13) for_write_seq_lis
  -> EXTERN: (1942,15) xc_xdm_
  -> EXTERN: (1950,15) x2c_prop_
  -> EXTERN: (1974,20) for_write_seq_lis
  -> EXTERN: (1981,18) diis_driver_
  -> EXTERN: (1992,15) ga_sync_
  -> EXTERN: (1997,19) pstat_on_
  -> EXTERN: (1998,12) ga_sync_
  -> EXTERN: (2003,14) dft_zora_scale_
  -> EXTERN: (2034,23) rtdb_put_
  -> EXTERN: (2035,13) errquit_
  -> EXTERN: (2040,22) rtdb_get_
  -> EXTERN: (2041,14) errquit_
  -> EXTERN: (2044,22) rtdb_get_
  -> EXTERN: (2045,14) errquit_
  -> EXTERN: (2048,22) rtdb_get_
  -> EXTERN: (2049,14) errquit_
  -> EXTERN: (2052,22) rtdb_get_
  -> EXTERN: (2053,14) errquit_
  -> EXTERN: (2059,20) rtdb_get_
  -> EXTERN: (2060,12) errquit_
  -> EXTERN: (2066,12) ga_sync_
  -> EXTERN: (2072,13) for_write_seq_lis
  -> EXTERN: (2073,18) util_print_centered_
  -> EXTERN: (2075,13) for_write_seq_lis
  -> EXTERN: (2106,18) dimqm_getenergy_
  -> EXTERN: (2113,30) util_wallsec_
  -> EXTERN: (2115,11) for_write_seq_fmt_xmit
  -> EXTERN: (2115,11) for_write_seq_fmt_xmit
  -> EXTERN: (2115,11) for_write_seq_fmt_xmit
  -> EXTERN: (2115,11) for_write_seq_fmt_xmit
  -> EXTERN: (2115,11) for_write_seq_fmt
  -> EXTERN: (2121,11) for_write_seq_fmt
  -> EXTERN: (2121,11) for_write_seq_fmt_xmit
  -> EXTERN: (2121,11) for_write_seq_fmt_xmit
  -> EXTERN: (2121,11) for_write_seq_fmt_xmit
  -> EXTERN: (2121,11) for_write_seq_fmt_xmit
  -> EXTERN: (2121,11) for_write_seq_fmt_xmit
  -> EXTERN: (2129,11) for_write_seq_fmt
  -> EXTERN: (2133,12) for_write_seq_fmt
  -> EXTERN: (2135,12) for_write_seq_fmt
  -> EXTERN: (2138,23) for_write_seq_fmt
  -> EXTERN: (2139,10) for_write_seq_fmt
  -> EXTERN: (2140,10) for_write_seq_fmt
  -> EXTERN: (2151,18) cosmo_smd_output_
  -> EXTERN: (2160,16) cosmo_vem_output_
  -> EXTERN: (2163,15) util_flush_
  -> EXTERN: (2172,12) print_irrep_occp_
  -> EXTERN: (2177,16) rtdb_get_
  -> EXTERN: (2180,11) ga_nodeid_
  -> EXTERN: (2181,9) for_write_seq_lis
  -> EXTERN: (2182,9) for_cpystr
  -> EXTERN: (2184,11) ga_dadd_
  -> EXTERN: (2185,14) cosmo_charges_from_dmat_
  -> EXTERN: (2188,11) ga_dadd_
  -> EXTERN: (2195,14) dimqm_main_
  -> EXTERN: (2202,11) ga_nodeid_
  -> EXTERN: (2203,13) util_print_
  -> EXTERN: (2206,20) util_print_centered_
  -> EXTERN: (2209,20) util_print_centered_
  -> EXTERN: (2212,20) util_print_centered_
  -> EXTERN: (2215,18) output_
  -> EXTERN: (2216,13) for_write_seq_lis
  -> EXTERN: (2217,18) util_flush_
  -> EXTERN: (2225,15) movecs_fix_phase_
  -> EXTERN: (2226,14) util_print_
  -> EXTERN: (2230,15) for_cpystr
  -> EXTERN: (2232,15) for_cpystr
  -> EXTERN: (2234,15) for_cpystr
  -> EXTERN: (2237,17) movecs_print_anal_
  -> EXTERN: (2246,17) rtdb_get_
  -> EXTERN: (2248,18) dft_nwmolden_
  -> EXTERN: (2257,18) util_print_centered_
  -> EXTERN: (2258,13) for_write_seq_lis
  -> EXTERN: (2259,18) util_flush_
  -> EXTERN: (2261,15) ga_sync_
  -> EXTERN: (2263,18) ga_print_
  -> EXTERN: (2264,18) util_flush_
  -> EXTERN: (2271,15) fukui_
  -> EXTERN: (2280,15) dft_mulwrap_
  -> EXTERN: (2282,19) ga_duplicate_
  -> EXTERN: (2283,14) errquit_
  -> EXTERN: (2284,22) dft_header_
  -> EXTERN: (2286,14) diis_bld12_
  -> EXTERN: (2287,14) lowd_pop_
  -> EXTERN: (2289,22) dft_header_
  -> EXTERN: (2291,15) ga_dadd_
  -> EXTERN: (2292,15) lowd_pop_
  -> EXTERN: (2293,15) ga_dadd_
  -> EXTERN: (2294,15) ga_dscal_
  -> EXTERN: (2296,19) ga_destroy_
  -> EXTERN: (2296,39) errquit_
  -> EXTERN: (2305,17) rtdb_put_
  -> EXTERN: (2305,65) errquit_
  -> EXTERN: (2308,17) rtdb_put_
  -> EXTERN: (2309,10) errquit_
  -> EXTERN: (2311,17) rtdb_put_
  -> EXTERN: (2312,10) errquit_
  -> EXTERN: (2314,17) rtdb_put_
  -> EXTERN: (2316,10) errquit_
  -> EXTERN: (2319,17) rtdb_put_
  -> EXTERN: (2321,10) errquit_
  -> EXTERN: (2328,18) rtdb_put_
  -> EXTERN: (2329,10) errquit_
  -> EXTERN: (2335,16) movecs_write_
  -> EXTERN: (2338,29) errquit_
  -> EXTERN: (2343,17) rtdb_get_
  -> EXTERN: (2346,15) dft_print_evals_ab_
  -> EXTERN: (2350,20) rtdb_put_
  -> EXTERN: (2351,15) errquit_
  -> EXTERN: (2357,15) diis_driver_
  -> EXTERN: (2365,23) ma_free_heap_
  -> EXTERN: (2366,18) errquit_
  -> EXTERN: (2369,23) ma_free_heap_
  -> EXTERN: (2370,18) errquit_
  -> EXTERN: (2374,20) ma_free_heap_
  -> EXTERN: (2375,15) errquit_
  -> EXTERN: (2380,27) util_print_
  -> EXTERN: (2381,15) dft_mxspin_ovlp_
  -> EXTERN: (2386,20) ga_destroy_
  -> EXTERN: (2386,40) errquit_
  -> EXTERN: (2388,20) ga_destroy_
  -> EXTERN: (2388,39) errquit_
  -> EXTERN: (2390,20) ga_destroy_
  -> EXTERN: (2390,38) errquit_
  -> EXTERN: (2397,10) ga_dadd_
  -> EXTERN: (2401,27) util_print_
  -> EXTERN: (2403,15) dft_s2_value_
  -> EXTERN: (2411,16) rtdb_put_
  -> EXTERN: (2412,18) errquit_
  -> EXTERN: (2418,27) geom_momint_
  -> EXTERN: (2419,15) dft_mpole_
  -> EXTERN: (2424,11) util_print_
  -> EXTERN: (2425,15) schwarz_print_
  -> EXTERN: (2428,12) dft_prevals_
  -> EXTERN: (2434,16) rtdb_get_
  -> EXTERN: (2436,17) rtdb_get_
  -> EXTERN: (2438,17) rtdb_get_
  -> EXTERN: (2441,13) util_file_name_
  -> EXTERN: (2442,13) dft_vspec_
  -> EXTERN: (2448,12) movecs_ecce_
  -> EXTERN: (2452,15) movecs_ecce_
  -> EXTERN: (2456,12) ecce_print1_
  -> EXTERN: (2457,12) ecce_print1_
  -> EXTERN: (2458,12) ecce_print1_
  -> EXTERN: (2459,12) ecce_print1_
  -> EXTERN: (2461,15) ecce_print1_
  -> EXTERN: (2464,16) ma_chop_stack_
  -> EXTERN: (2465,10) errquit_
  -> EXTERN: (2468,20) ga_destroy_
  -> EXTERN: (2468,41) errquit_
  -> EXTERN: (2473,17) ga_destroy_
  -> EXTERN: (2473,37) errquit_
  -> EXTERN: (2475,17) ga_destroy_
  -> EXTERN: (2475,37) errquit_
  -> EXTERN: (2479,12) fock_2e_tidy_
  -> EXTERN: (2482,15) ecce_print_module_exit_
  -> EXTERN: (2484,15) ecce_print_module_exit_
  -> EXTERN: (2489,16) ma_chop_stack_
  -> EXTERN: (2490,10) errquit_
  -> EXTERN: (2495,17) rtdb_get_
  -> EXTERN: (2500,10) for_write_seq_lis
  -> EXTERN: (2501,20) cphf_poliz_
  -> EXTERN: (2502,15) errquit_
  -> EXTERN: (2511,16) rtdb_get_
  -> EXTERN: (2513,24) dft_print_mats_
  -> EXTERN: (2520,16) rtdb_get_
  -> EXTERN: (2522,23) dft_save_mats_
  -> EXTERN: (2525,17) ga_destroy_
  -> EXTERN: (2525,36) errquit_
  -> EXTERN: (2527,17) ga_destroy_
  -> EXTERN: (2527,41) errquit_
  -> EXTERN: (2530,20) ga_destroy_
  -> EXTERN: (2530,44) errquit_
  -> EXTERN: (2536,19) ga_destroy_
  -> EXTERN: (2536,42) errquit_
  -> EXTERN: (2541,9) dft_frozemb_fde_end_
  -> EXTERN: (2548,20) ga_destroy_
  -> EXTERN: (2548,45) errquit_
  -> EXTERN: (2552,19) ga_destroy_
  -> EXTERN: (2552,43) errquit_
  -> EXTERN: (2556,20) ga_destroy_
  -> EXTERN: (2556,44) errquit_
  -> EXTERN: (2563,18) ga_destroy_
  -> EXTERN: (2563,40) errquit_
  -> EXTERN: (2565,18) ga_destroy_
  -> EXTERN: (2565,50) errquit_
  -> EXTERN: (2568,20) ga_destroy_
  -> EXTERN: (2568,42) errquit_
  -> EXTERN: (2570,20) ga_destroy_
  -> EXTERN: (2570,52) errquit_
  -> EXTERN: (2577,15) x2c_scf_terminate_
  -> EXTERN: (2584,15) xc_xdm_cleanup_
  -> EXTERN: (2588,19) pstat_off_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(522,10)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(522,10)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(530,10)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(530,10)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(533,10)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(533,10)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(804,10)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 47 
   remark #15477: vector cost: 20.000 
   remark #15478: estimated potential speedup: 2.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(804,10)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1141,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.840 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1141,9)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=10
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1406,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1407:13) and at (1407:13)
   remark #25015: Estimate of max trip count of loop=10
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1450,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1451:13) and at (1451:13)
   remark #25015: Estimate of max trip count of loop=10
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1555,27)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 5  
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1573,9)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1575,11) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1575,11) ]
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   remark #25015: Estimate of max trip count of loop=10
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1573,9)
<Remainder>
   remark #25015: Estimate of max trip count of loop=10
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1599,11)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1600,12) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1600,12) ]
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=10
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1599,11)
<Remainder>
   remark #25015: Estimate of max trip count of loop=10
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1366,11)
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.870 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1366,11)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=10
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1864,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1865:11) and at (1865:11)
   remark #25015: Estimate of max trip count of loop=10
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(748,9)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(828,9)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1917,18)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1127,9)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1992,15)
      remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.

      LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1850,61)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

         LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1383,8)
            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
         LOOP END

         LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1403,9)
            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

            LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1401,11)
               remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
            LOOP END
         LOOP END

         LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1603,14)
            remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

            LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1568,7)
               remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

               LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1484,12)
                  remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
               LOOP END

               LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1524,10)
                  remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
               LOOP END

               LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1534,11)
                  remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1436,9)
            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
         LOOP END

         LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1609,9)
            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
         LOOP END

         LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1710,7)
            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(2218,10)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(2244,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(2265,10)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(2550,9)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(4,24):remark #34051: REGISTER ALLOCATION : [dft_scf_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F:4

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :    5615
            Global    :     878
            Local     :    4737
        Regenerable   :    4183
        Spilled       :      59
        
    Routine stack
        Variables     :    2456 bytes*
            Reads     :     243 [2.46e+00 ~ 2.5%]
            Writes    :     328 [2.53e+00 ~ 2.5%]
        Spills        :     424 bytes*
            Reads     :     128 [1.84e+00 ~ 1.8%]
            Writes    :      91 [9.54e-01 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	c
2	c     main scalar DFT driver
3	c
4	      logical function dft_scf(rtdb, Etold, Enuc, iVcoul_opt, iVxc_opt, 
!INLINE REPORT: (DFT_SCF) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(4,24)
!  -> EXTERN: (264,18) rtdb_get_
!  -> EXTERN: (266,9) errquit_
!  -> EXTERN: (269,18) rtdb_get_
!  -> EXTERN: (271,9) errquit_
!  -> EXTERN: (274,18) rtdb_get_
!  -> EXTERN: (276,8) errquit_
!  -> EXTERN: (280,20) rtdb_get_
!  -> EXTERN: (282,11) errquit_
!  -> EXTERN: (296,12) ecce_print_module_entry_
!  -> EXTERN: (300,16) util_print_
!  -> EXTERN: (301,21) util_print_
!  -> EXTERN: (302,21) util_print_
!  -> EXTERN: (303,21) util_print_
!  -> EXTERN: (304,21) util_print_
!  -> EXTERN: (305,29) util_print_
!  -> EXTERN: (307,21) util_print_
!  -> EXTERN: (308,21) util_print_
!  -> EXTERN: (309,21) util_print_
!  -> EXTERN: (310,21) util_print_
!  -> EXTERN: (311,20) util_print_
!  -> EXTERN: (312,28) util_print_
!  -> EXTERN: (314,34) util_print_
!  -> EXTERN: (316,26) util_print_
!  -> EXTERN: (317,31) util_print_
!  -> EXTERN: (319,27) util_print_
!  -> EXTERN: (320,20) util_print_
!  -> EXTERN: (321,23) util_print_
!  -> EXTERN: (322,8) ga_nodeid_
!  -> EXTERN: (323,15) util_print_
!  -> EXTERN: (325,12) ga_nodeid_
!  -> EXTERN: (326,15) ga_nnodes_
!  -> EXTERN: (344,14) errquit_
!  -> EXTERN: (351,22) for_write_seq_lis
!  -> EXTERN: (354,22) for_write_seq_lis
!  -> EXTERN: (357,12) x2c_scf_init_
!  -> EXTERN: (362,17) rtdb_put_
!  -> EXTERN: (363,12) errquit_
!  -> EXTERN: (375,16) rtdb_get_
!  -> EXTERN: (379,16) rtdb_get_
!  -> EXTERN: (381,11) rtdb_get_
!  -> EXTERN: (383,14) rtdb_get_
!  -> EXTERN: (397,11) rtdb_get_
!  -> EXTERN: (399,23) errquit_
!  -> EXTERN: (403,16) rtdb_get_
!  -> EXTERN: (404,18) errquit_
!  -> EXTERN: (406,16) rtdb_get_
!  -> EXTERN: (407,20) errquit_
!  -> EXTERN: (409,16) rtdb_get_
!  -> EXTERN: (410,18) errquit_
!  -> EXTERN: (412,11) rtdb_get_
!  -> EXTERN: (421,16) rtdb_get_
!  -> EXTERN: (426,16) rtdb_get_
!  -> EXTERN: (431,17) rtdb_get_
!  -> EXTERN: (436,17) geom_ncent_
!  -> EXTERN: (437,10) errquit_
!  -> EXTERN: (438,17) geom_nuc_charge_
!  -> EXTERN: (439,10) errquit_
!  -> EXTERN: (445,16) ma_push_get_
!  -> EXTERN: (447,10) errquit_
!  -> EXTERN: (448,16) ma_push_get_
!  -> EXTERN: (450,10) errquit_
!  -> EXTERN: (451,16) ma_push_get_
!  -> EXTERN: (453,10) errquit_
!  -> EXTERN: (455,12) build_maps_
!  -> EXTERN: (458,17) rtdb_get_
!  -> EXTERN: (459,10) errquit_
!  -> EXTERN: (460,17) ma_push_get_
!  -> EXTERN: (461,10) errquit_
!  -> EXTERN: (465,12) util_tolls_
!  -> EXTERN: (486,12) xc_xdm_init_
!  -> EXTERN: (489,12) xc_sicinit_
!  -> EXTERN: (492,18) util_module_avail_
!  -> EXTERN: (494,15) nwxc_getvals_
!  -> EXTERN: (496,19) util_module_avail_
!  -> EXTERN: (498,15) dimqm_init_
!  -> EXTERN: (499,15) dimqm_used_
!  -> EXTERN: (500,15) dimqm_getgo_
!  -> EXTERN: (511,16) ma_push_get_
!  -> EXTERN: (513,10) errquit_
!  -> EXTERN: (521,15) dfill_
!  -> EXTERN: (529,15) dfill_
!  -> EXTERN: (555,12) dft_tstamp_
!  -> EXTERN: (574,16) rtdb_get_
!  -> EXTERN: (577,18) xc_chkdispauto_
!  -> EXTERN: (578,13) xc_vdw_
!  -> EXTERN: (581,17) ga_duplicate_
!  -> EXTERN: (582,9) errquit_
!  -> EXTERN: (583,17) ga_duplicate_
!  -> EXTERN: (584,9) errquit_
!  -> EXTERN: (623,19) ma_alloc_get_
!  -> EXTERN: (625,15) errquit_
!  -> EXTERN: (627,22) ma_alloc_get_
!  -> EXTERN: (629,18) errquit_
!  -> EXTERN: (630,22) ma_alloc_get_
!  -> EXTERN: (632,18) errquit_
!  -> EXTERN: (654,16) ma_push_get_
!  -> EXTERN: (655,12) errquit_
!  -> EXTERN: (661,35) dft_dump_info_
!  -> EXTERN: (670,17) rtdb_cput_
!  -> EXTERN: (671,10) errquit_
!  -> EXTERN: (674,16) ma_push_get_
!  -> EXTERN: (675,10) errquit_
!  -> EXTERN: (676,12) ifill_
!  -> EXTERN: (679,17) rtdb_put_
!  -> EXTERN: (680,10) errquit_
!  -> EXTERN: (682,17) bas_name_
!  -> EXTERN: (683,12) errquit_
!  -> EXTERN: (686,16) rtdb_get_
!  -> EXTERN: (688,12) scf_get_fock_param_
!  -> EXTERN: (691,12) fock_force_direct_
!  -> EXTERN: (698,44) x2c_noatm_
!  -> EXTERN: (699,14) ga_zero_
!  -> EXTERN: (700,24) ga_zero_
!  -> EXTERN: (701,14) guess_dens_
!  -> EXTERN: (702,14) dft_quickguess_
!  -> EXTERN: (705,29) x2c_noatm_
!  -> EXTERN: (706,14) ga_zero_
!  -> EXTERN: (707,24) ga_zero_
!  -> EXTERN: (711,16) rtdb_get_
!  -> EXTERN: (715,15) util_print_centered_
!  -> EXTERN: (717,10) for_write_seq_lis
!  -> EXTERN: (721,14) util_file_name_
!  -> EXTERN: (724,17) ga_duplicate_
!  -> EXTERN: (725,12) errquit_
!  -> EXTERN: (726,14) ga_zero_
!  -> EXTERN: (728,18) ga_duplicate_
!  -> EXTERN: (729,12) errquit_
!  -> EXTERN: (730,17) ga_zero_
!  -> EXTERN: (734,17) ga_duplicate_
!  -> EXTERN: (735,12) errquit_
!  -> EXTERN: (736,14) ga_zero_
!  -> EXTERN: (738,18) ga_duplicate_
!  -> EXTERN: (739,12) errquit_
!  -> EXTERN: (740,17) ga_zero_
!  -> EXTERN: (745,17) ga_duplicate_
!  -> EXTERN: (746,10) errquit_
!  -> EXTERN: (747,15) ga_zero_
!  -> EXTERN: (753,19) ga_ddot_
!  -> EXTERN: (754,21) rtdb_put_
!  -> EXTERN: (755,14) errquit_
!  -> EXTERN: (761,18) dft_zora_read_
!  -> EXTERN: (765,26) zora_recalc_
!  -> EXTERN: (769,15) for_write_seq_lis
!  -> EXTERN: (776,17) util_print_centered_
!  -> EXTERN: (778,12) for_write_seq_lis
!  -> EXTERN: (785,17) rtdb_get_
!  -> EXTERN: (786,14) ga_nodeid_
!  -> EXTERN: (787,12) for_write_seq_lis
!  -> EXTERN: (787,12) for_write_seq_lis_xmit
!  -> EXTERN: (791,20) rtdb_get_
!  -> EXTERN: (798,17) rtdb_get_
!  -> EXTERN: (800,19) ma_alloc_get_
!  -> EXTERN: (802,10) errquit_
!  -> EXTERN: (803,15) get_zetanuc_arr_
!  -> EXTERN: (811,15) zora_getv_sf_
!  -> EXTERN: (814,20) ma_free_heap_
!  -> EXTERN: (814,46) errquit_
!  -> EXTERN: (818,18) dft_zora_write_
!  -> EXTERN: (820,10) errquit_
!  -> EXTERN: (827,16) ga_copy_
!  -> EXTERN: (836,22) for_write_seq_lis
!  -> EXTERN: (836,22) for_write_seq_lis_xmit
!  -> EXTERN: (838,17) ga_duplicate_
!  -> EXTERN: (839,12) errquit_
!  -> EXTERN: (840,14) ga_zero_
!  -> EXTERN: (842,22) for_write_seq_lis
!  -> EXTERN: (850,14) calc_x2c_1e_scalar_ga_
!  -> EXTERN: (856,19) ga_duplicate_
!  -> EXTERN: (857,12) errquit_
!  -> EXTERN: (858,16) ga_copy_
!  -> EXTERN: (865,15) rtdb_get_
!  -> EXTERN: (867,24) for_cpystr
!  -> EXTERN: (868,12) dft_guessin_
!  -> EXTERN: (872,15) rtdb_get_
!  -> EXTERN: (877,19) pstat_on_
!  -> EXTERN: (878,16) rtdb_get_
!  -> EXTERN: (880,29) util_statldb_
!  -> EXTERN: (881,12) scf_vectors_guess_
!  -> EXTERN: (888,33) util_statldb_
!  -> EXTERN: (889,12) dft_guessout_
!  -> EXTERN: (891,12) for_write_seq_fmt
!  -> EXTERN: (892,12) util_wallsec_
!  -> EXTERN: (893,19) pstat_off_
!  -> EXTERN: (895,15) rtdb_get_
!  -> EXTERN: (897,34) for_cpstr
!  -> EXTERN: (898,17) rtdb_put_
!  -> EXTERN: (899,14) errquit_
!  -> EXTERN: (900,19) rtdb_cput_
!  -> EXTERN: (901,14) errquit_
!  -> EXTERN: (903,19) rtdb_cput_
!  -> EXTERN: (904,14) errquit_
!  -> EXTERN: (906,12) dft_quickguess_
!  -> EXTERN: (912,14) ga_symmetrize_
!  -> EXTERN: (913,23) ga_symmetrize_
!  -> EXTERN: (918,14) dft_densm_
!  -> EXTERN: (932,19) ga_ddot_
!  -> EXTERN: (933,14) ga_nodeid_
!  -> EXTERN: (934,13) for_write_seq_fmt
!  -> EXTERN: (935,13) for_write_seq_fmt
!  -> EXTERN: (935,13) for_write_seq_fmt_xmit
!  -> EXTERN: (938,21) rtdb_put_
!  -> EXTERN: (939,14) errquit_
!  -> EXTERN: (946,16) open_xc_exact_pot_
!  -> EXTERN: (954,14) dft_prevals_
!  -> EXTERN: (962,12) fock_2e_tidy_
!  -> EXTERN: (965,21) pstat_on_
!  -> EXTERN: (966,12) dft_mem3c_
!  -> EXTERN: (970,16) dft_3cincor_
!  -> EXTERN: (974,41) for_write_seq_fmt
!  -> EXTERN: (977,21) pstat_off_
!  -> EXTERN: (985,23) for_cpstr
!  -> EXTERN: (1002,23) for_cpstr
!  -> EXTERN: (1017,21) nwxc_reset_rho_tolerance_
!  -> EXTERN: (1024,20) __powr8i8
!  -> EXTERN: (1028,12) scf_get_fock_param_
!  -> EXTERN: (1033,15) ga_dadd_
!  -> EXTERN: (1038,21) dft_mulwrap_
!  -> EXTERN: (1055,19) ga_duplicate_
!  -> EXTERN: (1056,12) errquit_
!  -> EXTERN: (1057,14) ga_zero_
!  -> EXTERN: (1060,16) dft_frozemb_fde_init_
!  -> EXTERN: (1063,16) dft_frozemb_fde_
!  -> EXTERN: (1066,16) dft_frozemb_
!  -> EXTERN: (1077,25) util_wallsec_
!  -> EXTERN: (1078,10) for_write_seq_fmt
!  -> EXTERN: (1084,20) util_wallsec_
!  -> EXTERN: (1085,19) util_cpusec_
!  -> EXTERN: (1089,12) dft_tstamp_
!  -> EXTERN: (1094,20) ga_duplicate_
!  -> EXTERN: (1095,15) errquit_
!  -> EXTERN: (1100,19) ga_duplicate_
!  -> EXTERN: (1101,12) errquit_
!  -> EXTERN: (1103,21) ga_duplicate_
!  -> EXTERN: (1104,14) errquit_
!  -> EXTERN: (1108,19) rtdb_get_
!  -> EXTERN: (1109,19) rtdb_get_
!  -> EXTERN: (1110,19) rtdb_get_
!  -> EXTERN: (1111,19) rtdb_get_
!  -> EXTERN: (1112,10) errquit_
!  -> EXTERN: (1113,19) rtdb_get_
!  -> EXTERN: (1114,10) errquit_
!  -> EXTERN: (1115,19) rtdb_get_
!  -> EXTERN: (1116,10) errquit_
!  -> EXTERN: (1117,19) rtdb_get_
!  -> EXTERN: (1119,18) rtdb_get_
!  -> EXTERN: (1121,19) rtdb_put_
!  -> EXTERN: (1122,10) errquit_
!  -> EXTERN: (1125,20) ga_duplicate_
!  -> EXTERN: (1126,13) errquit_
!  -> EXTERN: (1128,17) rtdb_put_
!  -> EXTERN: (1129,12) errquit_
!  -> EXTERN: (1130,19) ga_duplicate_
!  -> EXTERN: (1131,12) errquit_
!  -> EXTERN: (1133,11) diis_bld12_
!  -> EXTERN: (1135,14) cdft_init_
!  -> EXTERN: (1138,18) ga_destroy_
!  -> EXTERN: (1138,39) errquit_
!  -> EXTERN: (1146,17) rtdb_get_
!  -> EXTERN: (1154,16) ga_duplicate_
!  -> EXTERN: (1155,11) errquit_
!  -> EXTERN: (1163,17) ga_duplicate_
!  -> EXTERN: (1164,12) errquit_
!  -> EXTERN: (1166,20) ga_duplicate_
!  -> EXTERN: (1167,15) errquit_
!  -> EXTERN: (1171,20) ga_destroy_
!  -> EXTERN: (1171,44) errquit_
!  -> EXTERN: (1174,23) ga_destroy_
!  -> EXTERN: (1174,47) errquit_
!  -> EXTERN: (1177,23) ma_free_heap_
!  -> EXTERN: (1177,47) errquit_
!  -> EXTERN: (1181,22) pstat_on_
!  -> EXTERN: (1189,10) for_write_seq_fmt_xmit
!  -> EXTERN: (1189,10) for_write_seq_fmt_xmit
!  -> EXTERN: (1189,10) for_write_seq_fmt
!  -> EXTERN: (1193,34) for_write_seq_fmt_xmit
!  -> EXTERN: (1193,34) for_write_seq_fmt_xmit
!  -> EXTERN: (1193,34) for_write_seq_fmt
!  -> EXTERN: (1205,9) for_cpystr
!  -> EXTERN: (1207,11) ga_dadd_
!  -> EXTERN: (1208,14) cosmo_charges_from_dmat_
!  -> EXTERN: (1211,11) ga_dadd_
!  -> EXTERN: (1219,14) dimqm_main_
!  -> EXTERN: (1234,17) ga_ddot_
!  -> EXTERN: (1235,12) ga_nodeid_
!  -> EXTERN: (1236,11) for_write_seq_fmt
!  -> EXTERN: (1237,11) for_write_seq_fmt
!  -> EXTERN: (1237,11) for_write_seq_fmt_xmit
!  -> EXTERN: (1240,19) rtdb_put_
!  -> EXTERN: (1241,12) errquit_
!  -> EXTERN: (1248,10) util_print_
!  -> EXTERN: (1249,19) util_wallsec_
!  -> EXTERN: (1251,17) rtdb_get_info_
!  -> EXTERN: (1254,19) ma_push_get_
!  -> EXTERN: (1256,15) errquit_
!  -> EXTERN: (1257,19) rtdb_get_
!  -> EXTERN: (1259,15) errquit_
!  -> EXTERN: (1261,15) mull_pop_
!  -> EXTERN: (1262,15) mull_pop_
!  -> EXTERN: (1263,15) dft_spinflip_
!  -> EXTERN: (1265,15) mull_pop_
!  -> EXTERN: (1266,15) mull_pop_
!  -> EXTERN: (1267,19) ma_pop_stack_
!  -> EXTERN: (1268,15) errquit_
!  -> EXTERN: (1270,18) rtdb_delete_
!  -> EXTERN: (1271,15) errquit_
!  -> EXTERN: (1273,12) dft_fockbld_
!  -> EXTERN: (1289,10) util_print_
!  -> EXTERN: (1290,19) util_wallsec_
!  -> EXTERN: (1293,10) util_print_
!  -> EXTERN: (1295,11) for_write_seq_fmt
!  -> EXTERN: (1311,10) for_write_seq_lis_xmit
!  -> EXTERN: (1311,10) for_write_seq_lis_xmit
!  -> EXTERN: (1311,10) for_write_seq_lis_xmit
!  -> EXTERN: (1311,10) for_write_seq_lis_xmit
!  -> EXTERN: (1311,10) for_write_seq_lis_xmit
!  -> EXTERN: (1311,10) for_write_seq_lis_xmit
!  -> EXTERN: (1311,10) for_write_seq_lis
!  -> EXTERN: (1336,16) rtdb_get_
!  -> EXTERN: (1343,14) dft_densm_
!  -> EXTERN: (1360,18) ga_dadd_
!  -> EXTERN: (1369,20) rtdb_put_
!  -> EXTERN: (1371,12) errquit_
!  -> EXTERN: (1381,14) sym_symmetrize_
!  -> EXTERN: (1382,14) ga_symmetrize_
!  -> EXTERN: (1386,12) dft_convpam_
!  -> EXTERN: (1395,18) ga_dadd_
!  -> EXTERN: (1398,18) ga_dadd_
!  -> EXTERN: (1405,11) for_write_seq_lis
!  -> EXTERN: (1407,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1407,13) for_write_seq_fmt
!  -> EXTERN: (1409,11) for_write_seq_fmt_xmit
!  -> EXTERN: (1409,11) for_write_seq_fmt
!  -> EXTERN: (1410,16) util_flush_
!  -> EXTERN: (1421,15) dft_tstamp_
!  -> EXTERN: (1422,18) diis_driver_
!  -> EXTERN: (1430,18) dft_tstamp_
!  -> EXTERN: (1435,15) ga_copy_
!  -> EXTERN: (1443,14) dfill_
!  -> EXTERN: (1444,14) dfill_
!  -> EXTERN: (1447,11) for_write_seq_lis
!  -> EXTERN: (1449,11) for_write_seq_lis
!  -> EXTERN: (1451,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1451,13) for_write_seq_fmt
!  -> EXTERN: (1453,16) errquit_
!  -> EXTERN: (1460,10) util_print_
!  -> EXTERN: (1461,13) ga_nodeid_
!  -> EXTERN: (1462,11) for_write_seq_lis
!  -> EXTERN: (1463,16) util_print_centered_
!  -> EXTERN: (1465,11) for_write_seq_lis
!  -> EXTERN: (1466,16) util_flush_
!  -> EXTERN: (1468,14) ga_print_
!  -> EXTERN: (1469,24) ga_print_
!  -> EXTERN: (1475,17) ga_copy_
!  -> EXTERN: (1478,19) ga_dadd_
!  -> EXTERN: (1481,19) ga_dadd_
!  -> EXTERN: (1486,15) dft_diagn_
!  -> EXTERN: (1503,13) for_write_seq_fmt
!  -> EXTERN: (1503,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1503,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1503,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1505,15) ga_sync_
!  -> EXTERN: (1513,11) ga_copy_
!  -> EXTERN: (1516,13) ga_dgemm_
!  -> EXTERN: (1520,17) for_write_seq_lis
!  -> EXTERN: (1523,30) ga_scale_
!  -> EXTERN: (1526,13) cdft_deriv_
!  -> EXTERN: (1533,31) ga_scale_
!  -> EXTERN: (1544,26) ga_create_
!  -> EXTERN: (1545,48) errquit_
!  -> EXTERN: (1547,21) ga_copy_patch_
!  -> EXTERN: (1556,18) scf_movecs_sym_adapt_
!  -> EXTERN: (1561,21) ga_copy_patch_
!  -> EXTERN: (1564,26) ga_destroy_
!  -> EXTERN: (1564,47) errquit_
!  -> EXTERN: (1581,17) find_la_
!  -> EXTERN: (1584,21) ma_push_get_
!  -> EXTERN: (1586,15) errquit_
!  -> EXTERN: (1587,17) cdft_newt_
!  -> EXTERN: (1592,21) ma_pop_stack_
!  -> EXTERN: (1593,16) errquit_
!  -> EXTERN: (1596,21) errquit_
!  -> EXTERN: (1603,21) errquit_
!  -> EXTERN: (1608,16) ga_copy_
!  -> EXTERN: (1614,12) ga_sync_
!  -> EXTERN: (1616,20) dft_rabuck_
!  -> EXTERN: (1625,12) dft_tstamp_
!  -> EXTERN: (1626,12) dft_densm_
!  -> EXTERN: (1636,18) ga_ddot_
!  -> EXTERN: (1637,13) ga_nodeid_
!  -> EXTERN: (1637,31) for_write_seq_fmt_xmit
!  -> EXTERN: (1637,31) for_write_seq_fmt
!  -> EXTERN: (1640,21) ga_ddot_
!  -> EXTERN: (1641,16) ga_nodeid_
!  -> EXTERN: (1641,34) for_write_seq_fmt_xmit
!  -> EXTERN: (1641,34) for_write_seq_fmt
!  -> EXTERN: (1647,12) dft_tstamp_
!  -> EXTERN: (1654,19) ma_push_get_
!  -> EXTERN: (1655,15) errquit_
!  -> EXTERN: (1656,15) dft_swapab_
!  -> EXTERN: (1658,19) ma_pop_stack_
!  -> EXTERN: (1659,15) errquit_
!  -> EXTERN: (1670,22) for_write_seq_lis
!  -> EXTERN: (1672,15) diis_driver_
!  -> EXTERN: (1689,16) dft_symbr_
!  -> EXTERN: (1699,23) dft_dencvg_
!  -> EXTERN: (1705,18) ga_dadd_
!  -> EXTERN: (1711,12) ga_sync_
!  -> EXTERN: (1715,18) ma_inquire_heap_
!  -> EXTERN: (1716,19) ma_inquire_stack_
!  -> EXTERN: (1717,10) for_write_seq_fmt
!  -> EXTERN: (1718,10) for_write_seq_fmt_xmit
!  -> EXTERN: (1718,10) for_write_seq_fmt_xmit
!  -> EXTERN: (1718,10) for_write_seq_fmt
!  -> EXTERN: (1720,10) for_write_seq_fmt_xmit
!  -> EXTERN: (1720,10) for_write_seq_fmt_xmit
!  -> EXTERN: (1720,10) for_write_seq_fmt
!  -> EXTERN: (1722,15) util_flush_
!  -> EXTERN: (1723,10) for_write_seq_fmt
!  -> EXTERN: (1728,13) for_write_seq_fmt
!  -> EXTERN: (1730,13) for_write_seq_fmt
!  -> EXTERN: (1737,25) util_wallsec_
!  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1739,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1739,13) for_write_seq_fmt
!  -> EXTERN: (1742,27) for_write_seq_fmt_xmit
!  -> EXTERN: (1742,27) for_write_seq_fmt
!  -> EXTERN: (1744,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1744,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1744,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1744,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1744,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1744,13) for_write_seq_fmt_xmit
!  -> EXTERN: (1744,13) for_write_seq_fmt
!  -> EXTERN: (1747,27) for_write_seq_fmt
!  -> EXTERN: (1749,15) util_flush_
!  -> EXTERN: (1754,12) ecce_print1_
!  -> EXTERN: (1755,12) ecce_print1_
!  -> EXTERN: (1757,12) ecce_print1_
!  -> EXTERN: (1760,12) ga_sync_
!  -> EXTERN: (1764,16) movecs_write_
!  -> EXTERN: (1767,10) errquit_
!  -> EXTERN: (1771,12) dft_prevals_
!  -> EXTERN: (1778,15) dft_mxspin_ovlp_
!  -> EXTERN: (1786,15) dft_s2_value_
!  -> EXTERN: (1794,15) ga_dadd_
!  -> EXTERN: (1802,15) dimqm_setgo_
!  -> EXTERN: (1804,12) ga_sync_
!  -> EXTERN: (1806,12) dft_tstamp_
!  -> EXTERN: (1808,12) dft_scfcvg_
!  -> EXTERN: (1814,12) dft_tstamp_
!  -> EXTERN: (1818,22) util_wallsec_
!  -> EXTERN: (1841,16) util_test_time_remaining_
!  -> EXTERN: (1843,13) for_write_seq_lis
!  -> EXTERN: (1844,18) util_print_centered_
!  -> EXTERN: (1846,13) for_write_seq_lis
!  -> EXTERN: (1863,9) for_write_seq_lis
!  -> EXTERN: (1865,11) for_write_seq_fmt_xmit
!  -> EXTERN: (1865,11) for_write_seq_fmt
!  -> EXTERN: (1873,15) dft_remshft_
!  -> EXTERN: (1898,15) dimqm_getenergy_
!  -> EXTERN: (1904,17) ga_destroy_
!  -> EXTERN: (1904,41) errquit_
!  -> EXTERN: (1907,21) ga_destroy_
!  -> EXTERN: (1907,45) errquit_
!  -> EXTERN: (1912,14) parlam_xc_exact_pot_
!  -> EXTERN: (1918,14) close_xc_exact_pot_
!  -> EXTERN: (1924,15) xc_sicdeg_
!  -> EXTERN: (1925,15) localize_sic_
!  -> EXTERN: (1926,15) xc_sic_pert_
!  -> EXTERN: (1932,13) for_write_seq_lis_xmit
!  -> EXTERN: (1932,13) for_write_seq_lis
!  -> EXTERN: (1942,15) xc_xdm_
!  -> EXTERN: (1950,15) x2c_prop_
!  -> EXTERN: (1974,20) for_write_seq_lis
!  -> EXTERN: (1981,18) diis_driver_
!  -> EXTERN: (1992,15) ga_sync_
!  -> EXTERN: (1997,19) pstat_on_
!  -> EXTERN: (1998,12) ga_sync_
!  -> EXTERN: (2003,14) dft_zora_scale_
!  -> EXTERN: (2034,23) rtdb_put_
!  -> EXTERN: (2035,13) errquit_
!  -> EXTERN: (2040,22) rtdb_get_
!  -> EXTERN: (2041,14) errquit_
!  -> EXTERN: (2044,22) rtdb_get_
!  -> EXTERN: (2045,14) errquit_
!  -> EXTERN: (2048,22) rtdb_get_
!  -> EXTERN: (2049,14) errquit_
!  -> EXTERN: (2052,22) rtdb_get_
!  -> EXTERN: (2053,14) errquit_
!  -> EXTERN: (2059,20) rtdb_get_
!  -> EXTERN: (2060,12) errquit_
!  -> EXTERN: (2066,12) ga_sync_
!  -> EXTERN: (2072,13) for_write_seq_lis
!  -> EXTERN: (2073,18) util_print_centered_
!  -> EXTERN: (2075,13) for_write_seq_lis
!  -> EXTERN: (2106,18) dimqm_getenergy_
!  -> EXTERN: (2113,30) util_wallsec_
!  -> EXTERN: (2115,11) for_write_seq_fmt_xmit
!  -> EXTERN: (2115,11) for_write_seq_fmt_xmit
!  -> EXTERN: (2115,11) for_write_seq_fmt_xmit
!  -> EXTERN: (2115,11) for_write_seq_fmt_xmit
!  -> EXTERN: (2115,11) for_write_seq_fmt
!  -> EXTERN: (2121,11) for_write_seq_fmt
!  -> EXTERN: (2121,11) for_write_seq_fmt_xmit
!  -> EXTERN: (2121,11) for_write_seq_fmt_xmit
!  -> EXTERN: (2121,11) for_write_seq_fmt_xmit
!  -> EXTERN: (2121,11) for_write_seq_fmt_xmit
!  -> EXTERN: (2121,11) for_write_seq_fmt_xmit
!  -> EXTERN: (2129,11) for_write_seq_fmt
!  -> EXTERN: (2133,12) for_write_seq_fmt
!  -> EXTERN: (2135,12) for_write_seq_fmt
!  -> EXTERN: (2138,23) for_write_seq_fmt
!  -> EXTERN: (2139,10) for_write_seq_fmt
!  -> EXTERN: (2140,10) for_write_seq_fmt
!  -> EXTERN: (2151,18) cosmo_smd_output_
!  -> EXTERN: (2160,16) cosmo_vem_output_
!  -> EXTERN: (2163,15) util_flush_
!  -> EXTERN: (2172,12) print_irrep_occp_
!  -> EXTERN: (2177,16) rtdb_get_
!  -> EXTERN: (2180,11) ga_nodeid_
!  -> EXTERN: (2181,9) for_write_seq_lis
!  -> EXTERN: (2182,9) for_cpystr
!  -> EXTERN: (2184,11) ga_dadd_
!  -> EXTERN: (2185,14) cosmo_charges_from_dmat_
!  -> EXTERN: (2188,11) ga_dadd_
!  -> EXTERN: (2195,14) dimqm_main_
!  -> EXTERN: (2202,11) ga_nodeid_
!  -> EXTERN: (2203,13) util_print_
!  -> EXTERN: (2206,20) util_print_centered_
!  -> EXTERN: (2209,20) util_print_centered_
!  -> EXTERN: (2212,20) util_print_centered_
!  -> EXTERN: (2215,18) output_
!  -> EXTERN: (2216,13) for_write_seq_lis
!  -> EXTERN: (2217,18) util_flush_
!  -> EXTERN: (2225,15) movecs_fix_phase_
!  -> EXTERN: (2226,14) util_print_
!  -> EXTERN: (2230,15) for_cpystr
!  -> EXTERN: (2232,15) for_cpystr
!  -> EXTERN: (2234,15) for_cpystr
!  -> EXTERN: (2237,17) movecs_print_anal_
!  -> EXTERN: (2246,17) rtdb_get_
!  -> EXTERN: (2248,18) dft_nwmolden_
!  -> EXTERN: (2257,18) util_print_centered_
!  -> EXTERN: (2258,13) for_write_seq_lis
!  -> EXTERN: (2259,18) util_flush_
!  -> EXTERN: (2261,15) ga_sync_
!  -> EXTERN: (2263,18) ga_print_
!  -> EXTERN: (2264,18) util_flush_
!  -> EXTERN: (2271,15) fukui_
!  -> EXTERN: (2280,15) dft_mulwrap_
!  -> EXTERN: (2282,19) ga_duplicate_
!  -> EXTERN: (2283,14) errquit_
!  -> EXTERN: (2284,22) dft_header_
!  -> EXTERN: (2286,14) diis_bld12_
!  -> EXTERN: (2287,14) lowd_pop_
!  -> EXTERN: (2289,22) dft_header_
!  -> EXTERN: (2291,15) ga_dadd_
!  -> EXTERN: (2292,15) lowd_pop_
!  -> EXTERN: (2293,15) ga_dadd_
!  -> EXTERN: (2294,15) ga_dscal_
!  -> EXTERN: (2296,19) ga_destroy_
!  -> EXTERN: (2296,39) errquit_
!  -> EXTERN: (2305,17) rtdb_put_
!  -> EXTERN: (2305,65) errquit_
!  -> EXTERN: (2308,17) rtdb_put_
!  -> EXTERN: (2309,10) errquit_
!  -> EXTERN: (2311,17) rtdb_put_
!  -> EXTERN: (2312,10) errquit_
!  -> EXTERN: (2314,17) rtdb_put_
!  -> EXTERN: (2316,10) errquit_
!  -> EXTERN: (2319,17) rtdb_put_
!  -> EXTERN: (2321,10) errquit_
!  -> EXTERN: (2328,18) rtdb_put_
!  -> EXTERN: (2329,10) errquit_
!  -> EXTERN: (2335,16) movecs_write_
!  -> EXTERN: (2338,29) errquit_
!  -> EXTERN: (2343,17) rtdb_get_
!  -> EXTERN: (2346,15) dft_print_evals_ab_
!  -> EXTERN: (2350,20) rtdb_put_
!  -> EXTERN: (2351,15) errquit_
!  -> EXTERN: (2357,15) diis_driver_
!  -> EXTERN: (2365,23) ma_free_heap_
!  -> EXTERN: (2366,18) errquit_
!  -> EXTERN: (2369,23) ma_free_heap_
!  -> EXTERN: (2370,18) errquit_
!  -> EXTERN: (2374,20) ma_free_heap_
!  -> EXTERN: (2375,15) errquit_
!  -> EXTERN: (2380,27) util_print_
!  -> EXTERN: (2381,15) dft_mxspin_ovlp_
!  -> EXTERN: (2386,20) ga_destroy_
!  -> EXTERN: (2386,40) errquit_
!  -> EXTERN: (2388,20) ga_destroy_
!  -> EXTERN: (2388,39) errquit_
!  -> EXTERN: (2390,20) ga_destroy_
!  -> EXTERN: (2390,38) errquit_
!  -> EXTERN: (2397,10) ga_dadd_
!  -> EXTERN: (2401,27) util_print_
!  -> EXTERN: (2403,15) dft_s2_value_
!  -> EXTERN: (2411,16) rtdb_put_
!  -> EXTERN: (2412,18) errquit_
!  -> EXTERN: (2418,27) geom_momint_
!  -> EXTERN: (2419,15) dft_mpole_
!  -> EXTERN: (2424,11) util_print_
!  -> EXTERN: (2425,15) schwarz_print_
!  -> EXTERN: (2428,12) dft_prevals_
!  -> EXTERN: (2434,16) rtdb_get_
!  -> EXTERN: (2436,17) rtdb_get_
!  -> EXTERN: (2438,17) rtdb_get_
!  -> EXTERN: (2441,13) util_file_name_
!  -> EXTERN: (2442,13) dft_vspec_
!  -> EXTERN: (2448,12) movecs_ecce_
!  -> EXTERN: (2452,15) movecs_ecce_
!  -> EXTERN: (2456,12) ecce_print1_
!  -> EXTERN: (2457,12) ecce_print1_
!  -> EXTERN: (2458,12) ecce_print1_
!  -> EXTERN: (2459,12) ecce_print1_
!  -> EXTERN: (2461,15) ecce_print1_
!  -> EXTERN: (2464,16) ma_chop_stack_
!  -> EXTERN: (2465,10) errquit_
!  -> EXTERN: (2468,20) ga_destroy_
!  -> EXTERN: (2468,41) errquit_
!  -> EXTERN: (2473,17) ga_destroy_
!  -> EXTERN: (2473,37) errquit_
!  -> EXTERN: (2475,17) ga_destroy_
!  -> EXTERN: (2475,37) errquit_
!  -> EXTERN: (2479,12) fock_2e_tidy_
!  -> EXTERN: (2482,15) ecce_print_module_exit_
!  -> EXTERN: (2484,15) ecce_print_module_exit_
!  -> EXTERN: (2489,16) ma_chop_stack_
!  -> EXTERN: (2490,10) errquit_
!  -> EXTERN: (2495,17) rtdb_get_
!  -> EXTERN: (2500,10) for_write_seq_lis
!  -> EXTERN: (2501,20) cphf_poliz_
!  -> EXTERN: (2502,15) errquit_
!  -> EXTERN: (2511,16) rtdb_get_
!  -> EXTERN: (2513,24) dft_print_mats_
!  -> EXTERN: (2520,16) rtdb_get_
!  -> EXTERN: (2522,23) dft_save_mats_
!  -> EXTERN: (2525,17) ga_destroy_
!  -> EXTERN: (2525,36) errquit_
!  -> EXTERN: (2527,17) ga_destroy_
!  -> EXTERN: (2527,41) errquit_
!  -> EXTERN: (2530,20) ga_destroy_
!  -> EXTERN: (2530,44) errquit_
!  -> EXTERN: (2536,19) ga_destroy_
!  -> EXTERN: (2536,42) errquit_
!  -> EXTERN: (2541,9) dft_frozemb_fde_end_
!  -> EXTERN: (2548,20) ga_destroy_
!  -> EXTERN: (2548,45) errquit_
!  -> EXTERN: (2552,19) ga_destroy_
!  -> EXTERN: (2552,43) errquit_
!  -> EXTERN: (2556,20) ga_destroy_
!  -> EXTERN: (2556,44) errquit_
!  -> EXTERN: (2563,18) ga_destroy_
!  -> EXTERN: (2563,40) errquit_
!  -> EXTERN: (2565,18) ga_destroy_
!  -> EXTERN: (2565,50) errquit_
!  -> EXTERN: (2568,20) ga_destroy_
!  -> EXTERN: (2568,42) errquit_
!  -> EXTERN: (2570,20) ga_destroy_
!  -> EXTERN: (2570,52) errquit_
!  -> EXTERN: (2577,15) x2c_scf_terminate_
!  -> EXTERN: (2584,15) xc_xdm_cleanup_
!  -> EXTERN: (2588,19) pstat_off_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(4,24):remark #34051: REGISTER ALLOCATION : [dft_scf_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F:4
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm6]
!        
!    Routine temporaries
!        Total         :    5615
!            Global    :     878
!            Local     :    4737
!        Regenerable   :    4183
!        Spilled       :      59
!        
!    Routine stack
!        Variables     :    2456 bytes*
!            Reads     :     243 [2.46e+00 ~ 2.5%]
!            Writes    :     328 [2.53e+00 ~ 2.5%]
!        Spills        :     424 bytes*
!            Reads     :     128 [1.84e+00 ~ 1.8%]
!            Writes    :      91 [9.54e-01 ~ 1.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
5	     &                         iter, g_dens, g_dens_at, g_movecs, g_vxc,
6	     &                         g_fock, g_svecs, svals, g_xcinv, g_s,
7	     &                         lcdft, nconstr)
8	c     
9	c     $Id$
10	c     
11	      implicit none
12	#include "errquit.fh"
13	c
14	      integer rtdb              ! [input]
15	      double precision Etold, Enuc
16	      integer iVcoul_opt
17	      integer iVxc_opt
18	      integer iter
19	      integer g_dens(2), g_movecs(2), g_vxc(4), 
20	     &        g_fock, g_svecs, 
21	     &        g_xcinv
22	      integer g_frozemb
23	c
24	      integer g_dens_at(2) 
25	c
26	      double precision  toll_s
27	      double precision svals(*) ! [in] S evals
28	c     
29	#include "bas.fh"
30	#include "geom.fh"
31	#include "mafdecls.fh"
32	#include "stdio.fh"
33	#include "rtdb.fh"
34	#include "cdft.fh"
35	#include "oep.fh"
36	#include "global.fh"
37	#include "msgids.fh"
38	#include "util.fh"
39	#include "dft_conv.fh"
40	#include "dftps.fh"
41	#include "cosmo.fh"
42	#include "zora.fh"
43	#include "x2c.fh"
44	#include "modelpotential.fh"
45	cold#include "dimqm.fh"
46	c     
47	      Logical movecs_write, movecs_converged, movecs_read
48	      External movecs_write, movecs_converged, movecs_read
49	c
50	      external dft_lindep
51	      integer dft_lindep
52	c
53	      integer g_s ! [in]
54	c
55	      logical use_nwxc,use_dimqm
56	      logical lvan, do_ddl, lbrak, check
57	      double precision dl_conv, dl2, ddl2, x1, x2, fddl, dlold
58	      logical lcdft
59	      integer g_fockv(2)
60	      integer nconstr, ipop, counter_cdft, cdft_maxiter
61	      integer iatms1(max_constr), fatms1(max_constr)
62	      integer iatms2(max_constr), fatms2(max_constr), dtype(max_constr)
63	      integer g_constr(max_constr), g_shalf
64	      integer l_mdiis, k_mdiis, l_hess, k_hess, l_conscr, k_conscr
65	      double precision constr(max_constr), multipliers(max_constr),
66	     $            multipliers0(max_constr)
67	      double precision grad_constr(max_constr)
68	      double precision gold_constr(max_constr),p_constr(max_constr)
69	c
70	      integer ixyz, lxyz
71	      logical oprint
72	      double precision rms(2), derr(2)
73	      integer nmo(2), icall(2), nprint
74	      integer mclosed(2), mopen(2)  ! used for cosmo_charges: used in same way as scf does
75	      integer n3c_dbl, n3c_int, n_batch
76	      integer l_3cwhat, k_3cwhat, l_3cERI, k_3cERI
77	c
78	cc    Jorge Garza/Begin
79	c
80	c     Variables used to obtain the exact exchange-correlation potential
81	c
82	      integer g_rho_exact(2), g_tmp_exact(2), g_addit_exact(2),
83	     &        g_movecs_aux(2)
84	      integer incre, exact_pot, split, n_levels(2), act_levels
85	      double precision lamda, p_lamda, dif_lamda, lamda_old,
86	     &                 Ecoul_aux(2)
87	c
88	      integer test_sic, condfukui, l_degen, i_degen(2)
89	      double precision totsic
90	cc    Jorge Garza/End
91	c     AOR begin
92	      double precision exdm
93	      integer ixdm_v, ixdm_a, ixdm_ml
94	c     AOR end
95	      Integer l_eval
96	      integer k_eval(2)
97	      integer natoms, nTotEl
98	      integer l_occ, k_occ
99	      integer i
100	      integer me, nproc
101	      integer g_tmp, g_tmp2, g_fockt,  g_wght, g_xyz,g_nq
102	      integer nheap, nstack
103	      integer ispin, idone
104	      integer npol
105	      integer leneval
106	      integer lcntoce, icntoce, lcntobfr, icntobfr,
107	     &        lcetobfr, icetobfr, lrdens_atom, irdens_atom
108	      double precision start_wall, current_wall, elapsed_wall,
109	     &                 save_wall, current_cpu, start_cpu,
110	     &                 wall_time_reqd
111	      integer int_wall_time_reqd
112	      double precision pp
113	      double precision anucl_charg, anel
114	      double precision etnew, tol2e, tol2e_sleazy,tdots, edisp
115	c     
116	c     Note, damping, levelshifting, and diising logicals
117	c     are used to turn on/off these procedures per
118	c     iteration.  The alternative logicals nodamping, 
119	c     nolevelshifting, and nodiis are specified and held
120	c     for the entire convergence sequence.
121	c     
122	      Logical  IOLGC, mulliken
123	      logical converged, wght_GA
124	      logical oprint_parm, oprint_conv, oprint_vecs, 
125	     &        oprint_eval, oprint_syma, oprint_time, 
126	     &        oprint_info, oprint_tol, oprint_final_vecs, 
127	     &        oprint_energy_step, oprint_intermediate_fock,
128	     &        oprint_3c2e, oprint_interm_overlap, oprint_interm_S2,
129	     &        oprint_conv_details, oprint_sic,oprintinertia
130	      double precision zero, onem, one
131	      parameter(zero = 0.d0, one = 1.d0, onem = -one)
132	c
133	      integer ilo, ihi          ! For printing movecs analysis
134	c
135	      double precision dft_dencvg, dft_time
136	      external dft_dencvg
137	      integer l_ir, k_ir
138	cc AJL/Begin/FDE
139	c      logical last_time_energy,noscf,frozemb
140	      logical last_time_energy,noscf
141	cc AJL/End
142	      logical fon, reorth
143	      character*7 name
144	      character*4 scftype
145	      character*7 vecs_or_dens
146	      character*255 basis_name, basis_trans,blob
147	
148	      integer nopen, nclosed, g_denso(2),k_tmp,l_tmp,
149	     .     l_gdiis,k_gdiis,ipolmod
150	      logical dft_mem3c
151	      external dft_mem3c
152	c !!! BGJ
153	      logical cphf_poliz, do_poliz
154	      external cphf_poliz
155	c !!! BGJ
156	c
157	c     ----- cosmo -----
158	c
159	      logical odbug
160	      logical ocosmo_got_gasphase
161	      double precision egas
162	      double precision esol
163	      double precision ecosmo ! intra cosmo charges energy
164	      logical cosmo_esp
165	      character*(255) cosmo_file
166	c
167	c     slow switching of annealing
168	c
169	      double precision smear_in,ss,dft_rabuck,pstrace
170	      integer n_dep
171	      integer n_rabuck
172	      logical rabuck_act,spinset
173	      external dft_rabuck
174	c
175	      integer g_focks(2)
176	      double precision nel_fon(4)
177	      integer nmo_fon(4), ncore_fon(2)
178	      integer g_movad,nmo_adapt(2),
179	     ,     ncanorg,g_gmovecs(2)
180	      logical gotsmear,quickguess,diisreset
181	      logical llldb,llldb_out,util_statldb,staticguess
182	      external util_statldb
183	      integer ndisrst
184	c
185	c     vdw contrib
186	      double precision dum
187	      logical xc_chkdispauto
188	      external xc_chkdispauto
189	      logical disp
190	c
191	c     == zora related ==
192	      logical dft_zora_read, dft_zora_write, dft_zora_inquire_file
193	      external dft_zora_read, dft_zora_write, dft_zora_inquire_file
194	      character*255 zorafilename
195	      integer g_zora_scale_sf(2)
196	      double precision ener_scal
197	      integer icalczora
198	      logical ofinite,status,Knucl ! FA-added-09-26-11
199	c
200	c     virtual spectrum
201	      logical lvspec
202	      integer owstart(2), owend(2)
203	      character*255 vspecfilename
204	c
205	c     timings 
206	      double precision time1,time2
207	
208	c     for Gaussian Nuclear Model
209	      integer iatom,l_zetanuc, k_zetanuc
210	      external get_zetanuc_arr
211	      integer dft_nonzvecs
212	      external dft_nonzvecs
213	c -----FA: 04-21-11: for Gaussian Nuclear Model --- END
214	
215	c ... jochen: MO analysis print threshold
216	      double precision tanalyze
217	cc     AJL/Begin/FDE
218	      integer g_vxc_fde(4)
219	      integer g_xcinv_fde
220	      integer g_dens_fde(2)
221	      logical ldimqm, dimqm_go
222	      double precision edimqm
223	      double precision eelec
224	cc     AJL/End
225	c
226	      gotsmear(ss)=abs(ss).gt.1d-9
227	c
228	c ... exact decoupling and other relativistic Hamiltonians
229	      integer g_rel(2)
230	      integer  g_x2c_u(2), g_x2c_u2c, g_x2c_c2u
231	c
232	c     misc
233	c
234	      logical debug_fon
235	      logical do_zora_recalc, zora_recalc
236	      external zora_recalcc
237	      logical x2c_noatm
238	      external x2c_noatm
239	
240	c MN solvation models -->
241	c
242	      double precision gcds, gspol, espol, gspoldyn, gspolneq
243	      double precision gstote, estote
244	      integer do_cosmo_vem, istep_cosmo_vem
245	      logical do_cosmo_smd
246	
247	C     RTDB flag for printing out all matrices
248	      logical lprint_mats  !print matrices to stdout?
249	      logical lsave_mats   !save matrices to file?
250	      logical molden, forceatguess, save_evals, densmat
251	      character*256 file_mat1
252	      integer ma_type, no_sflip,l_at_flip,k_at_flip
253	      character*26 date
254	
255	c     == initialize DIIS call counter ==
256	      icall(1) = 0
257	      icall(2) = 0
258	c
259	      gcds = 0.d0
260	      do_cosmo_vem = 0
261	      istep_cosmo_vem = 0
262	      do_cosmo_smd = .false.
263	      if (cosmo_on) then
264	       if (.not. rtdb_get
265	     $ (rtdb,'cosmo:do_cosmo_vem',mt_int,1,do_cosmo_vem))
266	     $  call errquit(
267	     $  'dft_scf: cannot get do_cosmo_vem from rtdb',
268	     $  0,rtdb_err)
269	       if (.not. rtdb_get
270	     $ (rtdb,'cosmo:istep_cosmo_vem',mt_int,1,istep_cosmo_vem))
271	     $  call errquit(
272	     $  'dft_scf: cannot get istep_cosmo_vem from rtdb',
273	     $  0,rtdb_err)
274	       if (.not. rtdb_get
275	     $ (rtdb,'cosmo:do_cosmo_smd',mt_log,1,do_cosmo_smd))
276	     $ call errquit('
277	     $ dft_scf: cannot get do_cosmo_smd from rtdb',
278	     $ 0,rtdb_err)
279	       if (do_cosmo_smd) then
280	         if (.not. rtdb_get
281	     $   (rtdb,'cosmo:gcds',mt_dbl,1,gcds))
282	     $    call errquit(
283	     $    'dft_scf: cannot get gcds from rtdb',
284	     $    0,rtdb_err)
285	       endif
286	      endif
287	c
288	c <-- MN solvation models
289	c
290	c     =========================================================================
291	c
292	c
293	      k_3cERI  = 0
294	      k_3cwhat = 0
295	c
296	      call ecce_print_module_entry('dft')
297	      dft_scf = .false.
298	      ocosmo_got_gasphase = .false.
299	      lmaxov_sv = lmaxov
300	      oprint = util_print('information', print_low)
301	      oprint_info = util_print('common', print_debug)
302	      oprint_parm = util_print('parameters', print_default)
303	      oprint_3c2e = util_print('3c 2e integrals', print_default)
304	      oprint_conv = util_print('convergence', print_default)
305	      oprint_conv_details = util_print('convergence details', 
306	     &                                 print_high)
307	      oprint_vecs = util_print('intermediate vectors', print_high)
308	      oprint_eval = util_print('intermediate evals', print_high)
309	      oprint_syma = util_print('interm vector symm', print_high)
310	      oprint_time = util_print('dft timings', print_high)
311	      oprint_tol = util_print('screening parameters', print_high)
312	      oprint_energy_step = util_print('intermediate energy info',
313	     &                                print_high)
314	      oprint_intermediate_fock = util_print('intermediate fock matrix',
315	     &                                      print_high)
316	      oprint_interm_S2 = util_print('intermediate S2',print_high)
317	      oprint_interm_overlap = util_print('intermediate overlap',
318	     &                                      print_high)
319	      oprint_final_vecs = util_print('final vectors', print_high)
320	      oprint_sic = util_print('SIC information', print_high)
321	      oprintinertia = util_print('inertia', print_default).and.
322	     . ga_nodeid().eq.0
323	      odbug = util_print('cosmo', print_high)
324	
325	      me = ga_nodeid()
326	      nproc = ga_nnodes()
327	
328	c     ---------------------------------------------------------
329	c     check which relativistic Hamiltonian (if any) we're using
330	c     and write some information to the output.
331	c     comment: Niri's zora implementation added an array g_zora_sf
332	c     to the Fock matrix in dft_fockbld. This array contains
333	c     T(rel) - T(nrel). The nonrelativistic kinetic energy is always
334	c     added to the Fock matrix in dft_fockbld. 
335	c     I changed the array name for g_zora_sf to g_rel and use
336	c     it now for both methods. 
337	c     ---------------------------------------------------------
338	
339	
340	c     make sure we don't use zora, x2c, or another
341	c     two-component relativistic method at the same time
342	
343	      if (do_zora .and. do_x2c) then
344	        call errquit ('dft_scf: zora and x2c options conflict',
345	     &     666, INPUT_ERR)
346	      end if
347	
348	c     write output about the relativistic treatment
349	
350	      if (do_zora) then
351	        if (me.eq.0) write (luout,*) 'dft: using ZORA'
352	      end if
353	      if (do_x2c) then
354	        if (me.eq.0) write (luout,*) 'dft: using X2C'
355	      end if
356	
357	      call x2c_scf_init(rtdb)
358	
359	c
360	c !!! BGJ
361	c     Store SCF hamiltonian type as DFT for use in BGJ routines
362	      if (.not. rtdb_put(rtdb, 'bgj:scf_type', MT_INT, 1, 2))
363	     $     call errquit('dft_scf: put of bgj:scf_type failed',0,
364	     &       RTDB_ERR)
365	c !!! BGJ
366	c
367	c     check if smearing is on
368	c
369	      ssmear=0.d0
370	      delta=1d99
371	      derr(1)=1d99
372	      derr(2)=1d99
373	      n_rabuck=0
374	      rabuck_act=.false.
375	      if (.not.rtdb_get(rtdb, 'dft:diisreset', mt_int, 1,
376	     &   ndisrst))ndisrst=9999
377	cold  diisreset=.false.
378	      if(ndisrst.gt.0) diisreset=.true.
379	      if (.not.rtdb_get(rtdb, 'dft:spinset', mt_log, 1,
380	     &   spinset))spinset=.true.
381	      if (rtdb_get(rtdb, 'dft:smear_sigma', mt_dbl, 1,
382	     &   ssmear))then
383	         if (rtdb_get(rtdb, 'dft:n_rabuck', mt_int, 1,
384	     &        n_rabuck))then
385	            smear_in=ssmear
386	c     
387	c n_rabuck=1 gives  a 1/0 
388	c     
389	            if(n_rabuck.ne.0) then
390	               spinset=.true.
391	               n_rabuck=max(n_rabuck,2)
392	            endif
393	         endif
394	      endif
395	c
396	c     check for FON in rtdb:
397	      if (rtdb_get(rtdb, 'dft:fon', mt_log, 1, fon)) then
398	
399	        if (.not.fon) call errquit(
400	     &     'dft_scf: fon stored in RTDB but not .true.', 1,
401	     &     RTDB_ERR)
402	
403	      if (.not.rtdb_get(rtdb, 'dft:nmo_fon', mt_int, 4,
404	     & nmo_fon)) call errquit('dft_scf: rtdb_get failed', 2300,
405	     &       RTDB_ERR)
406	      if (.not.rtdb_get(rtdb, 'dft:ncore_fon', mt_int, 2,
407	     & ncore_fon)) call errquit('dft_scf: rtdb_get failed', 2300,
408	     &       RTDB_ERR)
409	      if (.not.rtdb_get(rtdb, 'dft:nel_fon', mt_dbl, 4,
410	     & nel_fon)) call errquit('dft_scfp: rtdb_get failed', 2301,
411	     &       RTDB_ERR)
412	      if (rtdb_get(rtdb, 'dft:debugfon', mt_log, 1,
413	     &   debug_fon)) continue
414	
415	      else
416	         fon=.false.
417	         debug_fon = .false.
418	      endif
419	
420	c     read MO analysis threshold
421	      if (.not.rtdb_get(rtdb,'movecs:tanalyze',MT_DBL,1,tanalyze))
422	     &   tanalyze = 0.025d0
423	
424	
425	c
426	      if (.not.rtdb_get(rtdb, 'dft:reorth', mt_log, 1,
427	     &   reorth))reorth=.false.
428	c
429	c     see if levelshifting monitoring is desired
430	c
431	      if (.not. rtdb_get(rtdb, 'dft:check_shift', mt_log, 1,
432	     &   check_shift))then
433	         check_shift = .false.      
434	      endif
435	c     
436	      if (.not. geom_ncent(geom, natoms))
437	     &   call errquit('dft_scf: geom_ncent failed',73, GEOM_ERR)
438	      if (.not. geom_nuc_charge(geom, anucl_charg))
439	     &   call errquit('dft_scf: geom_nuc_charge failed', 0, GEOM_ERR)
440	c     
441	      anel = int(anucl_charg) - rcharge
442	c
443	c     Pre-compute mapping vectors
444	c 
445	      if (.not.ma_push_get
446	     &   (mt_int,nshells_ao,'cntoce map',lcntoce,icntoce))
447	     &   call errquit('dft_scf:push_get failed', 13, MA_ERR)
448	      if (.not.ma_push_get
449	     &   (mt_int,nshells_ao*2,'cntoce map',lcntobfr,icntobfr))
450	     &   call errquit('dft_scf:push_get failed', 13, MA_ERR)
451	      if (.not.ma_push_get
452	     &   (mt_int,natoms*2,'cntoce map',lcetobfr,icetobfr))
453	     &   call errquit('dft_scf:push_get failed', 13, MA_ERR)
454	c     
455	      call build_maps(ao_bas_han, int_mb(icntoce), int_mb(icntobfr), 
456	     &                int_mb(icetobfr), natoms, nshells_ao)
457	
458	      if (.not. rtdb_get(rtdb, 'dft:noc', mt_int, 2, noc))
459	     &   call errquit('dft_scf: rtdb_get of noc failed', 0, RTDB_ERR)
460	      if (.not. MA_Push_Get(MT_Dbl,nbf_ao*ipol,'mo occ',l_occ,k_occ))
461	     &   call errquit('dft_scf: failed to alloc',999, MA_ERR)
462	c
463	c     get/set orbital overlap tolerancec
464	
465	      call util_tolls(rtdb,oprint_conv_details,toll_s,n_dep,
466	     .     svals,nbf_ao)
467	      nmo(1)=nbf_ao
468	      if (ipol.eq.1)then
469	c     
470	c        noc(1) = No. of electrons alpha
471	c     
472	         nTotEl = 2*noc(1)
473	         mclosed(1)=noc(1)
474	         mopen(1)=0
475	      else
476	c     
477	         nTotEl = noc(1) + noc(2)
478	         nmo(2) = nmo(1)
479	         mclosed(1)=0
480	         mclosed(2)=0
481	         mopen(1)=noc(1)
482	         mopen(2)=noc(2)
483	      endif
484	c
485	c     AOR begin
486	      call xc_xdm_init(rtdb,ixdm_v,ixdm_ml)
487	c     AOR end
488	c    Jorge Garza/Begin
489	      call xc_sicinit(rtdb, test_sic, condfukui, exact_pot,
490	     &                l_degen, i_degen, noc, act_levels)
491	c     Jorge Garza/End
492	      use_nwxc = util_module_avail("nwxc")
493	      if (use_nwxc) then
494	         call nwxc_getvals("nwxc_is_on",use_nwxc)
495	      endif
496	      use_dimqm = util_module_avail("dimqm")
497	      if (use_dimqm) then
498	         call dimqm_init(rtdb)
499	         call dimqm_used(ldimqm)
500	         call dimqm_getgo(dimqm_go)
501	      else
502	         ldimqm=.false.
503	         dimqm_go=.false.
504	         edimqm=0d0
505	      endif
506	c
507	c     Set aside some memory for reduced density matrix
508	c
509	      ipolmod=ipol
510	      if(test_sic.ne.0) ipolmod=2
511	      if (.not.MA_Push_Get(MT_Dbl,ipolmod*natoms*natoms,'rdens_atom',
512	     &   lrdens_atom,irdens_atom))
513	     &   call errquit('dft_scf: cannot allocate rdens_atom',0, MA_ERR)
514	c     
515	c     determine pattern of orbitals' occupancy
516	c     
517	      if (ipol .eq. 1)then
518	c
519	c        RHF occupations
520	c
521	         call dfill(nbf_ao, 0.0d0, dbl_mb(k_occ), 1)
522	         do i = 1, noc(1)
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(522,10)
!   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 4 
!   remark #15477: vector cost: 2.500 
!   remark #15478: estimated potential speedup: 1.000 
!   remark #15488: --- end vector cost summary ---
!   remark #25439: unrolled with remainder by 2  
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(522,10)
!<Remainder>
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
523	            dbl_mb(i-1+k_occ) = 2.0d0
524	         enddo
525	      else  
526	c
527	c        UHF occupations
528	c
529	         call dfill(2*nbf_ao, 0.0d0, dbl_mb(k_occ), 1)
530	         do i = 1, noc(1)
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(530,10)
!   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 4 
!   remark #15477: vector cost: 2.500 
!   remark #15478: estimated potential speedup: 1.000 
!   remark #15488: --- end vector cost summary ---
!   remark #25439: unrolled with remainder by 2  
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(530,10)
!<Remainder>
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
531	            dbl_mb(i-1+k_occ) = 1.0d0
532	         enddo
533	         do i = nbf_ao+1, nbf_ao+noc(2)
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(533,10)
!   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 4 
!   remark #15477: vector cost: 2.500 
!   remark #15478: estimated potential speedup: 1.000 
!   remark #15488: --- end vector cost summary ---
!   remark #25439: unrolled with remainder by 2  
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(533,10)
!<Remainder>
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
534	            dbl_mb(i-1+k_occ) = 1.0d0
535	         enddo
536	      endif 
537	c     
538	      wght_GA = .false.
539	c     
540	c     Determine whether to fit the electronic charge density.
541	c     
542	      CDFIT = .FALSE.
543	      if (iVcoul_opt.eq.1)CDFIT = .TRUE.
544	      XCFIT = .FALSE.
545	      if (iVxc_opt.eq.1)XCFIT = .TRUE.
546	c     
547	c     Define various constants.
548	c     
549	      npol = (ipol*(ipol+1))/2
550	c     
551	      itol_max = itol2e
552	      iaoacc_max = iaoacc
553	      tol_rho_max = tol_rho
554	      if (oprint_time)
555	     &     call dft_tstamp(' Before 3c-2e initialize.')
556	c
557	      mulliken = .false.
558	      if (imull.eq.1)mulliken = .true.
559	      IOLGC = .TRUE.
560	      if (noio.eq.1)IOLGC = .FALSE.
561	c     
562	c     Energy decomposition switch
563	c     
564	      nExc    = idecomp + 1
565	      Etnew = 0.d0
566	      tdots = 0d0
567	c
568	c     vdw  bit
569	c
570	c     activate disp if is present in rtdb
571	c     or include dispersion if this a functional that includes dispersion
572	c
573	      Edisp = 0.0d0
574	      if (.not.rtdb_get(rtdb, 'dft:disp', mt_log, 1, disp))
575	     &   disp=.false.
576	c
577	      if(disp.or.xc_chkdispauto())
578	     &      call xc_vdw(rtdb,geom,Edisp,dum,'energy')
579	c     
580	c     == scf energy convergence criterion ==
581	      if (.not. ga_duplicate(g_fock, g_tmp, 'tmp matrix'))
582	     &  call errquit('dft_scf:failed duplicate',g_fock, GA_ERR)
583	      if (.not. ga_duplicate(g_fock, g_focks(1), ' alpha fock'))
584	     &  call errquit('dft_scf:failed duplicate',g_fock, GA_ERR)
585	c
586	c MN solvation models -->
587	c
588	c     for VEM calculations if istep_cosmo_vem=2
589	c
590	      if (istep_cosmo_vem.eq.2) nodiis=.true.
591	      if (istep_cosmo_vem.eq.2) nolevelshifting=.true.
592	c
593	c <-- MN solvation models
594	c
595	c     == set up local convergence parameters ==
596	      diising = diis
597	      damping = damp
598	      levelshifting = levelshift
599	      keep_damp_on = .false.
600	      keep_levl_on = .false.
601	      keep_diis_on = .false.
602	      ndamp_input = ndamp
603	      rlshift_input = rlshift
604	      ndamp_def = 0
605	      rlshift_def = 0.0
606	      rlshift = rlshift_def
607	c     
608	      if (nodamping)damping = .false.
609	      if (nolevelshifting) then 
610	        levelshifting = .false.
611	        rlshift = rlshift_def
612	      endif
613	c
614	c     init diis handles to detect allocation
615	c
616	      k_gdiis=-1
617	      k_mdiis=-1
618	      k_hess=-1
619	      
620	      if (nodiis)then
621	         diising = .false.
622	      else
623	         if (.not.MA_alloc_Get(MT_int,nfock*ipol*2,
624	     ,        'ga handle for diis',l_gdiis,k_gdiis))
625	     ,        call errquit('dft_scf: cannot allocate g_diis',0, MA_ERR)
626	         if(nconstr.ne.0) then
627	            if (.not.MA_alloc_Get(MT_DBL,nfock*nconstr,
628	     ,           'ga handle for mdiis',l_mdiis,k_mdiis))
629	     ,           call errquit('dft_scf: cannot allocate mdiis',0,MA_ERR)
630	            if (.not.MA_alloc_Get(MT_DBL,max(nfock,nconstr)*nconstr,
631	     ,           'ga handle for hess',l_hess,k_hess))
632	     ,           call errquit('dft_scf: cannot allocate hess',0, MA_ERR)
633	         endif
634	      endif
635	
636	      homo_lumo_gap = 200.0d0
637	      if (ncydp.ne.0)then
638	         damping = .true. 
639	         ndamp = ndamp_input
640	      endif
641	      if (ncysh.ne.0)then
642	         levelshifting = .true.
643	         rlshift = rlshift_input
644	      endif
645	      if (ncyds.ne.0)then
646	         diising = .true.
647	      endif
648	c     
649	c     
650	c     == Begin the SCF cycle ==
651	c     
652	c     == allocate eigenvalue array, including second pointer to beta block ==
653	      leneval = nbf_ao * ipol
654	      if (.not.MA_Push_Get(MT_Dbl,leneval,'eval',l_eval,k_eval(1)))
655	     &     call errquit('dft_scf: cannot allocate eval',0, MA_ERR)
656	      if (ipol .eq. 2)then  
657	         k_eval(2) = k_eval(1) + nbf_ao
658	      endif 
659	c     
660	c     == dump DFT parameters (if debugging) to see if they make sense ==
661	      if (me.eq.0.and.oprint_info)call dft_dump_info(me)
662	
663	      if (ipol.eq.1)then
664	         scftype = 'RHF'
665	      elseif (ipol.eq.2)then
666	         scftype = 'UHF'
667	      endif
668	c
669	c     == needed for dftmp2 ==
670	      if (.not. rtdb_cput(rtdb,'scf:scftype', 1, scftype))
671	     &   call errquit('dft_scf: rtdb_cput scftype failed', 0, RTDB_ERR)
672	c
673	c     == allocate array for irreps ==
674	      if (.not.MA_Push_Get(mt_int,ipol*nbf_ao,'dft:irreps',l_ir,k_ir))
675	     &   call errquit('dft_scf: cannot allocate irreps',0, MA_ERR)
676	      call ifill(ipol*nbf_ao,1,int_mb(k_ir),1)
677	      nopen = mult - 1
678	      nclosed = (nTotEl - nopen) / 2
679	      if (.not. rtdb_put(rtdb,'scf:nclosed', mt_int, 1, nclosed))
680	     &   call errquit('dft_scf: rtdb_put nclosed failed', 0, RTDB_ERR)
681	c
682	      if (.not. bas_name(ao_bas_han, basis_name, basis_trans))
683	     $     call errquit('dft_scf: bas_name?', 0, BASIS_ERR)
684	c
685	c     == get info for int2e_ and set sleazy tolerance ==
686	      if (.not.rtdb_get(rtdb,'dft:tol2e_sleazy',
687	     ,     mt_dbl,1,tol2e_sleazy)) tol2e_sleazy = 1.d-4
688	      call scf_get_fock_param(rtdb, tol2e_sleazy)
689	c
690	c     == force sleazy SCF into "direct" mode ==
691	      call fock_force_direct(rtdb)
692	c
693	c     -------------------------------------------
694	c     calculate superposition of atomic densities
695	c     if ZORA or X2C functionality is requested
696	c     -------------------------------------------
697	
698	      if ((do_zora .or. do_x2c) .and. .not.x2c_noatm()) then
699	        call ga_zero(g_dens_at(1))
700	        if (ipol.gt.1) call ga_zero(g_dens_at(2))
701	        call guess_dens(rtdb, geom, ao_bas_han, g_dens_at)
702	        call dft_quickguess(ipol,nbf_ao,g_dens_at,oskel,
703	     N     ntotel,nclosed,
704	     D     .false.)
705	      else if (do_x2c .and. x2c_noatm()) then
706	        call ga_zero(g_dens_at(1))
707	        if (ipol.gt.1) call ga_zero(g_dens_at(2)) 
708	      end if                    ! do_zora .or. do_x2c
709	c
710	c     == get atomic zora contributions ==
711	      if (.not.rtdb_get(rtdb,'zora',mt_log,1,do_zora)) do_zora = .false.
712	c
713	      if (do_zora) then
714	        if (me.eq.0) then
715	         call util_print_centered(LuOut,
716	     $        'Performing ZORA calculations', 23, .true.)
717	         write(LuOut,*)
718	        endif
719	c
720	c       == get filename for the zora data ==
721	        call util_file_name('zora_sf',.false.,.false.,zorafilename)
722	c
723	c       == zora arrays ==
724	        if(.not.ga_duplicate(g_vxc(1),g_rel(1),'sf 1'))
725	     &     call errquit('dft_scf: ga_duplicate failed',1, GA_ERR)
726	        call ga_zero(g_rel(1))
727	        if(ipol.gt.1) then
728	         if(.not.ga_duplicate(g_vxc(2),g_rel(2),'sf 2'))
729	     &     call errquit('dft_scf: ga_duplicate failed',1, GA_ERR)
730	           call ga_zero(g_rel(2))
731	        endif
732	c
733	c       == zora energy scaling arrays ==
734	        if(.not.ga_duplicate(g_vxc(1),g_zora_scale_sf(1),'scale 1'))
735	     &     call errquit('dft_scf: ga_duplicate failed',1, GA_ERR)
736	        call ga_zero(g_zora_scale_sf(1))
737	        if(ipol.gt.1) then
738	         if(.not.ga_duplicate(g_vxc(2),g_zora_scale_sf(2),'scale 2'))
739	     &     call errquit('dft_scf: ga_duplicate failed',1, GA_ERR)
740	           call ga_zero(g_zora_scale_sf(2))
741	        endif
742	c
743	c       == create g_zora_Kinetic array ==
744	        do i=1,ipol
745	        if(.not.ga_duplicate(g_vxc(i),g_zora_Kinetic(i),'sf 1'))
746	     &   call errquit('dft_scf: ga_duplicate failed',1, GA_ERR)
747	         call ga_zero(g_zora_Kinetic(i))
748	        enddo
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(748,9)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
749	c
750	c       == in case fon is used together with zora ==
751	c       pstrace is queried in the grid code ==
752	        if (fon) then
753	          pstrace=ga_ddot(g_dens_at,g_s)
754	          if (.not. rtdb_put(rtdb, 'dft:pstrace', mt_dbl, 1, pstrace))
755	     &       call errquit('dft_scf: rtdb_put pstrace failed',
756	     &       1, RTDB_ERR)
757	        endif ! fon
758	c
759	c       == try reading the zora atomic corrections from file ==
760	        icalczora = 0  ! initialize the flag
761	        if (.not.dft_zora_read(zorafilename, nbf_ao, ipol, nmo,
762	     &            mult, g_rel, g_zora_scale_sf)) icalczora = 1
763	c
764	c       check if zora corrections have to recalculated
765	        do_zora_recalc = zora_recalc(rtdb)
766	        if (do_zora_recalc) then
767	           icalczora = 1
768	           if (me.eq.0) then
769	              write(luout,*) "Forcing recalculation of ZORA corrections"
770	           endif
771	        endif
772	c
773	c       == calculate the zora spin-free atomic corrections ==
774	        if (icalczora.eq.1) then 
775	         if (me.eq.0) then
776	           call util_print_centered(LuOut,
777	     $        'Generating atomic ZORA corrections', 23, .true.)
778	           write(LuOut,*)
779	         endif
780	c
781	c------- FA-code-added-09-26-11 --------------------------- START
782	c ------ Read Knucl   for including ONLY nuclear part in K ZORA ----- START
783	c Note.- stored in rel_input.F(rel_input(rtdb))
784	         Knucl=.false.
785	         status=rtdb_get(rtdb,'zora:Knucl',mt_log,1,Knucl) ! Check if gaussian nucl model requested
786	         if (ga_nodeid().eq.0)
787	     &     write(*,*) 'In dft_scf:: zora:Knucl=',Knucl
788	c
789	c        read modelpotential flag
790	         use_modelpotential = .false.
791	         if (.not. rtdb_get(rtdb, 'modelpotential', mt_log, 1,
792	     &          use_modelpotential)) use_modelpotential = .false.
793	c
794	c ------ Read Knucl   for including ONLY nuclear part in K ZORA ----- END
795	c ------ Read ofinite to be used by HFine finite calc ---FA-03-21-11-- START
796	c Note.- stored in geom_input.F (geom_input(rtdb))
797	         ofinite=.false.
798	         status=rtdb_get(rtdb,'prop:ofinite',mt_log,1,ofinite) ! Check if gaussian nucl model requested
799	c ------ Read ofinite to be used by HFine finite calc ---FA-03-21-11-- END
800	         if (.not.ma_alloc_get(mt_dbl,natoms,
801	     &                  'zetanuc',l_zetanuc,k_zetanuc))
802	     &   call errquit('dft_scf: ma failed',0,MA_ERR)
803	         call get_zetanuc_arr(geom,natoms,dbl_mb(k_zetanuc)) !  zetanuc_arr(i) i=1,natoms
804	         do iatom = 1,natoms ! == loop over the atoms ==
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(804,10)
!   remark #15300: LOOP WAS VECTORIZED
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 47 
!   remark #15477: vector cost: 20.000 
!   remark #15478: estimated potential speedup: 2.000 
!   remark #15488: --- end vector cost summary ---
!   remark #25015: Estimate of max trip count of loop=1
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(804,10)
!<Remainder loop for vectorization>
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
805	c           if (ga_nodeid().eq.0)
806	c     &       write(*,11) iatom,dbl_mb(k_zetanuc+iatom-1)
807	c 11          format('In dft_scf:: zetanuc_arr(',i3,')=',f35.8)
808	           dbl_mb(k_zetanuc+iatom-1)=dsqrt(dbl_mb(k_zetanuc+iatom-1)) !  Calc sqrt(zetanuc)
809	          enddo ! end-loop-iatom
810	c------- FA-code-added-09-26-11 --------------------------- END
811	         call zora_getv_sf(rtdb, g_dens_at, g_rel,g_zora_scale_sf,
812	     &                     ofinite,dbl_mb(k_zetanuc),
813	     &                     Knucl, nexc)
814	         if (.not. MA_free_heap(l_zetanuc))  call errquit
815	     &           (' dft_scf:cannot popstack',111, MA_ERR)
816	c
817	c       == write out the atomic zora corrections to file ==
818	        if (.not.dft_zora_write(rtdb, ao_bas_han, zorafilename,
819	     &   nbf_ao, ipol, nmo, mult, g_rel, g_zora_scale_sf))
820	     &   call errquit('dft_scf: dft_zora_write failed', 0, DISK_ERR)
821	        end if   ! icalczora
822	c
823	c       == NOTE.-Storing g_zora_Kinetic to be used in rohf_fock.F ==
824	c       == for cphf routine - FA-11-08-10 ==
825	c       == -> g_zora_Kinetic is defined in zora.fh ==
826	        do i=1,ipol
827	          call ga_copy(g_rel(i),g_zora_Kinetic(i))
828	        enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(828,9)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
829	      end if  ! do_zora
830	c
831	c     -------------------------------------------------
832	c     set up an exact decoupling Hamiltonian (optional)
833	c     -------------------------------------------------
834	
835	      if (do_x2c) then
836	        if (me.eq.0) write (luout,*) 'allocating g_x2c',nbf_ao
837	
838	        if(.not.ga_duplicate(g_vxc(1),g_rel(1),'x2c 1'))
839	     &     call errquit('dft_scf: ga_duplicate failed',666, GA_ERR)
840	        call ga_zero(g_rel(1))
841	
842	        if (me.eq.0) write (luout,*) 'calling calc_x2c_1e_scalar'
843	
844	c       note: g_vxc is used as temp array in the numerical
845	c       integration routines.
846	c       g_x2c_u2c is created in the x2c routine and survives
847	c       if keepU=.T. Same for the transformation matrices g_xc_u(:).
848	c       optionally, g_x2c_c2u is also allocated and kept.
849	
850	        call calc_x2c_1e_scalar_ga(rtdb, 
851	     &    nexc, g_dens_at, g_vxc, g_rel(1), g_x2c_u,
852	     &    g_x2c_u2c, g_x2c_c2u, toll_s)
853	
854	
855	        if (ipol.gt.1) then
856	          if(.not.ga_duplicate(g_vxc(2),g_rel(2),'x2c 2'))
857	     &     call errquit('dft_scf: ga_duplicate failed',1, GA_ERR)
858	          call ga_copy(g_rel(1),g_rel(2))
859	        end if
860	        
861	
862	      end if                    ! do_x2c
863	c
864	c     == determine guess ==
865	      if(.not.rtdb_get(rtdb,'forceatguess',mt_log,1,forceatguess)) 
866	     .     forceatguess=.false.
867	      if(forceatguess) movecs_in='atomic'
868	      call dft_guessin(movecs_in,ldmix,ncanorg,fon,
869	     ,     vecs_or_dens,
870	     ,     ipol,nbf_ao,g_movecs,g_gmovecs,
871	     ,     toll_s,svals)
872	      if(.not.rtdb_get(rtdb,'dft:densmat',mt_log,1,densmat))
873	     D     densmat=.false.
874	      if(densmat) goto 2022
875	c
876	c     == better have static ldb at high node counts ==
877	      if (odftps) call pstat_on(ps_guess)
878	      if (.not.rtdb_get(rtdb,'dft:staticguess',
879	     ,     mt_log,1,staticguess)) staticguess=.false.
880	      if(staticguess) llldb=util_statldb(.true.,rtdb)
881	      call scf_vectors_guess(rtdb, tol2e_sleazy, geom, ao_bas_han, 
882	     &                       basis_trans, movecs_in, movecs_out, 
883	     &                       movecs_guess, scftype, nclosed, nopen, 
884	     &                       nbf, nmo, noc(1), noc(2),  k_eval, k_occ, 
885	     &                       k_ir, g_gmovecs, g_dens, vecs_or_dens, 
886	     &                       'dft', title, oskel, oadapt, 
887	     &                       .true.) 
888	      if(staticguess) llldb_out=util_statldb(llldb,rtdb)
889	      call dft_guessout(nmo,nbf_ao,g_gmovecs,g_movecs,ipol)
890	      if (me.eq.0.and.oprint)
891	     &     write(LuOut,'(2x," Time after variat. SCF: ",f8.1)')
892	     &     util_wallsec()
893	      if (odftps) call pstat_off(ps_guess)
894	2022  continue
895	      if(.not.rtdb_get(rtdb,'quickguess',mt_log,1,quickguess)) 
896	     .     quickguess=.false.
897	      if(quickguess.and.movecs_in.eq.'atomic') then
898	        if(.not.rtdb_put(rtdb,'quickguess',mt_log,1,.false.)) 
899	     .       call errquit(' dftscf: rtbd_put failed ',0,RTDB_ERR)
900	        if (.not. rtdb_cput(rtdb, 'dft:input vectors', 1, movecs_out))
901	     $       call errquit('dft_scf: DFT MO vectors not defined',0,
902	     &                     RTDB_ERR)
903	        if (.not. rtdb_cput(rtdb, 'dft:output vectors', 1, movecs_out))
904	     $       call errquit('dft_scf: DFT MO vectors not defined',0,
905	     &                     RTDB_ERR)
906	      call dft_quickguess(ipol,nbf_ao,g_dens,oskel,
907	     N     ntotel,nclosed,
908	     D     densmat)
909	        goto 1789
910	      endif
911	      if(oskel) then
912	        call ga_symmetrize(g_dens(1))
913	        if(ipol.eq.2) call ga_symmetrize(g_dens(2))
914	      endif
915	
916	      if(ldmix) then
917	        tdots=0.d0
918	        call dft_densm(g_dens, g_movecs, 
919	     &       nbf_ao, nmo, ipol, 
920	     &       geom, AO_bas_han,noc,ntotel,
921	     &       Dbl_MB(k_eval(1)),dbl_mb(k_occ),
922	     &       ssmear,tdots,iter,.false.,
923	     .       fon, nel_fon,nmo_fon,ncore_fon,
924	     .       spinset.or.n_rabuck.ne.0,
925	     &       rtdb)
926	c
927	c ... jochen: next line added '.or. fon' which
928	c       gives us the number of electrons created by the
929	c       fractional occupations:
930	
931	        if(oprint_info .or. fon) then
932	          pstrace=ga_ddot(g_dens,g_s)
933	          if(ga_nodeid().eq.0) then
934	            write(luout,'(5x,a)') 'FON applied'
935	            write (luout,'(5x,a,1x,2pe15.7)')
936	     &         'tr(P*S): ',pstrace 
937	          end if
938	          if (.not. rtdb_put(rtdb, 'dft:pstrace', mt_dbl, 1, pstrace))
939	     &       call errquit('dft_scf: rtdb_put pstrace failed',
940	     &       1, RTDB_ERR)
941	        endif
942	c
943	c       Jorge Garza/Begin/Exact_pot
944	c
945	        if (exact_pot.eq.1) then
946	          call open_xc_exact_pot(g_rho_exact, g_tmp_exact,
947	     &                           g_addit_exact, g_movecs_aux,
948	     &                           g_dens, dif_lamda, lamda,
949	     &                           p_lamda, lamda_old, Ecoul_aux)
950	        end if
951	c
952	c       Jorge Garza/End/Exact_pot
953	
954	        call dft_prevals('inter',me,oprint_eval,oprint_vecs,
955	     &                   g_movecs,dbl_mb(k_eval(1)),dbl_mb(k_occ))
956	
957	      endif
958	c
959	c     Tidy up SCF
960	c
961	 1789 continue
962	      call fock_2e_tidy(rtdb)
963	c
964	      if (CDFIT)then
965	        if (odftps) call pstat_on(ps_incore)
966	        if(dft_mem3c(rtdb,natoms,npol,oprint_parm,oprint_3c2e,
967	     O               n3c_int,n3c_dbl,
968	     O               l_3ceri,k_3cERI, l_3cwhat,k_3cwhat)) then 
969	           incore=.false.
970	          call dft_3cincor(n_batch, n3c_int, int_mb(k_3cwhat), 
971	     &                     dbl_mb(k_3cERI), n3c_dbl)
972	          incore=.true.
973	        else
974	          if (me.eq.0 .and. oprint_3c2e)write(LuOut,3230)
975	          incore=.false.
976	        endif
977	        if (odftps) call pstat_off(ps_incore)
978	      endif
979	 3230 format(/,10x,'Incore memory use for 3-center 2e- integrals is ',
980	     &     'turned off. ')
981	c
982	c     set initial coulomb acc
983	c
984	c      write(LuOut,*)' movecs_guess = ',movecs_guess
985	      if (movecs_guess.eq.'restart') then
986	         ltight=.true.
987	         if (noc(1).gt.0) then
988	           homo_lumo_gap=dbl_mb(k_eval(1)+noc(1)) -
989	     -                   dbl_mb(k_eval(1)+noc(1)-1)
990	         endif
991	         if (noc(2).gt.0) then
992	           homo_lumo_gap=min(homo_lumo_gap,
993	     &                   dbl_mb(k_eval(2)+noc(2)) -
994	     -                   dbl_mb(k_eval(2)+noc(2)-1))
995	         endif
996	      endif
997	c     
998	c     May not want levelshifting initially until sure that the
999	c     transformed Fock matrix will be diagonally dominant, or
1000	c     alternatively shift the piss out of it.
1001	c     
1002	      if (movecs_guess.eq.'restart'.or.ncanorg.eq.1.or.
1003	     A     movecs_guess.eq.'fragment')then
1004	         levelshifting = .not.gotsmear(ssmear)
1005	      else
1006	         levelshifting = .false.
1007	      endif
1008	      iswitc = 0
1009	      if (ltight)then
1010	         iAOacc = iAOacc_max
1011	         tol_rho = tol_rho_max
1012	         iswitc = 2
1013	      else
1014	         iAOacc = iAOacc_min
1015	         tol_rho = max(tol_rho_min,tol_rho_max)
1016	      endif
1017	      if (use_nwxc) call nwxc_reset_rho_tolerance(tol_rho)
1018	      if (ltight.or.(.not.direct))then
1019	         itol2e = itol_max
1020	      else
1021	         itol2e = min(itol_min,itol_max)
1022	      endif
1023	c     
1024	      tol2e = 10.d0**(-itol_max)
1025	c 
1026	c     Restore SCF parameters
1027	c
1028	      call scf_get_fock_param(rtdb, tol2e)
1029	c
1030	c     If open shell put the total density matrix in g_dens(1)
1031	c
1032	      if(ipol.eq.2)then             
1033	         call ga_dadd(one,g_dens(1),one,g_dens(2),g_dens(1))
1034	      endif
1035	c     
1036	c     Call to Mulliken Population Analysis for initial density
1037	c     
1038	      if (mulliken) call dft_mulwrap(me,g_dens,g_s)
1039	c
1040	c    The loop associated with the label 135 is to find the exact exchange-
1041	c    correlation potential.
1042	c
1043	 135  continue
1044	c     
1045	c     Top of infinite SCF iteration loop
1046	c
1047	cc AJL/Begin/FDE
1048	c
1049	c     == if frozen embedding ==
1050	c     AJL: This is already stored in commons
1051	c      frozemb = .false.
1052	c      if (.not.rtdb_get(rtdb, 'dft:frozemb', mt_log, 1, frozemb))
1053	c     &    frozemb=.false.
1054	      if (frozemb) then ! get the frozen density embedding potential
1055	        if (.not. ga_duplicate(g_fock, g_frozemb, 'froz matrix'))
1056	     &     call errquit('dft_scf:failed duplicate',g_frozemb, GA_ERR)
1057	        call ga_zero(g_frozemb)
1058	        if (frozemb_fde) then
1059	c Initialise frozen density embedding
1060	          call dft_frozemb_fde_init(rtdb,test_sic,g_vxc,g_vxc_fde,
1061	     &                              g_xcinv_fde)
1062	c Calculate the frozen density embedding contributions to fock matrix
1063	          call dft_frozemb_fde(rtdb,g_frozemb,g_dens,g_dens_fde)
1064	        else
1065	c     Old embedding method, read from file
1066	          call dft_frozemb(rtdb,g_frozemb)
1067	        endif 
1068	cc AJL/End
1069	c
1070	c      call ga_print(g_frozemb)
1071	c      call ga_print(g_s)
1072	      end if
1073	c
1074	c     Write prep time required
1075	c
1076	      if (me.eq.0.and.oprint)then
1077	         current_wall = util_wallsec()
1078	         write(LuOut,20)current_wall
1079	   20    format(2x,' Time prior to 1st pass: ',f8.1)
1080	      endif
1081	c     
1082	c     start DFT_SCF timer
1083	c     
1084	      start_wall = util_wallsec()
1085	      start_cpu = util_cpusec()
1086	      dft_time = -start_wall
1087	c
1088	      if (oprint_time)
1089	     &     call dft_tstamp('   Before SCF iter loop. ')
1090	c
1091	      iter = 0
1092	c
1093	      if (ipol.gt.1)then
1094	         if (.not. ga_duplicate(g_fock, g_fockt, 'fock tr'))
1095	     &        call errquit('dft_scf: error creating ga',0,GA_ERR)
1096	      endif
1097	c Start cdft
1098	      if (lcdft)then
1099	        mulliken = .true.
1100	        if (.not. ga_duplicate(g_fock, g_fockv(1), 'fock tm'))
1101	     &     call errquit('dft_scf: error creating ga',0,GA_ERR)
1102	        if (ipol.gt.1)then
1103	          if (.not. ga_duplicate(g_fock, g_fockv(2), 'fock tm2'))
1104	     &       call errquit('dft_scf: error creating ga',0,GA_ERR)
1105	        endif
1106	c
1107	        if (.not. (
1108	     $            rtdb_get(rtdb,'dft:iatms1', mt_int, nconstr,iatms1)
1109	     $      .and. rtdb_get(rtdb,'dft:iatms2', mt_int, nconstr,iatms2)
1110	     $      .and. rtdb_get(rtdb,'dft:fatms1', mt_int, nconstr,fatms1)
1111	     $      .and. rtdb_get(rtdb,'dft:fatms2', mt_int, nconstr,fatms2) ))
1112	     &   call errquit('dft_scf: rtdb_get atms failed', 2700, RTDB_ERR)
1113	        if (.not. rtdb_get(rtdb,'dft:constr', mt_dbl, nconstr, constr))
1114	     &   call errquit('dft_scf: rtdb_get failed', 2700, RTDB_ERR)
1115	        if (.not. rtdb_get(rtdb,'dft:dtype', mt_int, nconstr,dtype))
1116	     &   call errquit('dft_scf: rtdb_get failed', 2700, RTDB_ERR)
1117	        if (.not. rtdb_get(rtdb, 'dft:ipop', mt_int, 1, ipop))
1118	     &   ipop = 3     ! ipop default
1119	        if (.not.rtdb_get(rtdb,'dft:cdft_maxiter',mt_int,1,
1120	     1                    cdft_maxiter)) cdft_maxiter = 50
1121	        if (.not. rtdb_put(rtdb,'dft:ipop', mt_int, 1, ipop))
1122	     &   call errquit('dft_scf: rtdb_put pop failed', 0, RTDB_ERR)
1123	c
1124	        do i = 1, nconstr
1125	         if (.not. ga_duplicate(g_fock, g_constr(i), 'constr'))
1126	     &      call errquit('dft_scf: error creating ga',0,GA_ERR)
1127	        enddo
1128	        if(.not.rtdb_put(rtdb,'dft:gconstr',mt_int,nconstr,g_constr(1)))
1129	     $     call errquit('dft:scf put g_constr failed',0, RTDB_ERR)
1130	        if (.not. ga_duplicate(g_fock, g_shalf, 'shalf'))
1131	     &     call errquit('dft_scf: error creating ga',0,GA_ERR)
1132	        if(ipop.eq.3 .or.ipop.eq.4)
1133	     $    call diis_bld12(toll_s, svals, g_svecs,  g_shalf, g_tmp, 3)
1134	
1135	        call cdft_init(iatms1,iatms2,fatms1,fatms2,g_constr,nconstr,
1136	     $                    ipop,dtype,constr, geom, ncenters, ao_bas_han,
1137	     $                    nbf_ao, g_s, g_shalf)
1138	        if(.not. ga_destroy(g_shalf)) call errquit
1139	     $     ('dft_scf: destroy g_shalf failed', 2700, GA_ERR)
1140	
1141	        do i = 1, nconstr
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1141,9)
!   remark #15300: LOOP WAS VECTORIZED
!   remark #15449: unmasked aligned unit stride stores: 2 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 7 
!   remark #15477: vector cost: 3.000 
!   remark #15478: estimated potential speedup: 1.840 
!   remark #15488: --- end vector cost summary ---
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1141,9)
!<Remainder loop for vectorization>
!   remark #25015: Estimate of max trip count of loop=10
!LOOP END
1142	          multipliers0(i)=zero
1143	          multipliers(i)=zero
1144	        enddo
1145	        fddl = 4.d0/ipol
1146	        if(.not.rtdb_get(rtdb, 'dft:dl_conv', mt_dbl, 1, dl_conv))
1147	     $    dl_conv = 1d-6
1148	        lvan = .false.
1149	        if(nconstr.eq.1) lvan = .true.
1150	      endif
1151	c  End of lcdft
1152	
1153	      if (ipol.gt.1)then
1154	       if(.not.ga_duplicate(g_fock, g_focks(2), ' beta fock'))
1155	     &    call errquit('dft_scf:failed duplicate',g_fock, GA_ERR)
1156	      endif
1157	 3000 continue
1158	c
1159	c     ----- dft scf proper -----
1160	c
1161	      last_time_energy = .false.
1162	c
1163	      if (.not. ga_duplicate(g_fock, g_denso(1), 'oldDMa'))
1164	     &     call errquit('dft_scf: error creating ga',0,GA_ERR)
1165	      if(ipol.eq.2) then
1166	         if (.not. ga_duplicate(g_fock, g_denso(2), 'oldDMb'))
1167	     &        call errquit('dft_scf: error creating ga',0,GA_ERR)
1168	      endif
1169	c
1170	      if(iterations.eq.0) then
1171	         if (.not. ga_destroy(g_denso(1))) call errquit
1172	     &        ('dft_scf: could not destroy g_denso', 0, GA_ERR)
1173	         if(ipol.eq.2) then
1174	            if (.not. ga_destroy(g_denso(2))) call errquit
1175	     &           ('dft_scf: could not destroy g_dens2', 0, GA_ERR)
1176	            if(iter.gt.0) then
1177	            if (.not. MA_free_heap(l_gdiis))  call errquit
1178	     &           (' dft_scf:cannot popstack',111, MA_ERR)
1179	            endif
1180	         endif
1181	         if (odftps) call pstat_on(ps_scfend)
1182	         goto 1970
1183	      endif
1184	c
1185	 1000 continue !  iteration loop
1186	
1187	c
1188	      if (me.eq.0 .and. oprint_conv_details)
1189	     &   write(LuOut,124)damping, levelshifting, diising
1190	 124  format(10x,' DAMPING=',l1,' LEVELSHIFTING=',l1,
1191	     &           ' DIISING=',l1)
1192	c
1193	      if (me.eq.0.and.oprint_tol)write(LuOut,3234)itol2e,iAOacc,iXCacc
1194	 3234 format(10x,'itol2e=',i2,' iAOacc=',i2,' iXCacc=',i2)
1195	
1196	      Ecoul  = ZERO
1197	      Exc(1) = ZERO
1198	      Exc(2) = ZERO
1199	      rms(1) = 0.d0
1200	      rms(2) = 0.d0
1201	c
1202	c     Calculate the cosmo charges
1203	c
1204	      if (cosmo_on.and.cosmo_phase.eq.2) then
1205	        cosmo_file = 'cosmo.xyz'
1206	        if (ipol.eq.2) ! separate components
1207	     &    call ga_dadd(1.d0,g_dens(1),-1.d0,g_dens(2),g_dens(1))
1208	        call cosmo_charges_from_dmat(rtdb, ao_bas_han, geom, 
1209	     &          ecosmo, odbug, ipol, g_dens, cosmo_file)
1210	        if (ipol.eq.2) ! reinstate total
1211	     &    call ga_dadd(one, g_dens(1), one, g_dens(2), g_dens(1))
1212	      end if ! cosmo check
1213	c
1214	c     DIM/QM JEM
1215	c     Calculate DIM/QM dipoles
1216	c     We use the total density to calculate the dipoles.
1217	c
1218	      if(ldimqm .and. dimqm_go) then
1219	        call dimqm_main(rtdb, ao_bas_han, geom, g_dens, .false.)
1220	      end if
1221	
1222	c
1223	c     Determine HOMO energy (for Zhan-Nichols-Dixon AC)
1224	c
1225	      e_homo = dbl_mb(k_eval(1)+noc(1)-1)
1226	      if (ipol.eq.2) then
1227	        if (e_homo.lt.dbl_mb(k_eval(2)+noc(2)-1))
1228	     &  e_homo = dbl_mb(k_eval(2)+noc(2)-1)
1229	      endif
1230	c
1231	c     check for fractional occupations (fon), calculate tr[P S] and print
1232	c     if (debug_fon) call dft_pstrace(g_dens(1),ao_bas_han,nbf_ao,oskel)
1233	      if (fon) then
1234	        pstrace=ga_ddot(g_dens,g_s)
1235	        if(ga_nodeid().eq.0) then
1236	          write(luout,'(5x,a)') 'FON applied'
1237	          write (luout,'(5x,a,1x,e15.7)')
1238	     &       'tr(P*S): ',pstrace 
1239	        end if
1240	        if (.not. rtdb_put(rtdb, 'dft:pstrace', mt_dbl, 1, pstrace))
1241	     &     call errquit('dft_scf: rtdb_put pstrace failed', 1, RTDB_ERR)
1242	      end if                    ! fon
1243	c
1244	c     build DFT Fock matrix
1245	c  jbecca START: adding in electric field energy interaction term
1246	      eelec = zero
1247	c
1248	      if(util_print('dft timings', print_high))
1249	     &      time1=util_wallsec()  ! start fock matrix build time
1250	c     flip spins if needed
1251	      if (.not. rtdb_get_info(rtdb, 'nwdft:spinflip',
1252	     C     ma_type, no_sflip, date)) no_sflip = 0
1253	      if (no_sflip.ne.0.and.ipol.eq.2.and.iter.eq.0) then
1254	         if (.not.MA_Push_Get(MT_int,no_sflip,'flip',
1255	     F        l_at_flip,k_at_flip))
1256	     &        call errquit('dft_scf: cannot allocate flip',0, MA_ERR)
1257	         if (.not.rtdb_get(rtdb,'nwdft:spinflip',
1258	     M        mt_int,no_sflip,int_mb(k_at_flip)))
1259	     &        call errquit('dft_scf: read nwdft:spinflip failed ',111,
1260	     &        UNKNOWN_ERR)
1261	         call mull_pop(geom,ao_bas_han,g_dens(1),g_s,'DM1')
1262	         call mull_pop(geom,ao_bas_han,g_dens(2),g_s,'DM2')
1263	         call dft_spinflip(g_dens,g_s,ao_bas_han,1d0,-2d0,
1264	     S        no_sflip,int_mb(k_at_flip))
1265	         call mull_pop(geom,ao_bas_han,g_dens(1),g_s,'DM1')
1266	         call mull_pop(geom,ao_bas_han,g_dens(2),g_s,'DM2')
1267	         if (.not.ma_pop_stack(l_at_flip))
1268	     &        call errquit('dft_scf: cannot pop stack',33, MA_ERR)
1269	c     remove flipping to avoid multiple operation in geom opt.
1270	         if(.not.rtdb_delete(rtdb, 'nwdft:spinflip'))
1271	     &        call errquit('dft_scf: cannot rtdb_delete',3, MA_ERR)
1272	      endif
1273	      call dft_fockbld(rtdb,natoms,ntotel,
1274	     ,     g_fock,g_focks,g_dens,g_vxc,g_movecs,g_xcinv, 
1275	     ,     g_tmp,g_nq,g_wght,g_xyz,
1276	     ,     ivcoul_Opt,nexc,ivxc_opt,wght_GA,
1277	     ,     n_batch,n3c_int,n3c_dbl,IOLGC,
1278	     ,     k_eval, dbl_mb(irdens_atom),
1279	     ,     dbl_mb(k_3ceri),int_mb(k_3cwhat),
1280	     ,     int_mb(icetobfr),
1281	     ,     iter, ecore, ecoul,exc,rho_n,ldmix,
1282	     ,     test_sic,exact_pot,ecoul_aux,dif_lamda,totsic,
1283	     ,     i_degen,g_rho_exact,g_tmp_exact, g_addit_exact,
1284	     ,     n_levels, act_levels, oprint_time,
1285	cc AJL/Begin/FDE
1286	c     &     g_rel,g_frozemb)
1287	     &     g_rel,g_frozemb,g_vxc_fde,g_xcinv_fde,g_dens_fde,eelec)
1288	cc AJL/End
1289	      if(util_print('dft timings', print_high))
1290	     &      time2=util_wallsec()  ! end fock matrix build time
1291	c
1292	c     print fock matrix build time
1293	      if(util_print('dft timings', print_high)) then
1294	        if (me.eq.0) then
1295	          write(*,"(4x,'Total Fock Matrix Build Time:',F13.1,'s')") 
1296	     &                     time2-time1
1297	        endif
1298	      end if
1299	c     
1300	c     Calculate the total electronic energy.
1301	c     
1302	      if (nExc.eq.1)then
1303	c  jbecca START: adding in eelec here
1304	         Etnew = Ecore + Ecoul + Exc(1) + Edisp + eelec
1305	      else
1306	c  jbecca START adding in eelec here
1307	         Etnew = Ecore + Ecoul + Exc(1) + Exc(2) + Edisp + eelec
1308	      endif
1309	c
1310	      if (oprint_conv_details.and.me.eq.0)then
1311	         write(LuOut,*)'Etnew, Ecore, Ecoul, Exc(1), Exc(2), Totsic: ',
1312	     &                  Etnew, Ecore, Ecoul, Exc(1), Exc(2), Totsic
1313	      endif
1314	c
1315	c     Add in cosmo contributions
1316	c
1317	      if (cosmo_on.and.cosmo_phase.eq.2) then 
1318	        if (do_cosmo_smd) then
1319	             etnew = etnew + ecosmo + gcds
1320	        else
1321	             etnew = etnew + ecosmo
1322	        end if
1323	      end if
1324	c
1325	c     DIM/QM JEM
1326	c     Add DIM energy
1327	c  jbecca START: Commenting out addition of DIM/QM E each scf
1328	c      if (ldimqm .and. dimqm_go) then 
1329	c         call dimqm_getenergy(edimqm)
1330	c         Etnew = Etnew + Edimqm
1331	c      endif
1332	c
1333	c     
1334	c     == is this a oneshot "noscf" type calculation, no diagonalization ==
1335	      noscf = .false.
1336	      if (.not.rtdb_get(rtdb, 'dft:noscf', mt_log, 1, noscf))
1337	     &    noscf=.false.
1338	      if (noscf) then 
1339	        last_time_energy = .true. 
1340	        converged = .true.
1341	        levelshifting = .false.  ! turn off levelshifting for noscf
1342	c
1343	        call dft_densm(g_dens,g_movecs,
1344	     &               nbf_ao,nmo,ipol,
1345	     &               geom,AO_bas_han,noc,ntotel,
1346	     &               Dbl_MB(k_eval(1)),dbl_mb(k_occ),
1347	     &               ssmear,tdots,iter,.true.,
1348	     .               fon, nel_fon,nmo_fon,ncore_fon,
1349	     .               spinset.or.n_rabuck.ne.0,
1350	     &               rtdb)
1351	c
1352	      end if
1353	c
1354	c     == is this the last energy evaluation ? ==
1355	      if (last_time_energy) then
1356	         etnew=etnew+tdots
1357	c     
1358	c        If open shell put the total density matrix back in g_dens(1) and quit.
1359	         if (ipol.eq.2)then
1360	            call ga_dadd(one, g_dens(1), one, g_dens(2), g_dens(1))
1361	         endif
1362	c
1363	c Constrained DFT
1364	         if(lcdft) then
1365	c    Get the final multipliers.
1366	          do i = 1, nconstr
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1366,11)
!   remark #15300: LOOP WAS VECTORIZED
!   remark #15448: unmasked aligned unit stride loads: 2 
!   remark #15449: unmasked aligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 6 
!   remark #15477: vector cost: 2.500 
!   remark #15478: estimated potential speedup: 1.870 
!   remark #15488: --- end vector cost summary ---
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1366,11)
!<Remainder loop for vectorization>
!   remark #25015: Estimate of max trip count of loop=10
!LOOP END
1367	            multipliers0(i)=multipliers0(i)+multipliers(i)
1368	          enddo
1369	          if (.not.rtdb_put(rtdb, 'dft:multipliers', mt_dbl, nconstr,
1370	     &         multipliers0))
1371	     $     call errquit('dft_scf: failed to put multipliers',0,RTDB_ERR)
1372	         endif  ! lcdft
1373	c Constrained dft
1374	
1375	         goto 2000
1376	      endif  ! last_time_energy
1377	c     
1378	c     == Symmetrize the Fock matrix ==
1379	      if (oskel) then
1380	       do ispin = 1, ipol
1381	        call sym_symmetrize(geom, AO_bas_han, .false., g_focks(ispin))
1382	        call ga_symmetrize(g_focks(ispin))
1383	       enddo
1384	      end if
1385	c
1386	      call dft_convpam(oprint_conv_details,iter,etnew,etold,enuc)
1387	c
1388	c Constrained DFT
1389	      if(lcdft) then
1390	        do i = 1, nconstr
1391	          multipliers0(i)=multipliers0(i)+multipliers(i)
1392	          multipliers(i)=zero
1393	          do ispin = 1, ipol
1394	           if(dtype(i).eq.2 .and. ispin.eq.2) then
1395	            call ga_dadd(one, g_focks(ispin), -multipliers0(i),
1396	     $               g_constr(i), g_focks(ispin))
1397	           else
1398	            call ga_dadd(one, g_focks(ispin), multipliers0(i),
1399	     $               g_constr(i), g_focks(ispin))
1400	           endif
1401	          enddo
1402	          gold_constr(i) = 1d22
1403	        enddo
1404	        if(me.eq.0.and.iter.gt.1) then
1405	          write(LuOut,*) 'CDFT multipliers:'
1406	          do i = 1, nconstr
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1406,11)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed OUTPUT dependence between at (1407:13) and at (1407:13)
!   remark #25015: Estimate of max trip count of loop=10
!LOOP END
1407	            write(LuOut,333) i, multipliers0(i)
1408	          enddo
1409	          write(LuOut,'(a,i4)') '      iter = ', counter_cdft
1410	          call util_flush(luout)
1411	        endif
1412	        counter_cdft = 0
1413	      endif
1414	c Constrained DFT
1415	c
1416	      if (diising)then
1417	c     
1418	c     DIIS step taken here.
1419	c     
1420	         if (oprint_time)
1421	     &        call dft_tstamp(' calling diis driver ')
1422	            call diis_driver(toll_s, derr,  ipol, 
1423	     &           icall, nfock, nbf_ao, geom, 
1424	     &           ao_bas_han, g_focks, g_dens, 
1425	     &           g_tmp, g_svecs, svals, diising, 
1426	     &           nodiis,int_mb(k_gdiis),lkeeps,
1427	     .           g_s12m,g_s12p,.false.,
1428	     $           nconstr,multipliers0,dbl_mb(k_mdiis))
1429	            if (oprint_time)
1430	     &           call dft_tstamp(' called diis driver ')
1431	      endif
1432	c Qin
1433	      if(lcdft) then
1434	        do ispin = 1, ipol
1435	         call ga_copy(g_focks(ispin), g_fockv(ispin))
1436	        enddo
1437	        do_ddl = .true.
1438	        dlold = zero
1439	      endif
1440	 2004 continue
1441	c Constrained DFT: label 2004 is associated with optimization of cdft.
1442	      if(lcdft) then
1443	        call dfill(nconstr, 0.0d0, grad_constr, 1)
1444	        call dfill(nconstr*nconstr, 0.0d0, dbl_mb(k_hess), 1)
1445	        counter_cdft = counter_cdft + 1
1446	        if(counter_cdft.gt.cdft_maxiter) then
1447	          write(LuOut,*)
1448	     $     'CDFT failed to optimize the multipliers.'
1449	          write(LuOut,*) 'multipliers:'
1450	          do i = 1, nconstr
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1450,11)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed OUTPUT dependence between at (1451:13) and at (1451:13)
!   remark #25015: Estimate of max trip count of loop=10
!LOOP END
1451	            write(LuOut,333) i, multipliers0(i)+multipliers(i)
1452	          enddo
1453	          call errquit
1454	     $        ('CDFT failed to optimize multipliers, cdft_maxiter=',
1455	     $           cdft_maxiter,RTDB_ERR)
1456	        endif
1457	      endif
1458	
1459	cc AJL/Begin/FDE
1460	      if(util_print('Intermediate Fock Matrix', print_debug)) then
1461	        if (ga_nodeid() .eq. 0) then
1462	          write(6,*)
1463	          call util_print_centered(6,
1464	     $         'Intermediate Fock Matrix',40,.true.)
1465	          write(6,*)
1466	          call util_flush(6)
1467	        end if
1468	        call ga_print(g_focks(1))
1469	        if (ipol.eq.2) call ga_print(g_focks(2))
1470	      endif
1471	cc AJL/End
1472	
1473	      do ispin = 1, ipol
1474	         if(lcdft) then
1475	           call ga_copy(g_fockv(ispin), g_focks(ispin))
1476	           do i = 1, nconstr
1477	            if(dtype(i).eq.2 .and. ispin.eq.2) then
1478	             call ga_dadd(one, g_focks(ispin), -multipliers(i),
1479	     $               g_constr(i), g_focks(ispin))
1480	            else
1481	             call ga_dadd(one, g_focks(ispin), multipliers(i),
1482	     $               g_constr(i), g_focks(ispin))
1483	            endif
1484	           enddo
1485	         endif
1486	         call dft_diagn(levelshifting,
1487	     ,        nmo(ispin),ncanorg,
1488	     .        g_focks(ispin),g_s,g_movecs(ispin),g_tmp,g_svecs,
1489	     ,        dbl_mb(k_eval(ispin)),svals,noc(ispin),
1490	     ,        homo,lumo,toll_s,
1491	     ,        oprint_intermediate_fock,oprint_time,
1492	c
1493	c MN solvation models -->
1494	c
1495	     ,        oprint_conv_details,istep_cosmo_vem)
1496	c
1497	c <-- MN solvation models
1498	c
1499	c        determine homo-lumo gap 
1500	c
1501	         homo_lumo_gap = min(homo_lumo_gap, (lumo-homo-rlshift))
1502	         if (me.eq.0 .and. oprint_conv_details)
1503	     &      write(LuOut,4224)homo,lumo,rlshift, homo_lumo_gap
1504	c     
1505	         call ga_sync
1506	c     
1507	c        Save previous density for convergence check.
1508	c     
1509	c        call ga_copy(g_dens(ispin), g_denso(ispin))
1510	
1511	c Constrained DFT /When lcdft, save at the beginning
1512	      if((.not.lcdft) .or. dlold.eq.zero)
1513	     $    call ga_copy(g_dens(ispin), g_denso(ispin))
1514	
1515	      if(lcdft) then
1516	       call ga_dgemm('n', 't', nbf_ao, nbf_ao,
1517	     $      noc(ispin), 2d0/dble(ipol), g_movecs(ispin),
1518	     $      g_movecs(ispin), zero, g_dens(ispin))
1519	       if((nbf_ao.ne.nmo(ispin)).and.oprint)
1520	     1          write(LuOut,*) 'nbf_ao .ne. nmo '
1521	       if(ispin.eq.2) then
1522	         do i = 1, nconstr
1523	           if(dtype(i).eq.2) call ga_scale(g_constr(i),onem)  ! switch sign
1524	         enddo
1525	       endif
1526	       call cdft_deriv(nconstr, g_constr,
1527	     $                    g_movecs(ispin), g_dens(ispin),
1528	     $                    dbl_mb(k_eval(ispin)), noc(ispin), nmo(ispin),
1529	     $                    grad_constr, dbl_mb(k_hess),
1530	     $                    g_tmp, fddl)
1531	        if(ispin.eq.2) then
1532	          do i = 1, nconstr
1533	            if(dtype(i).eq.2) call ga_scale(g_constr(i),onem)  ! switch back
1534	          enddo
1535	        endif
1536	      endif
1537	c Constrained DFT / end
1538	
1539	c
1540	c        symmetry adapt vectors?
1541	c
1542	         if (oadapt)then
1543	            if(nmo(ispin).ne.0) then
1544	               if (.not. ga_create(mt_dbl, nbf_ao, nmo(ispin),
1545	     +           'movad', nbf_ao, 0, g_movad)) call errquit(
1546	     +              'dft_scf: gacreate failed ',0, GA_ERR)
1547	               call ga_copy_patch('n', g_movecs(ispin), 1, nbf_ao, 
1548	     .            1, nmo(ispin),
1549	     ,            g_movad, 1,nbf_ao,1,nmo(ispin))
1550	
1551	            else
1552	               g_movad=g_movecs(ispin)
1553	            endif
1554	            if(ispin.eq.1)name = '- alpha'
1555	            if(ispin.eq.2)name = '- beta'
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1555,27)
!   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 4 
!   remark #15477: vector cost: 4.000 
!   remark #15478: estimated potential speedup: 0.760 
!   remark #15488: --- end vector cost summary ---
!   remark #25436: completely unrolled by 5  
!LOOP END
1556	            call scf_movecs_sym_adapt(ao_bas_han, g_movad,
1557	     &           oprint_syma, nmo, name,
1558	     &           .true., 
1559	     &                                int_mb(k_ir+nbf_ao*(ispin-1)))
1560	            if(nmo(ispin).ne.0) then
1561	               call ga_copy_patch('n', 
1562	     ,              g_movad, 1,nbf_ao,1,nmo(ispin),
1563	     .              g_movecs(ispin), 1, nbf_ao, 1, nmo(ispin))
1564	               if (.not. ga_destroy(g_movad)) call errquit(
1565	     &              'dft_scf: could not destroy g_movad', 0, GA_ERR)
1566	            endif
1567	         endif      
1568	      enddo                     ! end big loop over ispin
1569	
1570	c Constrained DFT
1571	      if(lcdft) then
1572	        dl2 = zero
1573	        do i = 1, nconstr
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1573,9)
!   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1575,11) ]
!   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1575,11) ]
!   remark #25439: unrolled with remainder by 2  
!   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
!   remark #25015: Estimate of max trip count of loop=10
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1573,9)
!<Remainder>
!   remark #25015: Estimate of max trip count of loop=10
!LOOP END
1574	          grad_constr(i) = grad_constr(i) - constr(i)
1575	          dl2 = max(dl2, dabs(grad_constr(i)))
1576	        enddo
1577	        if(dl2.gt.dl_conv) then
1578	          if(lvan) then
1579	           dl2 = grad_constr(1)
1580	           ddl2 = dbl_mb(k_hess)
1581	           call find_la(multipliers(1),dl2,ddl2,do_ddl,dlold,x1,x2,
1582	     $                    lbrak,check)
1583	          else
1584	           if (.not.MA_Push_Get(MT_Dbl,2*nconstr*nconstr+6*nconstr,
1585	     &                          'conscr',l_conscr,k_conscr))
1586	     &        call errquit('dft_scf: cannot allocate ktmp',0, MA_ERR)
1587	           call cdft_newt(nconstr,multipliers,grad_constr,
1588	     $                dbl_mb(k_hess),gold_constr, p_constr, check,
1589	     $                dbl_mb(k_conscr),dbl_mb(k_conscr+nconstr*nconstr),
1590	     $                dbl_mb(k_conscr+2*nconstr*nconstr),
1591	     $                dbl_mb(k_conscr+2*nconstr*nconstr+nconstr))
1592	           if (.not.ma_pop_stack(l_conscr))
1593	     &         call errquit('dft_scf: cannot pop stack',33, MA_ERR)
1594	           dlold = gold_constr(1)
1595	          endif
1596	          if(check) call errquit
1597	     $      ('CDFT: Unable to improve the multipliers',0,RTDB_ERR)
1598	          dl2 = zero
1599	          do i = 1, nconstr
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1599,11)
!   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1600,12) ]
!   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1600,12) ]
!   remark #25439: unrolled with remainder by 2  
!   remark #25015: Estimate of max trip count of loop=10
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1599,11)
!<Remainder>
!   remark #25015: Estimate of max trip count of loop=10
!LOOP END
1600	           dl2 = max(dl2, dabs(multipliers(i)))
1601	          enddo
1602	          if(dl2.gt.1d10) check = .true.
1603	          if(check) call errquit
1604	     $      ('CDFT: multipliers go over limit',0,RTDB_ERR)
1605	          goto 2004
1606	        endif
1607	        do ispin = 1, ipol
1608	          call ga_copy(g_focks(ispin), g_fockv(ispin))
1609	        enddo
1610	      endif
1611	c Constrained DFT / end
1612	
1613	
1614	      call ga_sync
1615	         if(n_rabuck.ne.0) then
1616	            ssmear=dft_rabuck(ipol,iter,n_rabuck,noc,derr,
1617	     ,     dbl_mb(k_eval(1)),dbl_mb(k_eval(2)))
1618	            rabuck_act=gotsmear(ssmear)
1619	         endif
1620	c     
1621	c     Form a new density matrix.
1622	c     
1623	      tdots=0.d0
1624	      if (oprint_time)
1625	     &     call dft_tstamp(' calling densm ')
1626	      call dft_densm(g_dens,g_movecs, 
1627	     &               nbf_ao,nmo,ipol, 
1628	     &               geom,AO_bas_han,noc,ntotel,
1629	     &               Dbl_MB(k_eval(1)),dbl_mb(k_occ),
1630	     &               ssmear,tdots,iter,.true.,
1631	     .               fon, nel_fon,nmo_fon,ncore_fon,
1632	     .               spinset.or.n_rabuck.ne.0,           
1633	     &               rtdb)
1634	c
1635	      if(oprint_info) then
1636	         pstrace=ga_ddot(g_dens,g_s)
1637	         if(ga_nodeid().eq.0) write (luout,'(5x,a,1x,e15.7)')
1638	     &      'tr(P*S): ',pstrace 
1639	         if(ipol.eq.2) then
1640	            pstrace=ga_ddot(g_dens(2),g_s)
1641	            if(ga_nodeid().eq.0) write (luout,'(5x,a,1x,e15.7)')
1642	     &           'tr(P_beta*S): ',pstrace 
1643	         endif
1644	      endif
1645	c
1646	      if (oprint_time)
1647	     &     call dft_tstamp(' called densm ')
1648	      
1649	      if((.not.rabuck_act).and.
1650	     .gotsmear(ssmear).and.ipol.eq.2.and.(noc(2).gt.noc(1))) then
1651	c
1652	c     swap alpha and beta
1653	c
1654	         if (.not.MA_Push_Get(MT_Dbl,nbf_ao,'ssccrr',l_tmp,k_tmp))
1655	     &        call errquit('dft_scf: cannot allocate ktmp',0, MA_ERR)
1656	         call dft_swapab(g_dens, g_movecs,nbf_ao,noc,
1657	     ,        dbl_mb(k_eval(1)),dbl_mb(k_occ),g_tmp,dbl_mb(k_tmp))
1658	         if (.not.ma_pop_stack(l_tmp))
1659	     &        call errquit('dft_scf: cannot pop stack',33, MA_ERR)
1660	         if(diising.and.ndisrst.gt.0) diisreset=.true.
1661	      endif
1662	c
1663	c     reset diis when smearing is on to avoid noise accumulation
1664	c
1665	      if(gotsmear(ssmear).and.mod(iter,ndisrst).eq.0) then
1666	         if(iter.gt.1.and.diising) diisreset=.true.
1667	      endif
1668	c66      if(diisreset.and.iswitc.gt.1.and.iter.gt.0) then
1669	      if(diisreset.and.iswitc.eq.1.and.iter.gt.0) then
1670	         if(me.eq.0) write(LuOut,*) ' Resetting Diis'
1671	         if(ndisrst.eq.9999) diisreset=.false.
1672	         call diis_driver(toll_s, derr,  ipol, icall, nfock, 
1673	     &        nbf_ao, geom, ao_bas_han, g_focks, 
1674	     &        g_dens, g_tmp, g_svecs, svals, 
1675	     &        diising, nodiis,int_mb(k_gdiis),
1676	     ,        lkeeps,g_s12m,g_s12p,.true.,
1677	     $           nconstr,multipliers0,dbl_mb(k_mdiis))
1678	         diisreset=.false.
1679	      endif
1680	
1681	         etnew=etnew+tdots
1682	c
1683	      delta = -etold+etnew
1684	c
1685	c     check for symmetry breaking
1686	c
1687	      if(oskel) then
1688	c      if(.false.) then
1689	          call dft_symbr(geom,ao_bas_han,ipol,
1690	     .     g_dens(1),g_dens(2), g_tmp)
1691	       endif
1692	c
1693	
1694	      do ispin = 1, ipol
1695	c     
1696	c     
1697	c     Check convergence on Density.
1698	c     
1699	         rms(ispin) = dft_dencvg(g_dens(ispin), g_denso(ispin), nbf_ao)
1700	c     
1701	c        Damping implemented here.
1702	c     
1703	         if (damping)then
1704	            pp = dble(ndamp)*1.d-2
1705	            call ga_dadd(pp, g_denso(ispin),(1d0-pp), g_dens(ispin), 
1706	     &                   g_dens(ispin))
1707	         else
1708	            ndamp = 0
1709	         endif
1710	      enddo                     ! end loop over ispin
1711	      call ga_sync
1712	c     
1713	      if (oprint_conv.and.iter.eq.1.and.me.eq.0)then
1714	c
1715	         nheap = MA_Inquire_Heap(MT_Dbl)
1716	         nstack = MA_Inquire_Stack(MT_Dbl)
1717	         write(LuOut,21)
1718	         write(LuOut,'(10x,a,f10.2,i20)')
1719	     &        ' Heap Space remaining (MW):  ',dble(nheap)*1.D-06,nheap
1720	         write(LuOut,'(10x,a,f10.2,i20)')
1721	     &        'Stack Space remaining (MW):  ',dble(nstack)*1.D-06,nstack
1722	         call util_flush(LuOut)
1723	         write(LuOut,1)
1724	c
1725	c     ----- cosmo message -----
1726	c
1727	         if(cosmo_on.and.cosmo_phase.eq.1) then
1728	            write(LuOut,909)
1729	         elseif(cosmo_on) then
1730	            write(LuOut,910)
1731	         endif
1732	 909     format(2x,'   COSMO gas phase')
1733	 910     format(2x,'   COSMO solvation phase')
1734	c
1735	      endif
1736	      if (oprint_conv.and.me.eq.0)then
1737	         current_wall = util_wallsec()
1738	         if (diising)then
1739	            write(LuOut,2)ndamp,rlshift,
1740	     &           iter, Etnew+Enuc,
1741	     &           delta,sqrt(rms(1)),derr(1),current_wall
1742	            if (ipol.eq.2)write(LuOut,3)sqrt(rms(2)),derr(2)
1743	         else
1744	            write(LuOut,22)ndamp,rlshift,
1745	     &           iter, Etnew+Enuc,
1746	     &           delta,sqrt(rms(1)), current_wall
1747	            if (ipol.eq.2)write(LuOut,23)sqrt(rms(2))
1748	         endif
1749	         call util_flush(LuOut)
1750	      endif
1751	c
1752	c     ecce ouput
1753	c
1754	      call ecce_print1 ('iteration counter', mt_int, iter, 1)
1755	      call ecce_print1 ('iterative total energy difference', 
1756	     &                  mt_dbl, delta, 1)
1757	      call ecce_print1 ('iterative total density difference', 
1758	     &                  mt_dbl, sqrt(rms(1)), 1)
1759	c
1760	      call ga_sync
1761	c     
1762	c     save eigenvectors to movecs file
1763	c     
1764	      if (.not.movecs_write(rtdb, ao_bas_han, movecs_out, 'dft', title,
1765	     &                      nbf_ao, ipol, nmo, dbl_mb(k_occ), nbf_ao, 
1766	     &                      dbl_mb(k_eval(1)), nbf_ao, g_movecs))
1767	     &   call errquit('dft_scf: movec_write failed', 0, DISK_ERR)
1768	c
1769	c     print out the eigenvalues
1770	c
1771	      call dft_prevals('inter',me,oprint_eval,oprint_vecs,
1772	     ,     g_movecs,dbl_mb(k_eval(1)),dbl_mb(k_occ))
1773	c     
1774	c     If open shell compute overlap of alpha orbitals with beta 
1775	c     orbitals.
1776	c     
1777	      if ((ipol.gt.1).and.(oprint_interm_overlap)) then
1778	         call dft_mxspin_ovlp(nbf_ao,nmo,ao_bas_han, g_movecs(1), 
1779	     &       g_movecs(2),g_tmp)
1780	      endif
1781	c     
1782	c     computation of <S2> for open shell
1783	c     
1784	      if ((ipol.gt.1).and.(oprint_interm_S2)) then
1785	
1786	         call dft_s2_value(geom, AO_bas_han, .false., noc(1), noc(2),
1787	     &                     nbf_ao, g_dens(1), g_dens(2))
1788	      endif
1789	c     
1790	c     
1791	c     Form the total density matrix.
1792	c     
1793	      if (ipol.eq.2)then
1794	         call ga_dadd(one, g_dens(1), one, g_dens(2), g_dens(1))
1795	      endif
1796	c     
1797	c     Check for SCF convergence.
1798	c     
1799	c     DIM/QM JEM
1800	      if(use_dimqm) then
1801	         dimqm_go = .true.
1802	         call dimqm_setgo(dimqm_go)
1803	      endif
1804	      call ga_sync
1805	      if (oprint_time)
1806	     &     call dft_tstamp(' calling scfcvg ')
1807	c
1808	      call dft_scfcvg(rms, derr, Etold, Etnew,
1809	     &                e_conv, d_conv, g_conv, ipol, 
1810	     &                iter, iterations, idone, rtdb,
1811	     &                converged, diising)
1812	c
1813	      if (oprint_time)
1814	     &     call dft_tstamp(' called scfcvg ')
1815	c
1816	c     Check for remaining time to exit "gracefully"
1817	c
1818	      current_wall = util_wallsec()
1819	      if ((iter-1).gt.1)then
1820	         elapsed_wall = current_wall - save_wall
1821	         save_wall = current_wall
1822	      else
1823	         elapsed_wall = current_wall - start_wall
1824	         save_wall = current_wall
1825	      endif
1826	c
1827	      if (converged)then
1828	c
1829	c        If converged probably need a few seconds to clean things up 
1830	c        and calculate a few properties.
1831	c
1832	         wall_time_reqd = 5.0
1833	      else
1834	c
1835	c        If not converged probably need at least the amount time
1836	c        required for previous iteration (multiply by 1.2 to be on the safe side).
1837	c
1838	         wall_time_reqd = elapsed_wall*1.2d0
1839	      endif
1840	      int_wall_time_reqd = wall_time_reqd
1841	      if (.not.util_test_time_remaining(rtdb, int_wall_time_reqd))then
1842	         if (me.eq.0)then
1843	            write(LuOut,*)
1844	            call util_print_centered(LuOut,
1845	     &           'Exiting due to time limitations.', 20, .true.)
1846	            write(LuOut,*)
1847	         endif
1848	         goto 2000
1849	      endif
1850	      if (idone.eq.0.or.(iswitc.lt.2.and.iter.lt.iterations).or.
1851	     .     (iterations.eq.0))
1852	     &   go to 1000 ! begin new iteration
1853	      if (idone.eq.1.and.(.not.last_time_energy))then
1854	         last_time_energy = .true.
1855	         if(rlshift.eq.0.and..not.lcdft) goto 2000
1856	         go to 1000             ! build final total energies
1857	      endif
1858	c     
1859	 2000 continue
1860	c
1861	c Qin
1862	      if(lcdft.and.me.eq.0) then
1863	        write(LuOut,*) ' CDFT final multipliers '
1864	        do i = 1, nconstr
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1864,9)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed OUTPUT dependence between at (1865:11) and at (1865:11)
!   remark #25015: Estimate of max trip count of loop=10
!LOOP END
1865	          write(LuOut,333) i, multipliers0(i)
1866	        enddo
1867	      endif
1868	 333  format(5x,i2,f20.10)
1869	c Qin / end
1870	c
1871	c     get rid of levelshifting in evals
1872	c
1873	         call dft_remshft(levelshifting,ipol,nbf_ao,noc,
1874	     ,        rlshift,dbl_mb(k_eval(1)))
1875	c
1876	      if (nExc.eq.1)then
1877	c  jbecca START: adding in eelec here for field int. 
1878	        Etnew = Ecore + Ecoul + Exc(1) + tdots + Edisp + eelec
1879	      else
1880	        Etnew = Ecore + Ecoul + Exc(1) + Exc(2) + tdots + Edisp + eelec
1881	      endif
1882	c
1883	c     Add in cosmo contributions
1884	c
1885	      if (cosmo_on.and.cosmo_phase.eq.2) then
1886	           if (do_cosmo_smd) then
1887	             etnew = etnew + ecosmo + gcds
1888	           else
1889	             etnew = etnew + ecosmo
1890	           end if
1891	      end if
1892	c
1893	c     DIM/QM JEM
1894	c     Add DIM energy
1895	      if(ldimqm .and. dimqm_go) then
1896	c  jbecca START: this was missed in code cleaning
1897	c         call dimqm_energy(edimqm)
1898	         call dimqm_getenergy(edimqm)
1899	c  jbecca END
1900	         Etnew = Etnew + Edimqm
1901	      endif
1902	c
1903	c    
1904	      if (.not. ga_destroy(g_denso(1))) call errquit
1905	     &   ('dft_scf: could not destroy g_denso', 0, GA_ERR)
1906	      if(ipol.eq.2) then
1907	          if (.not. ga_destroy(g_denso(2))) call errquit
1908	     &     ('dft_scf: could not destroy g_denso', 0, GA_ERR)
1909	      end if
1910	c
1911	      if (exact_pot.eq.1) then
1912	        call parlam_xc_exact_pot(lamda, lamda_old, dif_lamda,
1913	     &                               p_lamda, incre, g_tmp_exact,
1914	     &                               g_addit_exact, g_movecs_aux,
1915	     &                               g_movecs, iter, k_eval,
1916	     &                               Ecoul_aux, split)
1917	        if (lamda.le.900.0) go to 135
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1917,18)
!   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1127,9)
!      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1992,15)
!      remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
!
!      LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1850,61)
!         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
!
!         LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1383,8)
!            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!         LOOP END
!
!         LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1403,9)
!            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!
!            LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1401,11)
!               remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!            LOOP END
!         LOOP END
!
!         LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1603,14)
!            remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
!
!            LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1568,7)
!               remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!
!               LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1484,12)
!                  remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!               LOOP END
!
!               LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1524,10)
!                  remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!               LOOP END
!
!               LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1534,11)
!                  remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!               LOOP END
!            LOOP END
!         LOOP END
!
!         LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1436,9)
!            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!         LOOP END
!
!         LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1609,9)
!            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!         LOOP END
!
!         LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(1710,7)
!            remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!         LOOP END
!      LOOP END
!   LOOP END
!LOOP END
1918	        call close_xc_exact_pot(g_rho_exact, g_tmp_exact,
1919	     &                          g_addit_exact, g_movecs_aux)
1920	      end if
1921	c
1922	c     Jorge Garza / Begin
1923	      if (test_sic.eq.1) then
1924	         call xc_sicdeg(i_degen, k_eval, n_levels,act_levels)
1925	         call localize_sic(g_movecs, k_eval)
1926	         call xc_sic_pert(rtdb, nExc, iVxc_opt,
1927	     &                    g_wght, g_xyz, g_nq,
1928	     &                    wght_GA, dbl_mb(irdens_atom),
1929	     &                    int_mb(icetobfr), natoms,
1930	     &                    g_movecs, totsic, i_degen, n_levels)
1931	         if (me.eq.0.and.oprint_sic)then
1932	            write(LuOut,*) ' SIC after localization',totsic
1933	         endif
1934	         Etnew = Etnew + totsic
1935	         Exc(1) = Exc(1) + totsic
1936	      end if
1937	c
1938	c     Jorge Garza / End
1939	
1940	c     AOR begin
1941	      if (lxdm .eq. 1) then
1942	         call xc_xdm(rtdb,g_dens,g_vxc,natoms,nexc,exdm,dum,
1943	     &        dbl_mb(ixdm_v),dbl_mb(ixdm_ml),'energy')
1944	         edisp = edisp + exdm
1945	      endif
1946	c     AOR end
1947	
1948	c ... jochen: calculate x2c properties if so requested:
1949	      if (do_x2c) then
1950	         call x2c_prop(rtdb,
1951	     N     nexc, g_dens, g_dens_at, g_x2c_u)
1952	      end if ! do_x2c
1953	
1954	c     vdw  bit
1955	c
1956	c     activate disp if is present in rtdb
1957	c     or include dispersion if this a functional that includes dispersion
1958	#if 0
1959	      if (.not.rtdb_get(rtdb, 'dft:disp', mt_log, 1, disp))
1960	     &   disp=.false.
1961	c
1962	      if(disp.or.xc_chkdispauto())
1963	     &      call xc_vdw(rtdb,geom,Etnew,dum,'energy')
1964	#endif
1965	c
1966	c
1967	c     ----- if cosmo ... after gas_phase, do sol_phase ... -----
1968	c
1969	      if(cosmo_on.and.cosmo_phase.eq.1) then
1970	         converged           = .false.
1971	         egas                = etnew+enuc
1972	         cosmo_phase         = 2
1973	         ocosmo_got_gasphase = .true.
1974	         if(odbug) write(LuOut,*) 
1975	     &     'gas_phase done, do sol-phase now ...'
1976	c
1977	c     ----- reset convergence aids -----
1978	c
1979	         iter = 0
1980	         if(diising) then
1981	            call diis_driver(toll_s, derr,  ipol, icall, nfock,
1982	     &                       nbf_ao, geom, ao_bas_han, g_focks,
1983	     &                       g_dens, g_tmp, g_svecs, svals,
1984	     &                       diising, nodiis,int_mb(k_gdiis),
1985	     ,           lkeeps,g_s12m,g_s12p,.true.,
1986	     $           nconstr,multipliers0,dbl_mb(k_mdiis))
1987	         endif
1988	         damping=.true.
1989	         if(damping) then
1990	         endif
1991	c
1992	         call ga_sync()
1993	         go to 3000
1994	      elseif(cosmo_on) then
1995	         esol      =etnew+enuc
1996	      endif
1997	      if (odftps) call pstat_on(ps_scfend)
1998	      call ga_sync()
1999	c
2000	c     Scale the zora eigenvalues and energy
2001	      ener_scal = 0.d0
2002	      if (do_zora) then
2003	        call dft_zora_scale(
2004	     &                   rtdb,g_dens_at,nexc,  ! Added by FA
2005	     &                   geom, 
2006	     &                   ao_bas_han,
2007	     &                   nbf,
2008	     &                   nbf_ao,
2009	     &                   g_dens,
2010	     &                   g_s,
2011	     &                   g_movecs,
2012	     &                   g_zora_scale_sf,
2013	     &                   dbl_mb(k_eval(1)),
2014	     &                   dbl_mb(k_occ),
2015	     &                   noc,
2016	     &                   ipol,
2017	     &                   ener_scal)
2018	      end if
2019	c
2020	c MN solvation models -->
2021	c
2022	c save data for VEM excitation calculation and get data for VEM emission or regular GS SMD output:
2023	c  gstote = GS equilibrium or nonequilibrium (for emission) total energy (electrostatics only)
2024	c  gspol  = GS equilibrium polarization energy
2025	c  gspolneq = GS nonequilibrium polarization energy (for emission)
2026	c  gspoldyn = fast component of gspolneq
2027	c  estote = ES equilibrium VEM total energy (electrostatics only)
2028	c  espol = ES equilibrium polarization energy
2029	c
2030	      if(cosmo_on.and.cosmo_phase.eq.2) then
2031	          gstote = esol - gcds
2032	          if (do_cosmo_vem.ne.0) then
2033	           if (istep_cosmo_vem.eq.0) then
2034	            if (.not. rtdb_put(rtdb, 'dft:gstote', mt_dbl, 1, gstote))
2035	     $      call errquit(
2036	     $      'dft_scf: cannot put gstote in rtdb',
2037	     $      0,rtdb_err)
2038	           endif
2039	           if (do_cosmo_vem.eq.2.and.istep_cosmo_vem.eq.3) then
2040	             if(.not.rtdb_get(rtdb,'cosmo:estote',mt_dbl,1,estote))
2041	     $       call errquit(
2042	     $       'dft_scf: cannot get estote from rtdb',
2043	     $       0,rtdb_err)
2044	             if(.not.rtdb_get(rtdb,'cosmo:espol',mt_dbl,1,espol))
2045	     $       call errquit(
2046	     $       'dft_scf: cannot get espol from rtdb',
2047	     $       0,rtdb_err)
2048	             if(.not.rtdb_get(rtdb,'cosmo:gspolneq',mt_dbl,1,gspolneq))
2049	     $       call errquit(
2050	     $       'dft_scf: cannot get gspolneq from rtdb',
2051	     $       0,rtdb_err)
2052	             if(.not.rtdb_get(rtdb,'cosmo:gspoldyn',mt_dbl,1,gspoldyn))
2053	     $       call errquit(
2054	     $       'dft_scf: cannot get gspoldyn from rtdb',
2055	     $       0,rtdb_err)
2056	           endif
2057	          endif
2058	          if (do_cosmo_vem.ne.0.or.do_cosmo_smd) then
2059	           if(.not.rtdb_get(rtdb,'cosmo:gspol',mt_dbl,1,gspol))
2060	     $     call errquit(
2061	     $     'dft_scf: cannot get gspol from rtdb',
2062	     $     0,rtdb_err)
2063	          endif
2064	      endif
2065	c
2066	      call ga_sync()
2067	c
2068	c <-- MN solvation models
2069	c
2070	      if (me.eq.0.and.oprint)then
2071	         if (.not.converged)then
2072	            write(LuOut,*)
2073	            call util_print_centered(LuOut,
2074	     &           'Calculation failed to converge', 20, .true.)
2075	            write(LuOut,*)
2076	         endif
2077	c
2078	c        Tally up last energy 
2079	c
2080	         if (nExc.eq.1)then
2081	c  jbecca START: adding in eelec here
2082	              Etnew = Ecore + Ecoul + Exc(1) + Edisp + eelec +
2083	     T           tdots
2084	         else
2085	c  jbecca START: adding in eelec here
2086	              Etnew = Ecore + Ecoul + Exc(1) + Exc(2) + Edisp +
2087	     E           eelec + tdots
2088	         endif
2089	c
2090	c        Add in cosmo contributions
2091	c
2092	         if (cosmo_on.and.cosmo_phase.eq.2) then
2093	           if (do_cosmo_smd) then
2094	             etnew = etnew + ecosmo + gcds
2095	           else
2096	             etnew = etnew + ecosmo
2097	           end if
2098	         end if
2099	c
2100	c        DIM/QM JEM
2101	c        Add DIM energy
2102	c        NOTE: Why are we redoing this energy sum?
2103	         if(ldimqm .and. dimqm_go) then
2104	c  jbecca START: it appears this was missed in the house-cleaning
2105	c            call dimqm_energy(edimqm)
2106	            call dimqm_getenergy(edimqm)
2107	c  jbecca END
2108	            Etnew = Etnew + Edimqm
2109	         endif
2110	
2111	c        DIM/QM JEM
2112	        
2113	         dft_time = dft_time+util_wallsec()
2114	         if (nexc.le.1)then
2115	          write(LuOut,222)etnew+enuc, 
2116	     &                      ecore, 
2117	     &                      ecoul, 
2118	     &                      exc(1), 
2119	     &                      enuc
2120	         else
2121	          write(LuOut,223)etnew+enuc, 
2122	     &                      ecore, 
2123	     &                      ecoul, 
2124	     &                      exc(1), 
2125	     &                      exc(2), 
2126	     &                      enuc
2127	         end if
2128	         if (abs(Edisp).gt.0.0d0) then
2129	          write(LuOut,224)Edisp
2130	         endif
2131	         if (cosmo_on.and.cosmo_phase.eq.2) then
2132	          if (do_cosmo_smd) then
2133	           write(LuOut,225) ecosmo+gcds
2134	          else
2135	           write(LuOut,225) ecosmo
2136	          end if
2137	         endif
2138	         if (do_zora) write(luout,2221) ener_scal
2139	         write(luout,2222) rho_n
2140	         write(luout,2223) dft_time
2141	c
2142	      endif
2143	c
2144	c MN solvation models -->
2145	c
2146	c equilibrium GS cosmo-smd output
2147	c
2148	      if (me.eq.0.and.oprint)then
2149	         if(cosmo_on.and.cosmo_phase.eq.2.and.
2150	     $           istep_cosmo_vem.eq.0) then
2151	            call cosmo_smd_output(egas, esol, do_cosmo_smd, gcds, 
2152	     $            gstote, gspol)
2153	         endif
2154	c
2155	c cosmo-vem (emission energy) output
2156	c
2157	         if(cosmo_on.and.cosmo_phase.eq.2.and.
2158	     $ istep_cosmo_vem.eq.3.and.do_cosmo_vem.eq.2) then
2159	          gstote = gstote - gspol + gspolneq
2160	          call cosmo_vem_output(estote, espol, gstote, gspolneq, 
2161	     $              gspoldyn)
2162	         endif
2163	         call util_flush(LuOut)
2164	      endif  ! me.eq.0.and.oprint
2165	c
2166	c <-- MN solvation models
2167	c
2168	 1970 continue
2169	c
2170	c     do analysis of MO occupations per irrep
2171	c
2172	      call print_irrep_occp(ao_bas_han, nbf_ao, int_mb(k_ir),
2173	     &                      dbl_mb(k_occ), ipol)
2174	c
2175	c     calculate final cosmo charges
2176	c
2177	      if (.not.rtdb_get(rtdb,'cosmo_esp',mt_log,1,cosmo_esp)) 
2178	     +  cosmo_esp=.false.
2179	      if (cosmo_esp) then
2180	       if(ga_nodeid().eq.0)
2181	     +  write(luout,*) "Calculating cosmo esp charges"
2182	        cosmo_file = 'cosmo.xyz'
2183	        if(ipol.eq.2)  ! separate components
2184	     &    call ga_dadd(1.d0,g_dens(1),-1.d0,g_dens(2),g_dens(1))
2185	        call cosmo_charges_from_dmat(rtdb, ao_bas_han, geom,
2186	     &          ecosmo, odbug, ipol, g_dens, cosmo_file)
2187	        if (ipol.eq.2) ! reinstate total in g_dens(1)
2188	     &    call ga_dadd(one, g_dens(1), one, g_dens(2), g_dens(1))
2189	      end if ! cosmo_esp
2190	c
2191	c     DIM/QM JEM
2192	c     Final DIM dipoles
2193	c
2194	      if (ldimqm) then
2195	        call dimqm_main(rtdb, ao_bas_han, geom, g_dens, .true.)
2196	      end if
2197	
2198	c
2199	c     Print all the eigenvalues
2200	c
2201	      nprint = nmo(1)
2202	      if (ga_nodeid() .eq. 0) then
2203	        if (util_print('final evals', print_high)) then
2204	         do ispin = 1, ipol
2205	            if (ipol.eq.1) then
2206	              call util_print_centered(6,'Final eigenvalues',
2207	     &           20,.true.)
2208	            else if (ipol.eq.2.and.ispin.eq.1) then
2209	              call util_print_centered(6,'Final alpha eigenvalues',
2210	     &           20,.true.)
2211	            else
2212	              call util_print_centered(6,'Final beta eigenvalues',
2213	     &           20,.true.)
2214	            end if ! ipol
2215	            call output(dbl_mb(k_eval(ispin)),1,nprint,1,1,nmo,1,1)
2216	            write(6,*)
2217	            call util_flush(6)
2218	         end do ! ispin
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(2218,10)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
2219	        end if ! final evals
2220	      end if ! ga_nodeid()  
2221	c
2222	c     Vector analysis stolen from rohf.F
2223	c
2224	      do ispin = 1, ipol
2225	         call movecs_fix_phase(g_movecs(ispin))
2226	         if (util_print('final vectors analysis', print_default)) then
2227	           ilo = 1
2228	           ihi = nmo(ispin)
2229	           if (ipol.eq.1) then
2230	              blob='DFT Final Molecular Orbital Analysis'
2231	           else if(ipol.eq.2.and.ispin.eq.1) then
2232	              blob='DFT Final Alpha Molecular Orbital Analysis' 
2233	           else
2234	              blob='DFT Final Beta Molecular Orbital Analysis' 
2235	           endif
2236	           
2237	           call movecs_print_anal(ao_bas_han, ilo, ihi, tanalyze, 
2238	     &          g_movecs(ispin), 
2239	     &          blob, 
2240	     &          .true., dbl_mb(k_eval(ispin)), oadapt, 
2241	     &          int_mb(k_ir+(ispin-1)*nbf_ao),
2242	     &          .true., dbl_mb(k_occ+(ispin-1)*nbf_ao))
2243	         endif
2244	      enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(2244,7)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
2245	
2246	      if (.not. rtdb_get(rtdb, 'dft:molden', mt_log, 1, molden))
2247	     &   molden=.false.
2248	      if(molden) call dft_nwmolden(rtdb,geom,
2249	     I     ipol,dbl_mb(k_eval(1)),
2250	     O     dbl_mb(k_occ),
2251	     I     int_mb(k_ir),
2252	     N     nbf_ao, nmo,
2253	     I     g_movecs,scftype,'write')
2254	
2255	      if (oprint_final_vecs) then
2256	         if (me .eq. 0) then
2257	            call util_print_centered(6,'Final MO vectors',40,.true.)
2258	            write(6,*)
2259	            call util_flush(6)
2260	         end if
2261	         call ga_sync()
2262	         do ispin = 1, ipol
2263	            call ga_print(g_movecs(ispin))
2264	            call util_flush(6)
2265	         end do
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(2265,10)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
2266	      end if
2267	c
2268	c Jorge Garza/Begin
2269	c
2270	      if (condfukui.eq.1) then
2271	         call fukui(g_movecs, k_eval, tol2e, rtdb, nExc, iVxc_opt, 
2272	     &              g_xcinv, IOLGC, g_wght, g_xyz, g_nq, wght_GA,
2273	     &              rho_n, irdens_atom,
2274	     &              icetobfr, natoms)
2275	      endif
2276	c
2277	c Jorge Garza/End
2278	c
2279	      if (mulliken) then
2280	         call dft_mulwrap(me,g_dens,g_s)
2281	c Qin / print Lowdin populations.
2282	        if (.not. ga_duplicate(g_fock, g_tmp2, 'ga_temp'))
2283	     &       call errquit('dft_scf: error creating ga',0,GA_ERR)
2284	        if (me.eq.0) call dft_header
2285	     &        (' Total Density - Lowdin Population Analysis')
2286	        call diis_bld12(toll_s, svals, g_svecs,  g_tmp2, g_tmp, 3)
2287	        call lowd_pop(geom, ao_bas_han, g_dens(1), g_tmp2, g_tmp)
2288	        if (ipol.eq.2)then
2289	         if (me.eq.0)call dft_header
2290	     &        (' Spin Density - Lowdin Population Analysis')
2291	         call ga_dadd(1d0,g_dens(1),-2.d0,g_dens(2),g_dens(2))
2292	         call lowd_pop(geom,ao_bas_han,g_dens(2), g_tmp2, g_tmp)
2293	         call ga_dadd(1d0,g_dens(1),-1.d0,g_dens(2),g_dens(2))
2294	         call ga_dscal(g_dens(2),0.5d0)
2295	        endif
2296	        if (.not. ga_destroy(g_tmp2)) call errquit
2297	     &    ('dft_scf: could not destroy g_tmp2', 0, GA_ERR)
2298	      endif
2299	c     
2300	c     end infinite loop for SCF iterations
2301	c     
2302	c     Store energy and convergence status ... must store before
2303	c     write movecs since date of insertion is used.
2304	c     
2305	      if (.not. rtdb_put(rtdb,'uhf:coulomb', mt_dbl, 1, Ecoul)) call
2306	     $     errquit('uhf: writing ecoul failed', 0, RTDB_ERR)
2307	c
2308	      if (.not. rtdb_put(rtdb, 'dft:energy', MT_DBL, 1, (Etnew+Enuc)))
2309	     &   call errquit('dft_scf: failed to store energy in rtdb', 0,
2310	     &       RTDB_ERR)
2311	      if (.not. rtdb_put(rtdb, 'dft:converged', MT_LOG, 1, converged))
2312	     &   call errquit('dft_scf: failed to store converged in rtdb', 0,
2313	     &       RTDB_ERR)
2314	      if (.not. rtdb_put(rtdb, 'dft:alpha irreps', MT_INT, nbf_ao, 
2315	     &   int_mb(k_ir)))
2316	     &   call errquit('dft_scf: failed to MO irreps in rtdb', 0,
2317	     &       RTDB_ERR)
2318	      if (ipol.eq.2) then
2319	      if (.not. rtdb_put(rtdb, 'dft:beta irreps', MT_INT, nbf_ao, 
2320	     &   int_mb(k_ir+nbf_ao)))
2321	     &   call errquit('dft_scf: failed to MO irreps in rtdb', 0,
2322	     &       RTDB_ERR)
2323	      endif
2324	c
2325	c     if present, force noscf=f to avoid having it in future restarts
2326	      if (noscf) then 
2327	        noscf = .false.
2328	        if (.not.rtdb_put(rtdb, 'dft:noscf', mt_log, 1, noscf))
2329	     &   call errquit('dft_scf: failed to store nscf rtdb', 0,
2330	     &       RTDB_ERR)
2331	      endif ! noscf
2332	c
2333	c     output energies and eigenvectors to disk
2334	c     
2335	      if (.not.movecs_write(rtdb, ao_bas_han, movecs_out, 'dft', title,
2336	     &                      nbf_ao, ipol, nmo, dbl_mb(k_occ), nbf_ao, 
2337	     &                      dbl_mb(k_eval(1)), nbf_ao, g_movecs))
2338	     &                      call errquit('dft_scf: movec_write failed',
2339	     &                      0, DISK_ERR)
2340	c
2341	c     Write out the alpha/beta split eigenvalues
2342	c
2343	      if (.not. rtdb_get(rtdb,'dft:save_evals',mt_log,1,save_evals))
2344	     c     save_evals=.false.
2345	      if(save_evals) then
2346	         call dft_print_evals_ab(
2347	     c        nbf_ao, dbl_mb(k_occ), dbl_mb(k_eval(1)))
2348	         save_evals=.false.
2349	c     unset save evals
2350	         if (.not. rtdb_put(rtdb,'dft:save_evals',mt_log,1,save_evals))
2351	     &        call errquit('dft_scf: rtdbput failed',1234,RTDB_ERR)
2352	      endif
2353	c     
2354	c     Shut down DIIS.
2355	c     
2356	      if (icall(1).gt.0 .or. noscf)then
2357	         call diis_driver(toll_s, derr(1),  ipol, icall, nfock, 
2358	     &                 nbf_ao, geom, ao_bas_han, g_focks, g_dens(1), 
2359	     &                    g_tmp, g_svecs, svals, diising, nodiis,
2360	     .        int_mb(k_gdiis),lkeeps,g_s12m,g_s12p,.true.,
2361	     $           nconstr,multipliers0,dbl_mb(k_mdiis))
2362	      endif
2363	      if(nconstr.ne.0) then
2364	         if(k_hess.ne.-1) then
2365	            if (.not. MA_free_heap(l_hess))
2366	     .           call errquit(' dft_scf:cannot popstack',111, MA_ERR)
2367	         endif
2368	         if(k_mdiis.ne.-1) then
2369	            if (.not. MA_free_heap(l_mdiis))
2370	     .           call errquit(' dft_scf:cannot popstack',111, MA_ERR)
2371	         endif
2372	      endif
2373	      if(k_gdiis.ne.-1) then
2374	         if (.not. MA_free_heap(l_gdiis))
2375	     .        call errquit(' dft_scf:cannot popstack',111, MA_ERR)
2376	      endif
2377	c     
2378	c     If open shell compute overlap of alpha orbitals with beta orbitals.
2379	c     
2380	      if (ipol.gt.1 .and. util_print('final overlap',print_default))then
2381	         call dft_mxspin_ovlp(nbf_ao,nmo,ao_bas_han, g_movecs(1), 
2382	     &        g_movecs(2),g_tmp)
2383	      endif
2384	c
2385	      if (wght_GA)then
2386	         if (.not. ga_destroy(g_wght)) call errquit
2387	     &      ('dft_scf: could not destroy g_wght', 0, GA_ERR)
2388	         if (.not. ga_destroy(g_xyz)) call errquit
2389	     &      ('dft_scf: could not destroy g_xyz', 0, GA_ERR)
2390	         if (.not. ga_destroy(g_nq)) call errquit
2391	     &      ('dft_scf: could not destroy g_nq', 0, GA_ERR)
2392	      endif
2393	c     
2394	c     Restore alpha and beta densities.
2395	c
2396	      if (ipol .gt. 1)
2397	     &   call ga_dadd(one,g_dens(1),onem,g_dens(2),g_dens(1))
2398	c     
2399	c     computation of <S2> for open shell
2400	c     
2401	      if (ipol.gt.1 .and. util_print('final s2', print_low))then
2402	
2403	         call dft_s2_value(geom,AO_bas_han,.false.,noc(1),noc(2),
2404	     &        nbf_ao,g_dens(1),g_dens(2))
2405	
2406	      endif
2407	c
2408	c     write to rtdb that fractional occupancy exists
2409	c
2410	      if(fon.or.gotsmear(ssmear)) then
2411	      if (.not.rtdb_put(rtdb, 'dft:fractional_occup', mt_log, 1,
2412	     &   .true.))call errquit('dftscf: cannot write rtdb',1, DISK_ERR)
2413	      endif
2414	c     
2415	c     computation of moments
2416	c
2417	      if (natoms .gt. 1) then
2418	         if(oprintinertia)call geom_momint(geom)
2419	         call dft_mpole(rtdb, ao_bas_han, ipol, g_dens(1), g_dens(2))
2420	      endif
2421	c     
2422	c     print stolen for uhf.F
2423	c     
2424	      if (util_print('schwarz',print_high).and.(.not.CDFIT))then
2425	         call schwarz_print(natoms, nshells_ao)
2426	      endif
2427	c     
2428	      call dft_prevals('final',me,oprint_eval,oprint_vecs,
2429	     ,     g_movecs,dbl_mb(k_eval(1)),dbl_mb(k_occ))
2430	c
2431	c     calculate virtual spectrum
2432	c
2433	      lvspec = .false.
2434	      if (.not.rtdb_get(rtdb,'dft:lvspec',mt_log,1,lvspec)) 
2435	     &         lvspec=.false.
2436	      if (.not. rtdb_get(rtdb,'dft:owstart',mt_int,2,owstart)) 
2437	     &         lvspec=.false.
2438	      if (.not. rtdb_get(rtdb,'dft:owend',mt_int,2,owend)) 
2439	     &         lvspec=.false.
2440	      if (lvspec) then
2441	       call util_file_name('vspec',.false.,.false.,vspecfilename)
2442	       call dft_vspec(rtdb, ao_bas_han, vspecfilename, ipol, nmo, 
2443	     &    nbf_ao, noc, g_movecs, k_eval, owstart, owend)
2444	      endif
2445	c
2446	c     ECCE printout
2447	c     
2448	      call movecs_ecce(nbf_ao, nmo, 1, nmo(1), dbl_mb(k_eval(1)),
2449	     &                 dbl_mb(k_occ), int_mb(k_ir), 
2450	     &                 g_movecs(1), 'dft', 'alpha')
2451	      if (ipol.eq.2)then ! spin-unrestricted
2452	         call movecs_ecce(nbf_ao, nmo, 1, nmo(2), dbl_mb(k_eval(2)),
2453	     &                    dbl_mb(k_occ+nbf_ao), int_mb(k_ir+nbf_ao), 
2454	     &                    g_movecs(2), 'dft', 'beta')
2455	      endif
2456	      call ecce_print1 ('total energy', mt_dbl, (Etold+Enuc), 1)
2457	      call ecce_print1 ('nuclear repulsion energy', mt_dbl, Enuc, 1)
2458	      call ecce_print1 ('coulomb energy', mt_dbl, Ecoul, 1)
2459	      call ecce_print1 ('exchange energy', mt_dbl, Exc(1), 1)
2460	      if (nexc.gt. 1)then
2461	         call ecce_print1 ('correlation energy', mt_dbl, Exc(2), 1)
2462	      endif
2463	c
2464	      if (.not.ma_chop_stack(l_ir))
2465	     &   call errquit('dft_scf: cannot chop stack',98, MA_ERR)
2466	c     
2467	      if (ipol.gt.1)then
2468	         if (.not. ga_destroy(g_fockt)) call errquit
2469	     &      ('dft_scf: could not destroy g_fockt', 0, GA_ERR)
2470	      endif
2471	c
2472	      if(lkeeps) then
2473	      if (.not. ga_destroy(g_s12p)) call errquit
2474	     &   ('dft_scf: could not destroy g_s12p', 0, GA_ERR)
2475	      if (.not. ga_destroy(g_s12m)) call errquit
2476	     &   ('dft_scf: could not destroy g_s12m', 0, GA_ERR)
2477	      endif
2478	c
2479	      call fock_2e_tidy(rtdb)
2480	c     
2481	      if (converged)then
2482	         call ecce_print_module_exit('dft', 'ok')
2483	      else
2484	         call ecce_print_module_exit('dft', 'failed')
2485	      endif
2486	c     
2487	c     eval deallocation moved here from inside iteration loop
2488	c     
2489	      if (.not.ma_chop_stack(lcntoce))
2490	     &   call errquit('dft_scf: cannot chop stack',99, MA_ERR)
2491	c
2492	      dft_scf = converged
2493	c
2494	c !!! BGJ
2495	      if (.not. rtdb_get(rtdb, 'bgj:poliz', mt_log,
2496	     &     1, do_poliz)) then
2497	         do_poliz = .false.
2498	      endif
2499	      if (do_poliz) then
2500	         write(LuOut,*)'*** dft_scf: calling cphf_poliz'
2501	         if (.not. cphf_poliz(rtdb)) ! Never executed.
2502	     $        call errquit(' cphf_poliz: failed from dft_scf !',0,
2503	     &       CALC_ERR)
2504	      endif
2505	c !!! BGJ
2506	c
2507	
2508	C
2509	C     Print out matrices to stdout (useful for development and debugging)
2510	C
2511	      if (.not.rtdb_get(rtdb, 'dft:print_mats', mt_log, 1, lprint_mats))
2512	     $     lprint_mats = .false.
2513	      if (lprint_mats) call dft_print_mats (g_s, svals, g_svecs,
2514	     $     nmo, g_dens, g_focks)
2515	
2516	      
2517	C
2518	C     Save select matrices to file
2519	C     
2520	      if (.not.rtdb_get(rtdb, 'dft:save_mats', mt_log, 1, lsave_mats))
2521	     $     lsave_mats = .false.
2522	      if (lsave_mats) call dft_save_mats (g_dens)
2523	
2524	      
2525	      if (.not. ga_destroy(g_tmp)) call errquit
2526	     &   ('dft_scf: could not destroy g_tmp', 0, GA_ERR)
2527	      if (.not. ga_destroy(g_focks(1))) call errquit
2528	     &        ('dft_scf: could not destroy g_focks1', 0, GA_ERR)
2529	      if (ipol.gt.1) then
2530	         if (.not. ga_destroy(g_focks(2))) call errquit
2531	     &           ('dft_scf: could not destroy g_focks2', 0, GA_ERR)
2532	      end if
2533	c
2534	c     == if frozen embedding ==
2535	      if (frozemb) then
2536	        if (.not. ga_destroy(g_frozemb)) call errquit
2537	     &     ('dft_scf: could not destroy g_frozemb', 0, GA_ERR)
2538	cc AJL/Begin/FDE
2539	        if (frozemb_fde) 
2540	c Destroy all allocations and reset variables that have been altered
2541	     &  call dft_frozemb_fde_end(rtdb,g_vxc_fde,g_dens_fde, g_xcinv_fde)
2542	      end if !frozemb
2543	cc AJL/End
2544	c
2545	cdft...Deallocate cdft arrays
2546	      if(lcdft) then
2547	        do i = 1, nconstr
2548	         if (.not. ga_destroy(g_constr(i))) call errquit
2549	     &      ('dft_scf: could not destroy g_constr', 0, GA_ERR)
2550	        enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scf.F(2550,9)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
2551	
2552	        if (.not. ga_destroy(g_fockv(1))) call errquit
2553	     &      ('dft_scf: could not destroy g_fockv', 0, GA_ERR)
2554	
2555	        if(ipol.gt.1) then
2556	         if (.not. ga_destroy(g_fockv(2))) call errquit
2557	     &      ('dft_scf: could not destroy g_fockv', 0, GA_ERR)
2558	        endif
2559	      endif
2560	c
2561	c     Deallocate zora related arrays
2562	      if (do_zora) then
2563	       if (.not. ga_destroy(g_rel(1))) call errquit(
2564	     &          'dft_scf: ga_destroy failed ',0, GA_ERR)
2565	       if (.not. ga_destroy(g_zora_scale_sf(1))) call errquit(
2566	     &          'dft_scf: ga_destroy failed ',0, GA_ERR)
2567	       if(ipol.gt.1) then
2568	         if (.not. ga_destroy(g_rel(2))) call errquit(
2569	     &        'dft_scf: ga_destroy failed ',0, GA_ERR)
2570	         if (.not. ga_destroy(g_zora_scale_sf(2))) call errquit(
2571	     &        'dft_scf: ga_destroy failed ',0, GA_ERR)
2572	       end if
2573	      end if
2574	c
2575	c     deallocate x2c arrays if necessary
2576	      if (do_x2c) then
2577	         call x2c_scf_terminate(rtdb,ipol,g_rel,
2578	     g     g_x2c_u,g_x2c_u2c,g_x2c_c2u)
2579	      end if ! do_x2c
2580	c
2581	c     AOR begin
2582	c     deallocate xdm arrays
2583	      if (lxdm.eq.1) then
2584	         call xc_xdm_cleanup(rtdb)
2585	      endif
2586	c     AOR end
2587	
2588	      if (odftps) call pstat_off(ps_scfend)
2589	      return
2590	c     
2591	 21   format(/,10x,' Memory utilization after 1st SCF pass: ')
2592	    1 format(/,
2593	     &     1x,'  convergence    iter        energy       DeltaE   ',
2594	     &     'RMS-Dens  Diis-err    time'/
2595	     &     1x,'---------------- ----- ----------------- --------- ',
2596	     &     '--------- ---------  ------')
2597	    2 format(1x,'d=',i2,',ls=',f3.1,',diis',1x,i5,f18.10,
2598	     &     1p,3d10.2,0p,f8.1)
2599	    3 format(51x,1p,2d10.2)
2600	 22   format(1x,'d=',i2,',ls=',f3.1,6x,i5,f18.10,
2601	     &     1p,2d10.2,10x,0p,f8.1)
2602	 23   format(51x,1p,1d10.2)
2603	 1111 format(15x,'Core Energy:              ',f22.10)
2604	c
2605	 222  format(//
2606	     &     '         Total DFT energy =', f22.12/
2607	     &     '      One electron energy =', f22.12/
2608	     &     '           Coulomb energy =', f22.12/
2609	     &     '    Exchange-Corr. energy =', f22.12/
2610	     &     ' Nuclear repulsion energy =', f22.12/)
2611	c
2612	 223  format(//
2613	     &     '         Total DFT energy =', f22.12/
2614	     &     '      One electron energy =', f22.12/
2615	     &     '           Coulomb energy =', f22.12/
2616	     &     '          Exchange energy =', f22.12/
2617	     &     '       Correlation energy =', f22.12/
2618	     &     ' Nuclear repulsion energy =', f22.12/)
2619	 224  format('    Dispersion correction =', f22.12/)
2620	 225  format('             COSMO energy =', f22.12/)
2621	c
2622	 2221 format('       Scaling correction =', f22.12/)
2623	 2222 format(' Numeric. integr. density =', f22.12/)
2624	 2223 format('     Total iterative time =', f9.1,'s'//)
2625	c
2626	 4224 format(10x,' HOMO = ',f7.3,' LUMO = ',f7.3,
2627	     &              ' RLSHIFT = ',f7.3,' HL_GAP = ',f7.3)
2628	c     
2629	      end
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: PRINT_IRREP_OCCP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PRINT_IRREP_OCCP) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F(1,18)
  -> EXTERN: (30,11) ga_nodeid_
  -> EXTERN: (31,20) bas_geom_
  -> EXTERN: (32,11) errquit_
  -> EXTERN: (34,15) sym_group_name_
  -> EXTERN: (35,20) sym_char_table_
  -> EXTERN: (37,11) errquit_
  -> EXTERN: (57,10) for_cpystr
  -> EXTERN: (58,10) for_write_seq_lis
  -> EXTERN: (59,15) util_print_centered_
  -> EXTERN: (60,10) for_write_seq_lis
  -> EXTERN: (62,10) for_write_seq_fmt_xmit
  -> EXTERN: (62,10) for_write_seq_fmt_xmit
  -> EXTERN: (62,10) for_write_seq_fmt
  -> EXTERN: (63,10) for_write_seq_fmt_xmit
  -> EXTERN: (63,10) for_write_seq_fmt_xmit
  -> EXTERN: (63,10) for_write_seq_fmt
  -> EXTERN: (65,12) for_write_seq_fmt_xmit
  -> EXTERN: (65,12) for_write_seq_fmt_xmit
  -> EXTERN: (65,12) for_write_seq_fmt
  -> EXTERN: (67,10) for_write_seq_lis


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F(41,10)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.330 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F(46,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between totocc(irs(i,1),1) (47:14) and totocc(irs(i,1),1) (47:14)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F(51,12)
   remark #25427: Loop Statements Reordered
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between totocc(irs(i,1),2) (53:14) and totocc(irs(i,1),2) (53:14)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F(64,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (65:12) and at (65:12)
   remark #25015: Estimate of max trip count of loop=20
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F(1,18):remark #34051: REGISTER ALLOCATION : [print_irrep_occp_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     190
            Global    :      43
            Local     :     147
        Regenerable   :     138
        Spilled       :       6
        
    Routine stack
        Variables     :     224 bytes*
            Reads     :       2 [3.17e-01 ~ 0.3%]
            Writes    :      23 [1.00e+01 ~ 10.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	      subroutine print_irrep_occp(basis, nbf_ao, irs, occ, nspin)
!INLINE REPORT: (PRINT_IRREP_OCCP) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F(1,18)
!  -> EXTERN: (30,11) ga_nodeid_
!  -> EXTERN: (31,20) bas_geom_
!  -> EXTERN: (32,11) errquit_
!  -> EXTERN: (34,15) sym_group_name_
!  -> EXTERN: (35,20) sym_char_table_
!  -> EXTERN: (37,11) errquit_
!  -> EXTERN: (57,10) for_cpystr
!  -> EXTERN: (58,10) for_write_seq_lis
!  -> EXTERN: (59,15) util_print_centered_
!  -> EXTERN: (60,10) for_write_seq_lis
!  -> EXTERN: (62,10) for_write_seq_fmt_xmit
!  -> EXTERN: (62,10) for_write_seq_fmt_xmit
!  -> EXTERN: (62,10) for_write_seq_fmt
!  -> EXTERN: (63,10) for_write_seq_fmt_xmit
!  -> EXTERN: (63,10) for_write_seq_fmt_xmit
!  -> EXTERN: (63,10) for_write_seq_fmt
!  -> EXTERN: (65,12) for_write_seq_fmt_xmit
!  -> EXTERN: (65,12) for_write_seq_fmt_xmit
!  -> EXTERN: (65,12) for_write_seq_fmt
!  -> EXTERN: (67,10) for_write_seq_lis
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F(1,18):remark #34051: REGISTER ALLOCATION : [print_irrep_occp_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm4]
!        
!    Routine temporaries
!        Total         :     190
!            Global    :      43
!            Local     :     147
!        Regenerable   :     138
!        Spilled       :       6
!        
!    Routine stack
!        Variables     :     224 bytes*
!            Reads     :       2 [3.17e-01 ~ 0.3%]
!            Writes    :      23 [1.00e+01 ~ 10.0%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	*
3	      implicit none
4	c
5	#include "errquit.fh"
6	#include "bas.fh"
7	#include "inp.fh"
8	#include "global.fh"
9	#include "sym.fh"
10	#include "mafdecls.fh"
11	#include "cscfps.fh"
12	      integer basis
13	      integer nbf_ao
14	      integer nspin
15	      integer irs(nbf_ao,nspin)
16	      double precision occ(nbf_ao,nspin)
17	c
18	      integer i, isp
19	      integer geom
20	c
21	      integer maxireps
22	      parameter (maxireps=20)
23	      integer nir, nop, iclass_dim(maxireps)
24	      character*8 zir(maxireps), zclass(maxireps)
25	      double precision chars(maxireps*maxireps)
26	      double precision totocc(maxireps,2)
27	      character*8 group_name
28	      character*255 title
29	c
30	      if (ga_nodeid() .eq. 0) then
31	         if (.not. bas_geom(basis, geom))
32	     $    call errquit('print_irrep_occp',0, BASIS_ERR)
33	c
34	         call sym_group_name(geom, group_name)
35	         if (.not. sym_char_table(group_name, nop, nir, iclass_dim,
36	     $        zir, zclass, chars))
37	     $    call errquit('print_irrep_occp: no char table',0, UNKNOWN_ERR)
38	c
39	         if (nir .eq. 1)  return   ! no symmetry
40	c
41	         do i = 1, maxireps
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F(41,10)
!   remark #15300: LOOP WAS VECTORIZED
!   remark #15449: unmasked aligned unit stride stores: 2 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 7 
!   remark #15477: vector cost: 3.000 
!   remark #15478: estimated potential speedup: 2.330 
!   remark #15488: --- end vector cost summary ---
!LOOP END
42	           totocc(i,1) = 0.0
43	           totocc(i,2) = 0.0
44	         enddo
45	         if (nspin .eq. 2) then
46	           do i = 1, nbf_ao
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F(46,12)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed FLOW dependence between totocc(irs(i,1),1) (47:14) and totocc(irs(i,1),1) (47:14)
!   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
!LOOP END
47	             totocc(irs(i,1),1) = totocc(irs(i,1),1) + occ(i,1)
48	             totocc(irs(i,2),2) = totocc(irs(i,2),2) + occ(i,2)
49	           enddo
50	         else
51	           do i = 1, nbf_ao
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F(51,12)
!   remark #25427: Loop Statements Reordered
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed ANTI dependence between totocc(irs(i,1),2) (53:14) and totocc(irs(i,1),2) (53:14)
!   remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
!LOOP END
52	             totocc(irs(i,1),1) = totocc(irs(i,1),1) + 0.5*occ(i,1)
53	             totocc(irs(i,1),2) = totocc(irs(i,1),2) + 0.5*occ(i,1)
54	           enddo
55	         endif
56	c
57	         title = 'Occupations of the irreducible representations'
58	         write (6,*)
59	         call util_print_centered(6,title, 40, .true.)
60	         write(6,*)
61	
62	         write (6,1001) 'irrep   ','   alpha','    beta'
63	         write (6,1001) '--------','--------','--------'
64	         do i = 1, nir
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/print_irrep_occp.F(64,10)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed OUTPUT dependence between at (65:12) and at (65:12)
!   remark #25015: Estimate of max trip count of loop=20
!LOOP END
65	           write (6,1000) zir(i), totocc(i,1), totocc(i,2)
66	         enddo
67	         write(6,*)
68	c
69	      endif
70	c
71	 1000 format(21x,a8,2(5x,f8.1))
72	 1001 format(21x,a8,2(5x,a8))
73	c
74	      end
75	c $Id$
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_FOCKBLD

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_FOCKBLD) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(1,18)
  -> EXTERN: (119,18) rtdb_get_
  -> EXTERN: (121,8) errquit_
  -> EXTERN: (124,18) rtdb_get_
  -> EXTERN: (126,8) errquit_
  -> EXTERN: (130,19) rtdb_get_
  -> EXTERN: (132,10) errquit_
  -> EXTERN: (140,19) util_module_avail_
  -> EXTERN: (142,15) dimqm_init_
  -> EXTERN: (143,15) dimqm_used_
  -> EXTERN: (144,15) dimqm_getgo_
  -> EXTERN: (151,10) ga_nodeid_
  -> EXTERN: (152,19) pstat_on_
  -> EXTERN: (157,15) rtdb_get_
  -> EXTERN: (159,29) for_write_seq_lis
  -> EXTERN: (171,18) ma_push_get_
  -> EXTERN: (173,11) errquit_
  -> EXTERN: (184,17) xc_sicdeg_
  -> EXTERN: (192,12) dft_tstamp_
  -> EXTERN: (193,19) pstat_on_
  -> EXTERN: (194,12) ga_zero_
  -> EXTERN: (196,10) util_print_
  -> EXTERN: (197,22) util_cpusec_
  -> EXTERN: (198,12) int_1e_ga_
  -> EXTERN: (199,10) util_print_
  -> EXTERN: (200,22) util_cpusec_
  -> EXTERN: (203,10) util_print_
  -> EXTERN: (205,12) for_write_seq_fmt
  -> EXTERN: (210,10) util_print_
  -> EXTERN: (211,18) ga_ddot_
  -> EXTERN: (212,13) ga_nodeid_
  -> EXTERN: (213,13) for_write_seq_fmt
  -> EXTERN: (221,16) rtdb_get_
  -> EXTERN: (227,8) errquit_
  -> EXTERN: (231,12) ga_copy_
  -> EXTERN: (232,30) ga_copy_
  -> EXTERN: (236,11) rtdb_get_
  -> EXTERN: (241,17) ga_ddot_
  -> EXTERN: (242,14) int_1e_ga_
  -> EXTERN: (245,32) ga_copy_
  -> EXTERN: (251,15) ga_ddot_
  -> EXTERN: (252,14) int_1e_ga_
  -> EXTERN: (256,11) int_1e_ga_
  -> EXTERN: (260,19) rtdb_put_
  -> EXTERN: (261,12) errquit_
  -> EXTERN: (264,12) util_print_
  -> EXTERN: (265,25) util_cpusec_
  -> EXTERN: (268,14) int_1e_ga_
  -> EXTERN: (271,11) int_1e_ga_
  -> EXTERN: (274,12) util_print_
  -> EXTERN: (275,25) util_cpusec_
  -> EXTERN: (278,12) util_print_
  -> EXTERN: (280,12) for_write_seq_fmt
  -> EXTERN: (292,19) ga_duplicate_
  -> EXTERN: (293,12) errquit_
  -> EXTERN: (294,15) ga_zero_
  -> EXTERN: (295,15) cosmo_fock_
  -> EXTERN: (296,15) ga_add_
  -> EXTERN: (298,12) ga_add_
  -> EXTERN: (299,19) ga_destroy_
  -> EXTERN: (300,12) errquit_
  -> EXTERN: (308,9) ga_copy_
  -> EXTERN: (310,12) ga_sync_
  -> EXTERN: (322,14) ga_dadd_
  -> EXTERN: (324,17) ga_ddot_
  -> EXTERN: (326,25) ga_ddot_
  -> EXTERN: (330,14) ga_dadd_
  -> EXTERN: (335,17) ga_ddot_
  -> EXTERN: (343,16) rtdb_get_
  -> EXTERN: (345,16) rtdb_get_
  -> EXTERN: (348,24) dft_fant_
  -> EXTERN: (349,19) pstat_off_
  -> EXTERN: (354,16) ma_push_get_
  -> EXTERN: (355,10) errquit_
  -> EXTERN: (356,12) util_ga_mat_reduce_
  -> EXTERN: (359,16) ma_pop_stack_
  -> EXTERN: (360,10) errquit_
  -> EXTERN: (366,15) ga_dadd_
  -> EXTERN: (373,15) dfill_
  -> EXTERN: (375,19) ma_push_get_
  -> EXTERN: (376,13) errquit_
  -> EXTERN: (377,15) util_ga_mat_reduce_
  -> EXTERN: (381,19) ma_pop_stack_
  -> EXTERN: (382,13) errquit_
  -> EXTERN: (391,17) ga_duplicate_
  -> EXTERN: (392,11) errquit_
  -> EXTERN: (393,14) ga_zero_
  -> EXTERN: (394,14) dim_grid_quadv0_
  -> EXTERN: (396,16) ga_ddot_
  -> EXTERN: (398,25) ga_ddot_
  -> EXTERN: (400,14) ga_sync_
  -> EXTERN: (408,15) dft_tstamp_
  -> EXTERN: (409,22) pstat_on_
  -> EXTERN: (410,15) case_setflags_
  -> EXTERN: (411,15) dft_fitcd_
  -> EXTERN: (416,22) pstat_off_
  -> EXTERN: (424,12) ga_zero_
  -> EXTERN: (429,22) ga_copy_
  -> EXTERN: (431,23) dft_tstamp_
  -> EXTERN: (433,19) pstat_on_
  -> EXTERN: (436,12) xc_getv_
  -> EXTERN: (441,14) ga_dadd_
  -> EXTERN: (444,19) pstat_off_
  -> EXTERN: (447,12) dft_tstamp_
  -> EXTERN: (448,19) pstat_on_
  -> EXTERN: (449,12) dft_getvc_
  -> EXTERN: (454,19) pstat_off_
  -> EXTERN: (462,21) ga_ddot_
  -> EXTERN: (463,22) ga_ddot_
  -> EXTERN: (465,21) ga_ddot_
  -> EXTERN: (469,14) ga_dadd_
  -> EXTERN: (471,10) ga_dadd_
  -> EXTERN: (480,33) ga_ddot_
  -> EXTERN: (481,16) ga_dadd_
  -> EXTERN: (510,16) dft_frozemb_fde_getvxc_
  -> EXTERN: (515,18) ga_dadd_
  -> EXTERN: (532,16) dft_frozemb_fde_getvxc_
  -> EXTERN: (537,18) ga_dadd_
  -> EXTERN: (549,14) xc_exact_pot_
  -> EXTERN: (554,38) ga_zero_
  -> EXTERN: (559,18) localize_sic_
  -> EXTERN: (561,16) xc_sic_
  -> EXTERN: (578,12) ga_dadd_
  -> EXTERN: (580,12) ga_dadd_
  -> EXTERN: (589,11) rtdb_get_
  -> EXTERN: (591,20) rtdb_get_
  -> EXTERN: (595,15) ga_zero_
  -> EXTERN: (596,15) dft_fock_efield_
  -> EXTERN: (601,18) ga_dadd_
  -> EXTERN: (602,21) ga_ddot_
  -> EXTERN: (604,18) ga_dadd_
  -> EXTERN: (605,18) ga_dadd_
  -> EXTERN: (606,21) ga_ddot_
  -> EXTERN: (607,18) ga_ddot_
  -> EXTERN: (609,18) errquit_
  -> EXTERN: (622,13) for_write_seq_fmt_xmit
  -> EXTERN: (622,13) for_write_seq_fmt_xmit
  -> EXTERN: (622,13) for_write_seq_fmt_xmit
  -> EXTERN: (622,13) for_write_seq_fmt_xmit
  -> EXTERN: (622,13) for_write_seq_fmt_xmit
  -> EXTERN: (622,13) for_write_seq_fmt_xmit
  -> EXTERN: (622,13) for_write_seq_fmt_xmit
  -> EXTERN: (622,13) for_write_seq_fmt
  -> EXTERN: (639,14) ga_dadd_
  -> EXTERN: (642,11) ga_dadd_
  -> EXTERN: (643,19) ga_destroy_
  -> EXTERN: (644,11) errquit_
  -> EXTERN: (648,19) ma_pop_stack_
  -> EXTERN: (649,15) errquit_
  -> EXTERN: (654,12) dft_tstamp_
  -> EXTERN: (656,19) pstat_off_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(518,11)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.850 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(518,11)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(442,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(482,9)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(516,11)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(538,11)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_fockbld_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :    1093
            Global    :     198
            Local     :     895
        Regenerable   :     755
        Spilled       :      20
        
    Routine stack
        Variables     :     376 bytes*
            Reads     :      22 [1.90e+00 ~ 1.9%]
            Writes    :      40 [1.99e+00 ~ 2.0%]
        Spills        :     112 bytes*
            Reads     :      25 [1.32e+00 ~ 1.3%]
            Writes    :      29 [1.94e+00 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	      subroutine dft_fockbld(rtdb,natoms,ntotel,
!INLINE REPORT: (DFT_FOCKBLD) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(1,18)
!  -> EXTERN: (119,18) rtdb_get_
!  -> EXTERN: (121,8) errquit_
!  -> EXTERN: (124,18) rtdb_get_
!  -> EXTERN: (126,8) errquit_
!  -> EXTERN: (130,19) rtdb_get_
!  -> EXTERN: (132,10) errquit_
!  -> EXTERN: (140,19) util_module_avail_
!  -> EXTERN: (142,15) dimqm_init_
!  -> EXTERN: (143,15) dimqm_used_
!  -> EXTERN: (144,15) dimqm_getgo_
!  -> EXTERN: (151,10) ga_nodeid_
!  -> EXTERN: (152,19) pstat_on_
!  -> EXTERN: (157,15) rtdb_get_
!  -> EXTERN: (159,29) for_write_seq_lis
!  -> EXTERN: (171,18) ma_push_get_
!  -> EXTERN: (173,11) errquit_
!  -> EXTERN: (184,17) xc_sicdeg_
!  -> EXTERN: (192,12) dft_tstamp_
!  -> EXTERN: (193,19) pstat_on_
!  -> EXTERN: (194,12) ga_zero_
!  -> EXTERN: (196,10) util_print_
!  -> EXTERN: (197,22) util_cpusec_
!  -> EXTERN: (198,12) int_1e_ga_
!  -> EXTERN: (199,10) util_print_
!  -> EXTERN: (200,22) util_cpusec_
!  -> EXTERN: (203,10) util_print_
!  -> EXTERN: (205,12) for_write_seq_fmt
!  -> EXTERN: (210,10) util_print_
!  -> EXTERN: (211,18) ga_ddot_
!  -> EXTERN: (212,13) ga_nodeid_
!  -> EXTERN: (213,13) for_write_seq_fmt
!  -> EXTERN: (221,16) rtdb_get_
!  -> EXTERN: (227,8) errquit_
!  -> EXTERN: (231,12) ga_copy_
!  -> EXTERN: (232,30) ga_copy_
!  -> EXTERN: (236,11) rtdb_get_
!  -> EXTERN: (241,17) ga_ddot_
!  -> EXTERN: (242,14) int_1e_ga_
!  -> EXTERN: (245,32) ga_copy_
!  -> EXTERN: (251,15) ga_ddot_
!  -> EXTERN: (252,14) int_1e_ga_
!  -> EXTERN: (256,11) int_1e_ga_
!  -> EXTERN: (260,19) rtdb_put_
!  -> EXTERN: (261,12) errquit_
!  -> EXTERN: (264,12) util_print_
!  -> EXTERN: (265,25) util_cpusec_
!  -> EXTERN: (268,14) int_1e_ga_
!  -> EXTERN: (271,11) int_1e_ga_
!  -> EXTERN: (274,12) util_print_
!  -> EXTERN: (275,25) util_cpusec_
!  -> EXTERN: (278,12) util_print_
!  -> EXTERN: (280,12) for_write_seq_fmt
!  -> EXTERN: (292,19) ga_duplicate_
!  -> EXTERN: (293,12) errquit_
!  -> EXTERN: (294,15) ga_zero_
!  -> EXTERN: (295,15) cosmo_fock_
!  -> EXTERN: (296,15) ga_add_
!  -> EXTERN: (298,12) ga_add_
!  -> EXTERN: (299,19) ga_destroy_
!  -> EXTERN: (300,12) errquit_
!  -> EXTERN: (308,9) ga_copy_
!  -> EXTERN: (310,12) ga_sync_
!  -> EXTERN: (322,14) ga_dadd_
!  -> EXTERN: (324,17) ga_ddot_
!  -> EXTERN: (326,25) ga_ddot_
!  -> EXTERN: (330,14) ga_dadd_
!  -> EXTERN: (335,17) ga_ddot_
!  -> EXTERN: (343,16) rtdb_get_
!  -> EXTERN: (345,16) rtdb_get_
!  -> EXTERN: (348,24) dft_fant_
!  -> EXTERN: (349,19) pstat_off_
!  -> EXTERN: (354,16) ma_push_get_
!  -> EXTERN: (355,10) errquit_
!  -> EXTERN: (356,12) util_ga_mat_reduce_
!  -> EXTERN: (359,16) ma_pop_stack_
!  -> EXTERN: (360,10) errquit_
!  -> EXTERN: (366,15) ga_dadd_
!  -> EXTERN: (373,15) dfill_
!  -> EXTERN: (375,19) ma_push_get_
!  -> EXTERN: (376,13) errquit_
!  -> EXTERN: (377,15) util_ga_mat_reduce_
!  -> EXTERN: (381,19) ma_pop_stack_
!  -> EXTERN: (382,13) errquit_
!  -> EXTERN: (391,17) ga_duplicate_
!  -> EXTERN: (392,11) errquit_
!  -> EXTERN: (393,14) ga_zero_
!  -> EXTERN: (394,14) dim_grid_quadv0_
!  -> EXTERN: (396,16) ga_ddot_
!  -> EXTERN: (398,25) ga_ddot_
!  -> EXTERN: (400,14) ga_sync_
!  -> EXTERN: (408,15) dft_tstamp_
!  -> EXTERN: (409,22) pstat_on_
!  -> EXTERN: (410,15) case_setflags_
!  -> EXTERN: (411,15) dft_fitcd_
!  -> EXTERN: (416,22) pstat_off_
!  -> EXTERN: (424,12) ga_zero_
!  -> EXTERN: (429,22) ga_copy_
!  -> EXTERN: (431,23) dft_tstamp_
!  -> EXTERN: (433,19) pstat_on_
!  -> EXTERN: (436,12) xc_getv_
!  -> EXTERN: (441,14) ga_dadd_
!  -> EXTERN: (444,19) pstat_off_
!  -> EXTERN: (447,12) dft_tstamp_
!  -> EXTERN: (448,19) pstat_on_
!  -> EXTERN: (449,12) dft_getvc_
!  -> EXTERN: (454,19) pstat_off_
!  -> EXTERN: (462,21) ga_ddot_
!  -> EXTERN: (463,22) ga_ddot_
!  -> EXTERN: (465,21) ga_ddot_
!  -> EXTERN: (469,14) ga_dadd_
!  -> EXTERN: (471,10) ga_dadd_
!  -> EXTERN: (480,33) ga_ddot_
!  -> EXTERN: (481,16) ga_dadd_
!  -> EXTERN: (510,16) dft_frozemb_fde_getvxc_
!  -> EXTERN: (515,18) ga_dadd_
!  -> EXTERN: (532,16) dft_frozemb_fde_getvxc_
!  -> EXTERN: (537,18) ga_dadd_
!  -> EXTERN: (549,14) xc_exact_pot_
!  -> EXTERN: (554,38) ga_zero_
!  -> EXTERN: (559,18) localize_sic_
!  -> EXTERN: (561,16) xc_sic_
!  -> EXTERN: (578,12) ga_dadd_
!  -> EXTERN: (580,12) ga_dadd_
!  -> EXTERN: (589,11) rtdb_get_
!  -> EXTERN: (591,20) rtdb_get_
!  -> EXTERN: (595,15) ga_zero_
!  -> EXTERN: (596,15) dft_fock_efield_
!  -> EXTERN: (601,18) ga_dadd_
!  -> EXTERN: (602,21) ga_ddot_
!  -> EXTERN: (604,18) ga_dadd_
!  -> EXTERN: (605,18) ga_dadd_
!  -> EXTERN: (606,21) ga_ddot_
!  -> EXTERN: (607,18) ga_ddot_
!  -> EXTERN: (609,18) errquit_
!  -> EXTERN: (622,13) for_write_seq_fmt_xmit
!  -> EXTERN: (622,13) for_write_seq_fmt_xmit
!  -> EXTERN: (622,13) for_write_seq_fmt_xmit
!  -> EXTERN: (622,13) for_write_seq_fmt_xmit
!  -> EXTERN: (622,13) for_write_seq_fmt_xmit
!  -> EXTERN: (622,13) for_write_seq_fmt_xmit
!  -> EXTERN: (622,13) for_write_seq_fmt_xmit
!  -> EXTERN: (622,13) for_write_seq_fmt
!  -> EXTERN: (639,14) ga_dadd_
!  -> EXTERN: (642,11) ga_dadd_
!  -> EXTERN: (643,19) ga_destroy_
!  -> EXTERN: (644,11) errquit_
!  -> EXTERN: (648,19) ma_pop_stack_
!  -> EXTERN: (649,15) errquit_
!  -> EXTERN: (654,12) dft_tstamp_
!  -> EXTERN: (656,19) pstat_off_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_fockbld_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
!        
!    Routine temporaries
!        Total         :    1093
!            Global    :     198
!            Local     :     895
!        Regenerable   :     755
!        Spilled       :      20
!        
!    Routine stack
!        Variables     :     376 bytes*
!            Reads     :      22 [1.90e+00 ~ 1.9%]
!            Writes    :      40 [1.99e+00 ~ 2.0%]
!        Spills        :     112 bytes*
!            Reads     :      25 [1.32e+00 ~ 1.3%]
!            Writes    :      29 [1.94e+00 ~ 1.9%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	     ,     g_fock,g_focks,g_dens,g_vxc,g_movecs,g_xcinv,
3	     ,     g_tmp,g_nq,g_wght,g_xyz,
4	     ,     ivcoul_Opt,nexc,ivxc_opt,wght_GA,
5	     ,     n_batch,n3c_int,n3c_dbl,IOLGC,
6	     ,     evals, rdens_atom,dd3ceri,ii3cwhat,
7	     ,     cetobfr, iter, ecore, ecoul,exc, rho_n,ldmix,
8	     ,     test_sic,exact_pot,ecoul_aux,dif_lamda,totsic,
9	     ,     i_degen,g_rho_exact,g_tmp_exact, g_addit_exact,
10	     ,     n_levels, act_levels, oprint_time,
11	cc AJL/Begin/FDE
12	c     ,     g_rel_sf,g_frozemb)
13	     ,     g_rel_sf,g_frozemb,g_vxc_fde,g_xcinv_fde,g_dens_fde,eelec )
14	cc AJL/End
15	c     
16	c     $Id$
17	c     
18	      implicit none
19	#include "errquit.fh"
20	#include "cdft.fh"
21	#include "global.fh"
22	#include "stdio.fh"
23	#include "rtdb.fh"
24	#include "mafdecls.fh"
25	#include "util.fh"
26	#include "dftps.fh"
27	#include "cosmo.fh"
28	#include "zora.fh"
29	#include "x2c.fh"
30	#include "case.fh"
31	c#include "dimqm.fh"
32	c
33	      integer g_fock,g_dens(2),g_vxc(4),g_movecs(2) ! [handle in/values out]
34	      integer g_focks(2)
35	      integer g_xcinv
36	      integer g_tmp,g_nq,g_wght,g_xyz
37	      integer g_rho_exact,g_tmp_exact, g_addit_exact
38	      integer rtdb ! [in]
39	      integer natoms ! [in]
40	      logical wght_GA
41	c     double precision evals (*)
42	      integer evals(2)
43	      double precision rdens_atom(*)
44	      double precision dd3ceri(*)
45	      integer ii3cwhat(*)
46	      integer cetobfr(*)
47	      logical oprint_time ![in]
48	      integer iter ! [in]
49	      integer n_levels(2), act_levels
50	      double precision ecore, ecoul,exc(2) ! [out]
51	      integer ntotel,n_batch,n3c_int,n3c_dbl
52	      logical IOLGC, ldmix
53	      integer test_sic ! [in]
54	      integer exact_pot, iter_ini
55	      integer i_degen(2)  ! [in]
56	      double precision ecoul_aux(2),dif_lamda,totsic
57	      double precision rho_n ![out]
58	      double precision fant_a,fant_d,dft_fant
59	      external dft_fant
60	      integer ga_create_atom_blocked
61	      external ga_create_atom_blocked
62	
63	      integer ivcoul_Opt,nexc,ivxc_opt
64	c
65	      integer me,nscr,lscr,iscr,lcd_coef,icd_coef
66	c
67	      double precision Ebq
68	c
69	      integer g_rel_sf(*)       ! spin-free zora/x2c ga
70	      double precision Erel_sf  ! spin-free zora/x2c energy
71	c
72	      integer g_frozemb       ! frozen embedding ga
73	      double precision Efrozemb  ! energy
74	
75	      integer g_cosmo
76	
77	      logical no2e
78	c
79	c     timings
80	c
81	      double precision time1_ke,time2_ke
82	      double precision time1_pot,time2_pot
83	c  jbecca START-- making NWChem great again with efield
84	      double precision efield(3)
85	      double precision eelec
86	      logical lescale
87	c  jbecca END
88	c
89	c MN solvation models -->
90	c
91	      double precision gcds
92	      integer do_cosmo_vem
93	      logical do_cosmo_smd
94	c
95	c DIM/QM variables
96	c
97	      double precision g_vdim
98	      double precision Edim
99	      logical ldimqm, dimqm_go,use_dimqm
100	c
101	cc AJL/Begin/SPIN ECPs
102	      integer ecp_channels
103	cc AJL/Begin/FDE 
104	      integer i
105	      double precision Exc_fde(2)
106	      integer g_xcinv_fde
107	      integer g_vxc_fde(4)
108	c      double precision rho_n_fde ![out]
109	      integer g_dens_fde(2)
110	cc AJL/End
111	      double precision t0
112	      integer g_adft(2)
113	c
114	      do_cosmo_smd = .false.
115	      do_cosmo_vem = 0
116	      gcds = 0.D0
117	c
118	      if (cosmo_on.and.cosmo_phase.eq.2) then
119	       if (.not. rtdb_get(
120	     $ rtdb,'cosmo:do_cosmo_smd',mt_log,1,do_cosmo_smd))
121	     $ call errquit(
122	     $ 'dft_fockbld: cannot get do_cosmo_smd from rtdb',
123	     $ 0,rtdb_err)
124	       if (.not. rtdb_get(
125	     $ rtdb,'cosmo:do_cosmo_vem',mt_int,1,do_cosmo_vem))
126	     $ call errquit(
127	     $ 'dft_fockbld: cannot get do_cosmo_vem from rtdb',
128	     $ 0,rtdb_err)
129	       if (do_cosmo_smd) then
130	        if (.not. rtdb_get
131	     $   (rtdb,'cosmo:gcds',mt_dbl,1,gcds))
132	     $   call errquit(
133	     $   'dft_fockbld: cannot get gcds from rtdb',
134	     $   0,rtdb_err)
135	        endif
136	      endif
137	c
138	c <-- MN solvation models
139	c
140	      use_dimqm = util_module_avail("dimqm")
141	      if (use_dimqm) then
142	         call dimqm_init(rtdb)
143	         call dimqm_used(ldimqm)
144	         call dimqm_getgo(dimqm_go)
145	      else
146	         ldimqm=.false.
147	         dimqm_go=.false.
148	      endif
149	c     =========================================================================
150	
151	      me=ga_nodeid()
152	      if (odftps) call pstat_on(ps_fockb)
153	
154	c ... jochen: to run tests on one-electron systems, we
155	c     simply disable all two-electron contributions if
156	c     requested by an input switch
157	      if(.not.rtdb_get(rtdb,'dft:no2e',MT_LOG,1,no2e))
158	     &   no2e = .false.
159	      if (no2e.and.me.eq.0) write (luout,*)
160	     &   'WARNING: dft:no2e set. Disabling Coulomb and XC Fock terms'
161	
162	
163	c
164	      Ecoul  = 0d0
165	      Exc(1) = 0d0
166	      Exc(2) = 0d0
167	
168	      icd_coef = 1
169	
170	      if (cdfit) then
171	        if (.not.MA_Push_Get(MT_Dbl,4*nbf_cd,'cd_coef',lcd_coef,
172	     &       icd_coef))
173	     &    call errquit('dft_scf: cannot allocate cd_coef',0, MA_ERR)
174	      endif
175	
176	c Jorge Garza/Begin
177	      if (ldmix) then
178	        iter_ini = 1
179	      else
180	        iter_ini = 3
181	      end if
182	      if (test_sic.eq.2.or.test_sic.eq.4) then
183	        if (iter.ge.iter_ini) then
184	           call xc_sicdeg(i_degen, evals, n_levels,act_levels)
185	        end if
186	      end if
187	c Jorge Garza/End
188	c     
189	c     Accumulate core hamiltonian into Fock matrix; compute core energy
190	c     
191	      if (oprint_time)
192	     &     call dft_tstamp(' calling 1-e int ')
193	      if (odftps) call pstat_on(ps_onel)
194	      call ga_zero(g_fock)
195	c
196	      if(util_print('dft timings', print_high))
197	     &      time1_ke=util_cpusec()   ! start kinetic time
198	      call int_1e_ga(ao_bas_han, ao_bas_han, g_fock, 'kinetic', oskel)
199	      if(util_print('dft timings', print_high))
200	     &      time2_ke=util_cpusec()   ! end kinetic time
201	c
202	c     print kinetic energy matrix time
203	      if(util_print('dft timings', print_high)) then
204	        if (me.eq.0) then
205	           write(*,"(4x,'Kinetic Matrix Time:',F13.1,'s')") 
206	     &        time2_ke-time1_ke
207	        endif
208	      end if
209	c
210	      if(util_print('kinetic_energy', print_high)) then
211	         Ecore = ga_ddot(g_dens(1), g_fock)
212	         if(ga_nodeid().eq.0) then
213	            write(luout,222) Ecore
214	 222        format(/
215	     &     '           Kinetic energy =', f20.12/)
216	         endif
217	      endif
218	c
219	cc AJL/Begin/SPIN ECPs
220	cc    Read this value from rtdb vvvv
221	      if (.not.rtdb_get(rtdb, 'dft:spin_polarised_ecps',
222	     &  mt_int, 1, ecp_channels)) then
223	        ecp_channels = 1
224	      endif
225	
226	      if (ecp_channels.eq.2.and.ipol.eq.1)
227	     & call errquit('dft_fockbld: spin_polarised_ecps with mult = 1', 
228	     &               0, BASIS_ERR)
229	
230	c     == Copy Fock matrix to individual components for spin ECPs ==
231	      call ga_copy(g_fock, g_focks(1))
232	      if (ecp_channels.gt.1) call ga_copy(g_fock, g_focks(2))
233	c
234	c     if requested separate calculation of bq-electron energy (MV)
235	c     ----------------------------------------------------------- 
236	      if (rtdb_get(rtdb, 'dft:bq_energy', mt_dbl, 1,Ebq)) then
237	c        Ecore = ga_ddot(g_dens(1), g_fock)
238	c        call int_1e_ga(ao_bas_han, ao_bas_han, g_fock, 
239	c     &                 'bq_pot', oskel)
240	
241	        Ecore = ga_ddot(g_dens(1), g_focks(1))
242	        call int_1e_ga(ao_bas_han, ao_bas_han, g_focks(1),
243	     &                 'bq_pot', oskel)
244	c Copy to g_focks(2), as this is identical for both channels
245	        if (ecp_channels.gt.1) call ga_copy(g_focks(1), g_focks(2))
246	c
247	c        Ebq = ga_ddot(g_dens(1), g_fock)-Ecore
248	c        call int_1e_ga(ao_bas_han, ao_bas_han, g_fock,
249	c     &                 'potential0', oskel)
250	
251	        Ebq = ga_ddot(g_dens(1), g_focks(1))-Ecore
252	        call int_1e_ga(ao_bas_han, ao_bas_han, g_focks(1),
253	     &                 'potential0', oskel)
254	c Calculate Beta channel 1e potential
255	        if (ecp_channels.gt.1)
256	     &    call int_1e_ga(ao_bas_han, ao_bas_han, g_focks(2),
257	     &                   'potential_beta0', oskel)
258	cc AJL/End
259	c
260	        if (.not. rtdb_put(rtdb,'dft:bq_energy',mt_dbl,1,Ebq)) 
261	     $     call errquit('dft: writing bq_energy failed', 
262	     $     0, RTDB_ERR)
263	      else
264	        if(util_print('dft timings', print_high))
265	     &        time1_pot=util_cpusec()   ! start time
266	cc AJL/Begin/SPIN ECPs
267	c        call int_1e_ga(ao_bas_han, ao_bas_han, g_fock,
268	        call int_1e_ga(ao_bas_han, ao_bas_han, g_focks(1), 
269	     &                 'potential', oskel)
270	        if (ecp_channels.gt.1)
271	     &    call int_1e_ga(ao_bas_han, ao_bas_han, g_focks(2),
272	     &                   'potential_beta', oskel)
273	cc AJL/End
274	        if(util_print('dft timings', print_high))
275	     &        time2_pot=util_cpusec()   ! end time
276	c
277	c     print potential matrix time
278	        if(util_print('dft timings', print_high)) then
279	         if (me.eq.0) then
280	           write(*,"(4x,'Potential Matrix Time:',F13.1,'s')")
281	     &        time2_pot-time1_pot
282	         endif
283	        end if
284	      end if
285	c
286	c     ----- Add cosmo potential when needed -----
287	c
288	cc AJL/Begin/SPIN ECPs
289	      if(cosmo_on.and.cosmo_phase.eq.2) then
290	c         call int_1e_ga(ao_bas_han,ao_bas_han,g_fock,
291	c         t0 = util_wallsec()
292	         if (.not.ga_duplicate(g_focks(1),g_cosmo,'cosmo'))
293	     &     call errquit('dft_fockbld: create g_cosmo',0,GA_ERR)
294	         call ga_zero(g_cosmo)
295	         call cosmo_fock(ao_bas_han, g_cosmo)
296	         call ga_add(1d0, g_cosmo, 1d0, g_focks(1), g_focks(1))
297	         if (ecp_channels.gt.1)
298	     &     call ga_add(1d0, g_cosmo, 1d0, g_focks(2), g_focks(2))
299	         if (.not.ga_destroy(g_cosmo))
300	     &     call errquit('dft_fockbld: destroy g_cosmo',0,GA_ERR)    
301	c         if (me.eq.0) then
302	c           write(*,'("cos_chg_pot: ",F8.3)') util_wallsec()-t0
303	c         endif
304	      endif
305	
306	c     == Copy Fock matrix to individual components for normal calcs ==
307	      if (ecp_channels.eq.1.and.ipol.gt.1) 
308	     &  call ga_copy(g_focks(1), g_focks(2))
309	
310	      call ga_sync()
311	c
312	cc      Ecore = ga_ddot(g_dens(1), g_fock)
313	cc AJL: Ecore = ga_ddot(g_dens(1), g_focks(1))
314	cc      write(6,*)'Ecore(1:T):',ga_ddot(g_dens(1), g_focks(1))
315	
316	cc    With spin-polarised ECPs Ecore will be spin dependent
317	cc    See Szabo and Ostlund pg. 215
318	cc        
319	      if (ecp_channels.gt.1) then
320	c     
321	c       Restore alpha and beta densities to calculate energy
322	        call ga_dadd(1d0, g_dens(1), -1d0, g_dens(2), g_dens(1))
323	
324	        Ecore = ga_ddot(g_dens(1), g_focks(1))
325	c        write(6,*)'Ecore(1:A):',Ecore
326	        Ecore = Ecore + ga_ddot(g_dens(2), g_focks(2))
327	c        write(6,*)'Ecore(2:B):',ga_ddot(g_dens(2), g_focks(2))
328	c
329	c       And then recombine the densities for now. 
330	        call ga_dadd(1d0, g_dens(1), 1d0, g_dens(2), g_dens(1))
331	c
332	c       call ga_sync()   
333	      else
334	
335	        Ecore = ga_ddot(g_dens(1), g_focks(1))
336	c        write(6,*)'Ecore(1:T):',ga_ddot(g_dens(1), g_focks(1)) 
337	 
338	      endif
339	cc AJL/End
340	c
341	c     add Bonacic-Fantucci repulsive term
342	c
343	      if (.not.rtdb_get(rtdb, 'dft:fant_d', mt_dbl, 1,
344	     &   fant_d)) fant_d=-1d0
345	      if (.not.rtdb_get(rtdb, 'dft:fant_a', mt_dbl, 1,
346	     &   fant_a)) fant_a=-1d0
347	      if(fant_a.ne.-1d0.and.fant_d.ne.-1d0)
348	     A     Ecore=Ecore+dft_fant(geom,natoms,fant_a,fant_d)
349	      if (odftps) call pstat_off(ps_onel)
350	c
351	c     Pre-compute reduced total density matrices over atoms
352	c 
353	      nscr = nbf_ao_mxnbf_ce*nbf_ao_mxnbf_ce
354	      if (.not.MA_Push_Get(MT_Dbl,nscr,'scr',lscr,iscr))
355	     &   call errquit('dft_scf: cannot allocate scr',0, MA_ERR)
356	      call util_ga_mat_reduce(nbf_ao, natoms, cetobfr, g_dens, 
357	     &                     ipol, rdens_atom, 'absmax', 
358	     &                     dbl_mb(iscr), nbf_ao_mxnbf_ce,.true.)
359	      if (.not.ma_pop_stack(lscr))
360	     &   call errquit('dft_scf: cannot pop stack',0, MA_ERR)
361	c
362	      if (ipol.gt.1)then
363	c     
364	c        Restore alpha and beta densities.
365	c     
366	         call ga_dadd(1d0, g_dens(1), -1d0, g_dens(2), g_dens(1))
367	c     
368	c        Note that g_dens(1) now contains the alpha density
369	c        matrix and g_dens(2) contains the beta
370	c
371	c        Pre-compute reduced alpha and beta density matrices over atoms
372	c 
373	         call dfill(ipol*natoms*natoms, 0.0d0, rdens_atom, 1)
374	         nscr = nbf_ao_mxnbf_ce*nbf_ao_mxnbf_ce
375	         if (.not.MA_Push_Get(MT_Dbl,nscr,'scr',lscr,iscr))
376	     &      call errquit('dft_scf: cannot allocate scr',0, MA_ERR)
377	         call util_ga_mat_reduce(nbf_ao, natoms, cetobfr, 
378	     &                       g_dens, ipol, rdens_atom, 
379	     &                       'absmax', dbl_mb(iscr), nbf_ao_mxnbf_ce,
380	     A        .true.)
381	         if (.not.ma_pop_stack(lscr))
382	     &      call errquit('dft_scf: cannot pop stack',0, MA_ERR)
383	      endif
384	c
385	c     DIM/QM JEM
386	c     Calculate DIM potential and energy
387	c     We calculate the DIM potential at each point from the total density
388	c     This potential is used to perturb both alpha and beta spins, so only
389	c     one call to dim_grid_quadv0 is needed
390	      if (ldimqm .and. dimqm_go) then
391	        if(.not.ga_duplicate(g_vxc(1), g_vdim, 'dim:1'))
392	     $    call errquit("dft_fockbld: can't create dim:1", 99, GA_ERR)
393	        call ga_zero(g_vdim)
394	        call dim_grid_quadv0(rtdb, g_vdim)
395	c        call ga_dadd(1.d0, g_vxc(1), 1.d0, g_fock, g_fock)
396	        Edim = ga_ddot(g_dens(1), g_vdim)
397	        if(ipol > 1) then
398	          Edim = Edim + ga_ddot(g_dens(2), g_vdim)
399	        end if
400	        call ga_sync()
401	      end if
402	c      
403	      if (CDFIT)then
404	c
405	c        Fit the electron charge density.
406	c     
407	         if (oprint_time)
408	     &        call dft_tstamp(' Before call to FITCD.   ')
409	         if (odftps) call pstat_on(ps_fitcd)
410	         call case_setflags(.false.)  ! no attenuation for Coulomb
411	         call dft_fitcd(ipol,Dbl_MB(icd_coef),dd3cERI,Ecoul,
412	     &                  g_dens, nTotEl, n_batch, n3c_int,
413	     &                  ii3cwhat, n3c_dbl, IOLGC,
414	     .        natoms,
415	     &                  .false., 0d0, .false.)
416	         if (odftps) call pstat_off(ps_fitcd)
417	      else
418	         Ecoul = 0d0
419	      endif
420	c     
421	c     
422	c     == Compute the XC potential and energy ==
423	      g_vxc(1) = g_tmp
424	      call ga_zero(g_vxc(1))
425	      rho_n = 0.0d0
426	cc AJL/Begin
427	cc Can't remember why I implemented this? To be tested.
428	cc      if (ipol.gt.1) call ga_zero(g_vxc(2))
429	      if (ipol.gt.1) call ga_copy(g_vxc(1), g_vxc(2))
430	cc AJL/End
431	      if (oprint_time)call dft_tstamp(' Before call to GETVXC.  ')
432	c
433	      if (odftps) call pstat_on(ps_xc)
434	c
435	c     == Calculate the HF exchange (exact Coulomb), DFT exchange-correlation ==
436	      call xc_getv(rtdb, Exc, Ecoul,nExc, iVxc_opt, g_xcinv, g_dens, 
437	     &             g_vxc, IOLGC, g_wght, g_xyz, g_nq,wght_GA, rho_n,
438	     &             rdens_atom, cetobfr, natoms, dbl_mb(icd_coef))
439	c
440	      do i=1,ipol 
441	        call ga_dadd(1.d0, g_vxc(i), 1.d0, g_focks(i), g_focks(i))
442	      enddo
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(442,7)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
443	
444	      if (odftps) call pstat_off(ps_xc)
445	c
446	      if (oprint_time)
447	     &     call dft_tstamp(' Before call to GETVCOUL.')
448	      if (odftps) call pstat_on(ps_vcoul)
449	      call dft_getvc(Dbl_MB(icd_coef), dd3cERI, Ecoul,
450	     &               g_vxc, iVcoul_opt, n_batch, 
451	     &               n3c_int, ii3cwhat, n3c_dbl,
452	     &               IOLGC,
453	     &               .false., ipol)
454	      if (odftps) call pstat_off(ps_vcoul)
455	c     
456	c     Add V coul to Fock Matrix
457	c     
458	c     add relativistic energy contributions
459	      if (do_zora .or. do_x2c) then
460	        Erel_sf =0.d0
461	        if (ipol.gt.1) then
462	          Erel_sf = ga_ddot(g_dens(1),g_rel_sf(1))
463	     &             + ga_ddot(g_dens(2),g_rel_sf(2))
464	        else
465	          Erel_sf = ga_ddot(g_dens(1),g_rel_sf(1))
466	        end if
467	        Ecore = Ecore + Erel_sf 
468	c
469	        call ga_dadd(1.d0,g_vxc(1),1.d0,g_rel_sf(1),g_vxc(1))
470	        if (ipol.gt.1) 
471	     &   call ga_dadd(1.d0,g_vxc(2),1.d0,g_rel_sf(2),g_vxc(2))
472	c
473	      end if  ! do_zora .or. do_x2c
474	c
475	c     == if frozen embedding ==
476	      Efrozemb = 0.d0
477	      if (frozemb) then
478	
479	        do i=1,ipol
480	          Efrozemb = Efrozemb + ga_ddot(g_dens(i),g_frozemb)
481	          call ga_dadd(1.d0,g_vxc(i),1.d0,g_frozemb,g_vxc(i))
482	        enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(482,9)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
483	
484	        Ecore = Ecore + Efrozemb   ! add in linearized frozen embedding energy to core
485	c
486	cc AJL/Begin/FDE
487	        if (frozemb_fde) then
488	c Add in contributions for Non-additive potential here.
489	c This will be for XC:  Vxc(P_tot) - Vxc(P_qm)
490	c And the same for Ts:  Ts(P_tot)  - Ts(P_qm)
491	c
492	c Order:
493	c -> Call grid_quadv0 equivalent, but with XC set to FDE option
494	c -> Then recalculate values for P_tot
495	c -> And then finally subtract P_qm from P_tot values.. et voila.
496	c
497	c This is all done in grid_quadv0b, except for the final manipulation of
498	c the Hamiltonian contributions as we cannot manipulate GAs at this
499	c lower level (I think. I haven't tried. So subtraction is below)
500	
501	cc For testing of outputs
502	c
503	cc Exc(QM)
504	c        call dft_frozemb_fde_getvxc(rtdb, Exc_fde, nExc, iVxc_opt,
505	c     &       g_xcinv_fde, g_dens, g_vxc_fde, IOLGC, 2, g_dens_fde)
506	cc Exc(FDE)
507	c        call dft_frozemb_fde_getvxc(rtdb, Exc_fde, nExc, iVxc_opt,
508	c     &       g_xcinv_fde, g_dens, g_vxc_fde, IOLGC, 3, g_dens_fde)
509	cc Exc(Non-add)
510	          call dft_frozemb_fde_getvxc(rtdb, Exc_fde, nExc, iVxc_opt,
511	     &         g_xcinv_fde, g_dens, g_vxc_fde, IOLGC, 4, g_dens_fde)
512	
513	c     == Add FDE non-additive Vxc to the original matrix ==      
514	          do i=1,ipol 
515	            call ga_dadd(1.d0, g_vxc(i), 1.d0, g_vxc_fde(i), g_vxc(i))
516	          enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(516,11)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
517	c     == Add FDE non-additive Exc in to the Exc ==
518	          do i=1,nExc 
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(518,11)
!   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
!   remark #15448: unmasked aligned unit stride loads: 1 
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 6 
!   remark #15477: vector cost: 4.000 
!   remark #15478: estimated potential speedup: 0.850 
!   remark #15488: --- end vector cost summary ---
!   remark #25439: unrolled with remainder by 2  
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(518,11)
!<Remainder>
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
519	            Exc(i) = Exc(i) + Exc_fde(i)
520	          enddo
521	c
522	c Repeat for Non-additive Ts; set nExc explicitly to 1 as not
523	c interested in separating our exchange and correlation!
524	c
525	cc Ts(QM)
526	c        call dft_frozemb_fde_getvxc(rtdb, Exc_fde, 1, iVxc_opt,
527	c     &       g_xcinv_fde, g_dens, g_vxc_fde, IOLGC, 5, g_dens_fde)
528	cc Ts(FDE)
529	c        call dft_frozemb_fde_getvxc(rtdb, Exc_fde, 1, iVxc_opt,
530	c     &       g_xcinv_fde, g_dens, g_vxc_fde, IOLGC, 6, g_dens_fde)
531	cc Ts(Non-add)
532	          call dft_frozemb_fde_getvxc(rtdb, Exc_fde, 1, iVxc_opt, 
533	     &         g_xcinv_fde, g_dens, g_vxc_fde, IOLGC, 7, g_dens_fde)
534	
535	c     == Add FDE non-additive VTs to the original matrix ==      
536	          do i=1,ipol 
537	            call ga_dadd(1.d0, g_vxc(i), 1.d0, g_vxc_fde(i), g_vxc(i))
538	          enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fockbld.F(538,11)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
539	c     == Add FDE non-additive Ts energy in to the 1e energy ==
540	          Ecore = Ecore + Exc_fde(1)
541	c
542	        end if ! frozemb_fde 
543	cc AJL/End
544	c
545	      end if
546	c
547	c     == Add exact pot contributions ==
548	      if (exact_pot.eq.1) then
549	        call xc_exact_pot(Ecoul_aux, g_dens, g_vxc, g_rho_exact,
550	     &                    dif_lamda, g_tmp_exact, g_addit_exact)
551	      end if
552	c
553	c  Jorge Garza/Begin
554	      if (ipol.eq.2.and.noc(2).eq.0) call ga_zero(g_vxc(2))
555	      totsic=0.0d00
556	      if (test_sic.eq.2.or.test_sic.eq.4) then
557	        if (iter.ge.iter_ini) then
558	          if (test_sic.eq.4) then
559	            call localize_sic(g_movecs, evals)
560	          end if
561	          call xc_sic(rtdb, nExc,iVxc_opt, g_dens, 
562	     &                g_vxc,  g_wght, g_xyz, g_nq, wght_GA,
563	     &                rdens_atom, cetobfr, natoms,
564	     &                g_movecs, totsic, i_degen, n_levels)
565	          Exc(1) = Exc(1) + totsic
566	        end if
567	      end if
568	c  Jorge Garza/End
569	c
570	cc AJL/Begin/SPIN ECPs
571	cc     == Copy Fock matrix to individual components ==
572	c      call ga_copy(g_fock, g_focks(1))
573	c      if (ipol.gt.1) 
574	c     &     call ga_copy(g_fock, g_focks(2))
575	cc AJL/End
576	c
577	c     == Add exchange-correlation to the Fock matrix ==       
578	      call ga_dadd(1.d0, g_vxc(1), 1.d0, g_focks(1), g_focks(1))
579	      if (ipol.gt.1) 
580	     &     call ga_dadd(1.d0, g_vxc(2), 1.d0, g_focks(2), g_focks(2))
581	
582	c jbecca START - damnit, quit taking this out
583	C
584	C     Compute -D.E contribution due to external applied electric field
585	C     (if dft:efield is stored in rtdb).  Note that we can potentially
586	C     apply different fields to the alpha and beta spins this way.
587	C
588	C
589	      if (rtdb_get (rtdb, "dft:efield", mt_dbl, 3, efield)) then
590	
591	         if (.not. rtdb_get (rtdb, "dft:efield_scaled",
592	     $        mt_log, 1, lescale))
593	     $        lescale = .false.
594	
595	         call ga_zero (g_tmp)  !careful, this previously stored g_vxc
596	         call dft_fock_efield (rtdb, efield, g_tmp, lescale)  !g_tmp now has -D.E
597	c Daniel (10-9-12): This line causes problems.
598	c         call ga_norm_infinity (g_tmp, enorm)
599	
600	         if (ipol.eq.1) then
601	            call ga_dadd (1d0, g_focks(1), 1d0, g_tmp, g_focks(1))
602	            eelec = ga_ddot (g_dens(1), g_tmp)
603	         elseif (ipol.eq.2) then
604	            call ga_dadd (1d0, g_focks(1), 1d0, g_tmp, g_focks(1))
605	            call ga_dadd (1d0, g_focks(2), 1d0, g_tmp, g_focks(2))
606	            eelec = ga_ddot (g_dens(1), g_tmp) +
607	     $           ga_ddot (g_dens(2), g_tmp)
608	         else
609	            call errquit ("dft_fockbld: bad ipol", ipol, 0)
610	         endif
611	
612	c$$$         if (me.eq.0) write (luout,"(1x,a,3es12.4,a,1es12.4,a,1es12.4)")
613	c$$$     $        "[dft_fockbld] External E-field:", efield,
614	c$$$     $        "; interaction energy =", eelec, "; |-D.E| =", enorm
615	
616	         if (me.eq.0) then
617	c            write (luout,"(1x,a,3es12.4,a,a,l,a,a,1es12.4,a,a,1es12.4)")
618	c     $           "Applied E-field = (", efield, " ), ",
619	c     $           "scaled = ", lescale, ", ",
620	c     $           "||D.E|| =", enorm, ", ",
621	c     $           "interaction energy =", eelec
622	            write (luout,"(1x,a,3es12.4,a,a,l,a,a,1es12.4)")
623	     $           "Applied E-field = (", efield, " ), ",
624	     $           "scaled = ", lescale, ", ",
625	     $           "interaction energy =", eelec
626	c$$$     $           "External E-field: ",
627	c$$$     $           "scaled = ", lescale,
628	c$$$     $           "; E = (", efield, " )"
629	         endif
630	      endif
631	c  jbecca END
632	
633	c
634	c     DIM/QM JEM
635	c     Add DIM potential to the Fock matrix
636	      if (ldimqm .and. dimqm_go) then
637	c  jbecca START: scaling potential here to test some stuff.
638	c              originally 1.d0
639	        call ga_dadd(1.d0, g_vdim, 1.d0, g_focks(1), g_focks(1))
640	c       DIM potential is from total density, so same for both alpha and beta
641	        if (ipol.gt.1)
642	     &    call ga_dadd(1.d0, g_vdim, 1.d0, g_focks(2), g_focks(2))
643	        if (.not. ga_destroy(g_vdim))
644	     &    call errquit("destroy vdim failed", 9, GA_ERR)
645	      end if
646	
647	      if (CDFIT)then
648	         if (.not.ma_pop_stack(lcd_coef))
649	     &        call errquit('dft_scf: cannot pop stack',0, MA_ERR)
650	      endif
651	c
652	
653	      if (oprint_time)
654	     &     call dft_tstamp(' End of parallel region. ')
655	c     
656	      if (odftps) call pstat_off(ps_fockb)
657	c
658	cc AJL/Begin/SPIN ECPs (Debug)
659	c      if(util_print('Intermediate Fock Matrix', print_debug)) then
660	c        if (ga_nodeid() .eq. 0) then
661	c          write(6,*)
662	c          call util_print_centered(6,
663	c     $         'Intermediate Fock Matrix',40,.true.)
664	c          write(6,*)
665	c          call util_flush(6)
666	c        end if
667	c        call ga_print(g_focks(1))
668	c        if (ipol.eq.2) call ga_print(g_focks(2))
669	cc AJL/End
670	c
671	c MN solvation models -->
672	c
673	c     ----- Add SMD-CDS energy contribution when needed -----
674	c
675	c      if(cosmo_on.and.cosmo_phase.eq.2.and.do_cosmo_smd) then
676	c        Ecore=Ecore+gcds
677	c      endif
678	c
679	c <-- MN solvation models
680	c
681	      return
682	      end
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_MULWRAP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_MULWRAP) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(1,18)
  -> EXTERN: (11,12) dft_header_
  -> EXTERN: (13,12) mull_pop_
  -> EXTERN: (18,22) dft_header_
  -> EXTERN: (20,15) ga_dadd_
  -> EXTERN: (21,15) mull_pop_
  -> EXTERN: (22,15) ga_dadd_
  -> EXTERN: (23,15) ga_dscal_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_mulwrap_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12]
        
    Routine temporaries
        Total         :      58
            Global    :      13
            Local     :      45
        Regenerable   :      34
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_PREVALS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_PREVALS) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(28,18)
  -> EXTERN: (41,17) for_cpstr
  -> EXTERN: (42,18) util_print_centered_
  -> EXTERN: (45,18) util_print_centered_
  -> EXTERN: (48,15) util_print_centered_
  -> EXTERN: (50,15) output_
  -> EXTERN: (52,15) util_print_centered_
  -> EXTERN: (54,15) output_
  -> EXTERN: (57,13) for_write_seq_lis
  -> EXTERN: (58,18) util_print_centered_
  -> EXTERN: (60,18) output_
  -> EXTERN: (62,18) util_print_centered_
  -> EXTERN: (64,18) output_
  -> EXTERN: (67,15) util_flush_
  -> EXTERN: (71,13) for_write_seq_lis
  -> EXTERN: (72,20) for_cpstr
  -> EXTERN: (73,21) util_print_centered_
  -> EXTERN: (76,21) util_print_centered_
  -> EXTERN: (79,13) for_write_seq_lis
  -> EXTERN: (80,18) util_flush_
  -> EXTERN: (82,15) ga_print_
  -> EXTERN: (83,24) ga_print_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(28,18):remark #34051: REGISTER ALLOCATION : [dft_prevals_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F:28

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     178
            Global    :      26
            Local     :     152
        Regenerable   :     118
        Spilled       :       6
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       7 [1.37e+00 ~ 1.4%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_PREVALS2

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_PREVALS2) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(88,18)
  -> EXTERN: (100,18) util_print_centered_
  -> EXTERN: (102,15) util_print_centered_
  -> EXTERN: (104,15) output_
  -> EXTERN: (106,15) util_print_centered_
  -> EXTERN: (108,15) output_
  -> EXTERN: (111,13) for_write_seq_lis
  -> EXTERN: (112,18) util_print_centered_
  -> EXTERN: (114,18) output_
  -> EXTERN: (116,18) util_print_centered_
  -> EXTERN: (118,18) output_
  -> EXTERN: (121,15) util_flush_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(88,18):remark #34051: REGISTER ALLOCATION : [dft_prevals2_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F:88

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r11 r14-r15]
        
    Routine temporaries
        Total         :     109
            Global    :      13
            Local     :      96
        Regenerable   :      80
        Spilled       :       3
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       5 [1.39e+00 ~ 1.4%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: HAS_FRAC_OCC

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (HAS_FRAC_OCC) [4] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(129,24)
  -> EXTERN: (150,16) rtdb_get_
  -> EXTERN: (153,16) rtdb_get_
  -> EXTERN: (156,16) rtdb_get_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(129,24):remark #34051: REGISTER ALLOCATION : [has_frac_occ_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F:129

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rbx rsi rdi r8-r9 r15]
        
    Routine temporaries
        Total         :      48
            Global    :      16
            Local     :      32
        Regenerable   :      28
        Spilled       :       2
        
    Routine stack
        Variables     :      24 bytes*
            Reads     :       3 [3.82e+00 ~ 3.8%]
            Writes    :       2 [2.18e+00 ~ 2.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_PRINT_EVALS_AB

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_PRINT_EVALS_AB) [5] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(171,18)
  -> EXTERN: (192,12) util_file_name_
  -> EXTERN: (193,15) util_io_unit_
  -> EXTERN: (194,9) errquit_
  -> EXTERN: (196,12) ga_sync_
  -> EXTERN: (198,11) ga_nodeid_
  -> EXTERN: (199,8) for_open
  -> EXTERN: (200,8) for_write_seq_lis
  -> EXTERN: (201,8) for_write_seq_lis
  -> EXTERN: (204,14) for_write_seq_lis_xmit
  -> EXTERN: (204,14) for_write_seq_lis
  -> EXTERN: (208,14) for_write_seq_lis_xmit
  -> EXTERN: (208,14) for_write_seq_lis_xmit
  -> EXTERN: (208,14) for_write_seq_lis
  -> EXTERN: (211,14) for_close
  -> EXTERN: (215,12) ga_brdcst_
  -> EXTERN: (216,12) ma_sizeof_
  -> EXTERN: (218,12) ga_sync_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(203,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (204:14) and at (204:14)
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(207,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (208:14) and at (208:14)
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(171,18):remark #34051: REGISTER ALLOCATION : [dft_print_evals_ab_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F:171

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :     132
            Global    :      33
            Local     :      99
        Regenerable   :      98
        Spilled       :       5
        
    Routine stack
        Variables     :     184 bytes*
            Reads     :       2 [6.49e-01 ~ 0.6%]
            Writes    :      21 [1.20e+01 ~ 12.0%]
        Spills        :       8 bytes*
            Reads     :       1 [2.67e-01 ~ 0.3%]
            Writes    :       1 [2.67e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	      subroutine dft_mulwrap(me,g_dens,g_s)
!INLINE REPORT: (DFT_MULWRAP) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(1,18)
!  -> EXTERN: (11,12) dft_header_
!  -> EXTERN: (13,12) mull_pop_
!  -> EXTERN: (18,22) dft_header_
!  -> EXTERN: (20,15) ga_dadd_
!  -> EXTERN: (21,15) mull_pop_
!  -> EXTERN: (22,15) ga_dadd_
!  -> EXTERN: (23,15) ga_dscal_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_mulwrap_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   10[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12]
!        
!    Routine temporaries
!        Total         :      58
!            Global    :      13
!            Local     :      45
!        Regenerable   :      34
!        Spilled       :       3
!        
!    Routine stack
!        Variables     :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	c
3	c     wrapper to mul_pop
4	c
5	      implicit none
6	#include "cdft.fh"
7	      integer me,g_dens(2),g_s ! [in]
8	c
9	
10	      if (me.eq.0)
11	     &     call dft_header
12	     &     (' Total Density - Mulliken Population Analysis')
13	      call mull_pop(geom,ao_bas_han,g_dens(1),g_s, 'total')
14	      if (ipol.eq.2)then
15	c     
16	c     analysis of spin density
17	c     
18	         if (me.eq.0)call dft_header
19	     &        (' Spin Density - Mulliken Population Analysis')
20	         call ga_dadd(1d0,g_dens(1),-2.d0,g_dens(2),g_dens(2))
21	         call mull_pop(geom,ao_bas_han,g_dens(2),g_s,'spin')
22	         call ga_dadd(1d0,g_dens(1),-1.d0,g_dens(2),g_dens(2))
23	         call ga_dscal(g_dens(2),0.5d0)
24	      endif
25	      return
26	      end
27	c
28	      subroutine dft_prevals(when,me,oprint_eval,oprint_vecs,
!INLINE REPORT: (DFT_PREVALS) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(28,18)
!  -> EXTERN: (41,17) for_cpstr
!  -> EXTERN: (42,18) util_print_centered_
!  -> EXTERN: (45,18) util_print_centered_
!  -> EXTERN: (48,15) util_print_centered_
!  -> EXTERN: (50,15) output_
!  -> EXTERN: (52,15) util_print_centered_
!  -> EXTERN: (54,15) output_
!  -> EXTERN: (57,13) for_write_seq_lis
!  -> EXTERN: (58,18) util_print_centered_
!  -> EXTERN: (60,18) output_
!  -> EXTERN: (62,18) util_print_centered_
!  -> EXTERN: (64,18) output_
!  -> EXTERN: (67,15) util_flush_
!  -> EXTERN: (71,13) for_write_seq_lis
!  -> EXTERN: (72,20) for_cpstr
!  -> EXTERN: (73,21) util_print_centered_
!  -> EXTERN: (76,21) util_print_centered_
!  -> EXTERN: (79,13) for_write_seq_lis
!  -> EXTERN: (80,18) util_flush_
!  -> EXTERN: (82,15) ga_print_
!  -> EXTERN: (83,24) ga_print_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(28,18):remark #34051: REGISTER ALLOCATION : [dft_prevals_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F:28
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
!        
!    Routine temporaries
!        Total         :     178
!            Global    :      26
!            Local     :     152
!        Regenerable   :     118
!        Spilled       :       6
!        
!    Routine stack
!        Variables     :      96 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       7 [1.37e+00 ~ 1.4%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
29	     ,  g_movecs,evals,occ)
30	      implicit none
31	#include "util.fh"
32	#include "cdft.fh"
33	#include "stdio.fh"
34	      logical oprint_eval,oprint_vecs
35	      character*5 when
36	      integer me
37	      integer g_movecs(2)
38	      double precision evals(*),occ(*)
39	c
40	      if(me.eq.0.and.oprint_eval) then
41	         if(when.eq.'inter') then
42	            call util_print_centered(LuOut,'alpha eigenvalues',
43	     &           20,.true.)
44	         else
45	            call util_print_centered(LuOut,'Final alpha eigenvalues',
46	     &           20,.false.)
47	         endif
48	         call util_print_centered(LuOut,
49	     &        '(all occupied plus 10 virtual)',20,.true.)
50	         call output(evals, 1, min(noc(1)+10,nbf_ao),
51	     &        1, 1, nbf_ao, 1, 1)
52	         call util_print_centered(LuOut,'alpha foccs',
53	     &        20,.true.)
54	         call output(occ, 1, min(noc(1)+10,nbf_ao),
55	     &        1, 1, nbf_ao, 1, 1)
56	         if (ipol.eq.2)then
57	            write(LuOut,*)
58	            call util_print_centered(LuOut,'beta eigenvalues',
59	     &           20,.true.)
60	            call output(evals(1+nbf_ao), 1, min(noc(1)+10,nbf_ao),
61	     &           1, 1, nbf_ao, 1, 1)
62	            call util_print_centered(LuOut,'beta foccs',
63	     &           20,.true.)
64	            call output(occ(nbf_ao+1),1,min(noc(1)+10,nbf_ao),
65	     &           1, 1, nbf_ao, 1, 1)
66	         endif
67	         call util_flush(LuOut)
68	      endif
69	      if (oprint_vecs)then
70	         if (me .eq. 0)then
71	            write(LuOut,*)
72	            if(when.eq.'inter') then
73	               call util_print_centered(LuOut,
74	     &              'Intermediate MO vectors',40,.true.)
75	            else
76	               call util_print_centered(
77	     &              LuOut,'Final MO vectors',40,.true.)
78	            endif
79	            write(LuOut,*)
80	            call util_flush(LuOut)
81	         endif
82	         call ga_print(g_movecs)
83	         if (ipol.eq.2)call ga_print(g_movecs(2))
84	      endif
85	      return 
86	      end
87	c
88	      subroutine dft_prevals2(me,g_movecs,evals,occ)
!INLINE REPORT: (DFT_PREVALS2) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(88,18)
!  -> EXTERN: (100,18) util_print_centered_
!  -> EXTERN: (102,15) util_print_centered_
!  -> EXTERN: (104,15) output_
!  -> EXTERN: (106,15) util_print_centered_
!  -> EXTERN: (108,15) output_
!  -> EXTERN: (111,13) for_write_seq_lis
!  -> EXTERN: (112,18) util_print_centered_
!  -> EXTERN: (114,18) output_
!  -> EXTERN: (116,18) util_print_centered_
!  -> EXTERN: (118,18) output_
!  -> EXTERN: (121,15) util_flush_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(88,18):remark #34051: REGISTER ALLOCATION : [dft_prevals2_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F:88
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r11 r14-r15]
!        
!    Routine temporaries
!        Total         :     109
!            Global    :      13
!            Local     :      96
!        Regenerable   :      80
!        Spilled       :       3
!        
!    Routine stack
!        Variables     :      96 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       5 [1.39e+00 ~ 1.4%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
89	      implicit none
90	#include "util.fh"
91	#include "cdft.fh"
92	#include "stdio.fh"
93	      logical oprint_eval,oprint_vecs
94	      character*5 when
95	      integer me
96	      integer g_movecs(2)
97	      double precision evals(*),occ(*)
98	c
99	      if(me.eq.0) then
100	            call util_print_centered(LuOut,'Alpha eigenvalues',
101	     &           20,.false.)
102	         call util_print_centered(LuOut,
103	     &        '(all occupied plus 10 virtual)',20,.true.)
104	         call output(evals, 1,noc(1)+nbf_ao,
105	     &        1, 1, nbf_ao, 1, 1)
106	         call util_print_centered(LuOut,'Alpha occupations',
107	     &        20,.true.)
108	         call output(occ, 1, noc(1)+nbf_ao,nbf_ao,
109	     &        1, 1, nbf_ao, 1, 1)
110	         if (ipol.eq.2)then
111	            write(LuOut,*)
112	            call util_print_centered(LuOut,'Beta eigenvalues',
113	     &           20,.true.)
114	            call output(evals(1+nbf_ao), 1, noc(1)+nbf_ao,
115	     &           1, 1, nbf_ao, 1, 1)
116	            call util_print_centered(LuOut,'Beta occupations',
117	     &           20,.true.)
118	            call output(occ(nbf_ao+1),1,noc(1)+nbf_ao,
119	     &           1, 1, nbf_ao, 1, 1)
120	         endif
121	         call util_flush(LuOut)
122	      endif
123	c
124	      return 
125	      end
126	c $Id$
127	c
128	c     check if fractional occupation is present
129	      logical function has_frac_occ(rtdb)
!INLINE REPORT: (HAS_FRAC_OCC) [4] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(129,24)
!  -> EXTERN: (150,16) rtdb_get_
!  -> EXTERN: (153,16) rtdb_get_
!  -> EXTERN: (156,16) rtdb_get_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(129,24):remark #34051: REGISTER ALLOCATION : [has_frac_occ_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F:129
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :    9[ rax rdx rcx rbx rsi rdi r8-r9 r15]
!        
!    Routine temporaries
!        Total         :      48
!            Global    :      16
!            Local     :      32
!        Regenerable   :      28
!        Spilled       :       2
!        
!    Routine stack
!        Variables     :      24 bytes*
!            Reads     :       3 [3.82e+00 ~ 3.8%]
!            Writes    :       2 [2.18e+00 ~ 2.2%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
130	c
131	      implicit none
132	c
133	      integer rtdb
134	c
135	#include "mafdecls.fh"
136	#include "errquit.fh"
137	#include "global.fh"
138	#include "rtdb.fh"
139	#include "stdio.fh"
140	#include "msgids.fh"
141	c
142	      logical frac_occ
143	      integer ifocc
144	      logical fon
145	c
146	c     checks instances where fractional occupation is used
147	c
148	      has_frac_occ = .false. ! initialization
149	c
150	      if (.not.rtdb_get(rtdb, 'dft:fractional_occup', mt_log, 1,
151	     & frac_occ )) frac_occ=.false.
152	c
153	      if (.not.rtdb_get(rtdb,'focc:occup_switch',mt_int,1,ifocc))
154	     &             ifocc = 0
155	c
156	      if (.not.rtdb_get(rtdb, 'dft:fon', mt_log, 1, fon))
157	     &             fon = .false.
158	c
159	      if (fon.or.(ifocc.eq.1).or.frac_occ) has_frac_occ = .true.
160	c
161	c     write(luout,*) "fon: ",fon
162	c     write(luout,*) "ifocc: ",ifocc
163	c     write(luout,*) "frac_occ: ",frac_occ
164	c     write(luout,*) "has_frac_occ: ",has_frac_occ
165	c
166	      return
167	      end
168	c
169	c     Write out the alpha/beta split eigenvalues
170	c
171	      subroutine dft_print_evals_ab(nbf_ao, occ, evals,ipol)
!INLINE REPORT: (DFT_PRINT_EVALS_AB) [5] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(171,18)
!  -> EXTERN: (192,12) util_file_name_
!  -> EXTERN: (193,15) util_io_unit_
!  -> EXTERN: (194,9) errquit_
!  -> EXTERN: (196,12) ga_sync_
!  -> EXTERN: (198,11) ga_nodeid_
!  -> EXTERN: (199,8) for_open
!  -> EXTERN: (200,8) for_write_seq_lis
!  -> EXTERN: (201,8) for_write_seq_lis
!  -> EXTERN: (204,14) for_write_seq_lis_xmit
!  -> EXTERN: (204,14) for_write_seq_lis
!  -> EXTERN: (208,14) for_write_seq_lis_xmit
!  -> EXTERN: (208,14) for_write_seq_lis_xmit
!  -> EXTERN: (208,14) for_write_seq_lis
!  -> EXTERN: (211,14) for_close
!  -> EXTERN: (215,12) ga_brdcst_
!  -> EXTERN: (216,12) ma_sizeof_
!  -> EXTERN: (218,12) ga_sync_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(171,18):remark #34051: REGISTER ALLOCATION : [dft_print_evals_ab_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F:171
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
!        
!    Routine temporaries
!        Total         :     132
!            Global    :      33
!            Local     :      99
!        Regenerable   :      98
!        Spilled       :       5
!        
!    Routine stack
!        Variables     :     184 bytes*
!            Reads     :       2 [6.49e-01 ~ 0.6%]
!            Writes    :      21 [1.20e+01 ~ 12.0%]
!        Spills        :       8 bytes*
!            Reads     :       1 [2.67e-01 ~ 0.3%]
!            Writes    :       1 [2.67e-01 ~ 0.3%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
172	      implicit none
173	#include "errquit.fh"
174	#include "global.fh"
175	#include "mafdecls.fh"
176	#include "msgtypesf.h"
177	#include "msgids.fh"
178	#include "util.fh"
179	c
180	      integer nbf_ao            ! [input] No. of basis functions
181	      integer ipol ! [in]
182	      double precision occ(2*nbf_ao)   ! [input] Occupation numbers 
183	      double precision evals(2*nbf_ao) ! [input] Eigenvalues
184	c
185	      integer i,ok
186	      character*255 evalfile
187	      integer uniteval
188	c
189	      logical util_io_unit
190	      external util_io_unit
191	c
192	      call util_file_name('evals',.false.,.false.,evalfile)
193	      if(.not.util_io_unit(80,90,uniteval))
194	     &  call errquit('print_evals_ab:cannot get free unit', 0,0)
195	c
196	      call ga_sync()
197	      ok = 0
198	      if (ga_nodeid() .eq. 0) then
199	       open(uniteval, status='unknown', form='formatted',file=evalfile)
200	       write(uniteval,*) nbf_ao
201	       write(uniteval,*)
202	       if(ipol.eq.1) then
203	          do i = 1,nbf_ao
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(203,11)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed OUTPUT dependence between at (204:14) and at (204:14)
!LOOP END
204	             write(uniteval,*) i, evals(i)
205	          end do
206	       else
207	          do i = 1,nbf_ao
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_scfutil.F(207,11)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed OUTPUT dependence between at (208:14) and at (208:14)
!LOOP END
208	             write(uniteval,*) i, evals(i), evals(nbf_ao+i)
209	          end do
210	       endif
211	       close(uniteval)
212	       ok = 1
213	      endif ! ga_nodeid() = 0
214	c
215	 10   call ga_brdcst(Msg_Vec_Stat+MSGINT, ok,
216	     C     MA_sizeof(MT_INT,1,MT_BYTE), 0) ! Propagate status
217	c
218	      call ga_sync()
219	c
220	      return
221	      end
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_SYMBR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_SYMBR) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_symbr.F(1,18)
  -> EXTERN: (23,12) ga_copy_
  -> EXTERN: (24,12) sym_symmetrize_
  -> EXTERN: (25,12) ga_dadd_
  -> EXTERN: (26,12) ga_maxelt_
  -> EXTERN: (28,14) ga_nodeid_
  -> EXTERN: (29,13) for_write_seq_fmt_xmit
  -> EXTERN: (29,13) for_write_seq_fmt
  -> EXTERN: (30,18) util_flush_
  -> EXTERN: (34,12) ga_copy_
  -> EXTERN: (35,12) sym_symmetrize_
  -> EXTERN: (36,12) ga_dadd_
  -> EXTERN: (37,12) ga_maxelt_
  -> EXTERN: (39,14) ga_nodeid_
  -> EXTERN: (40,13) for_write_seq_fmt_xmit
  -> EXTERN: (40,13) for_write_seq_fmt
  -> EXTERN: (41,18) util_flush_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_symbr.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_symbr_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_symbr.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     108
            Global    :      22
            Local     :      86
        Regenerable   :      64
        Spilled       :       6
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       4 [2.21e+00 ~ 2.2%]
            Writes    :       8 [8.76e-01 ~ 0.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_symbr.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	      subroutine dft_symbr(geom,basis,ipol,
!INLINE REPORT: (DFT_SYMBR) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_symbr.F(1,18)
!  -> EXTERN: (23,12) ga_copy_
!  -> EXTERN: (24,12) sym_symmetrize_
!  -> EXTERN: (25,12) ga_dadd_
!  -> EXTERN: (26,12) ga_maxelt_
!  -> EXTERN: (28,14) ga_nodeid_
!  -> EXTERN: (29,13) for_write_seq_fmt_xmit
!  -> EXTERN: (29,13) for_write_seq_fmt
!  -> EXTERN: (30,18) util_flush_
!  -> EXTERN: (34,12) ga_copy_
!  -> EXTERN: (35,12) sym_symmetrize_
!  -> EXTERN: (36,12) ga_dadd_
!  -> EXTERN: (37,12) ga_maxelt_
!  -> EXTERN: (39,14) ga_nodeid_
!  -> EXTERN: (40,13) for_write_seq_fmt_xmit
!  -> EXTERN: (40,13) for_write_seq_fmt
!  -> EXTERN: (41,18) util_flush_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_symbr.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_symbr_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_symbr.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0]
!        
!    Routine temporaries
!        Total         :     108
!            Global    :      22
!            Local     :      86
!        Regenerable   :      64
!        Spilled       :       6
!        
!    Routine stack
!        Variables     :     128 bytes*
!            Reads     :       4 [2.21e+00 ~ 2.2%]
!            Writes    :       8 [8.76e-01 ~ 0.9%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	     .     g_a_dens,g_b_dens, g_tmpa)
3	c     
4	c     $Id$
5	c     
6	      implicit none
7	#include "global.fh"
8	#include "stdio.fh"
9	      integer geom,basis
10	      integer  g_a_dens,g_b_dens, g_tmpa
11	      integer ipol
12	c
13	c     This routine is stolen from uhf.F
14	c     Since UHF can break spatial symmetry by localizing the orbitals
15	c     the densities may not be totally symmetric, but since the Hamiltonian
16	c     is symmetric contraction with the integrals projects out the totally 
17	c     symmetric component ... hence we can symmetrize the densities and
18	c     exploit symmetry.  Compute the max change in any element due to
19	c     symmetrizing and print a warning if it is big.
20	c
21	      double precision errmaxa,errmaxb
22	c
23	      call ga_copy(g_a_dens,g_tmpa)
24	      call sym_symmetrize(geom, basis, .true., g_a_dens)
25	      call ga_dadd(1d0, g_a_dens, -1d0, g_tmpa, g_tmpa)
26	      call ga_maxelt(g_tmpa, errmaxa)
27	      if (errmaxa.gt.1d-4) then
28	         if (ga_nodeid().eq.0) then
29	            write(luout,77) 'alpha',errmaxa
30	            call util_flush(luout)
31	         endif
32	      endif
33	      if(ipol.eq.1) return
34	      call ga_copy(g_b_dens,g_tmpa)
35	      call sym_symmetrize(geom, basis, .true., g_b_dens)
36	      call ga_dadd(1d0, g_b_dens, -1d0, g_tmpa, g_tmpa)
37	      call ga_maxelt(g_tmpa, errmaxb)
38	      if (errmaxb.gt.1d-4) then
39	         if (ga_nodeid().eq.0) then
40	            write(luout,77) 'beta',errmaxb
41	            call util_flush(luout)
42	         endif
43	      endif
44	 77         format(' Warning: spatial symmetry breaking: ',
45	     $           1p,A5,' = ',1d9.2)
46	      return
47	      end
48	
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_PSTAT_PRINT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_PSTAT_PRINT) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_pstat.F(80,18)
  -> EXTERN: (86,15) pstat_off_
  -> EXTERN: (87,15) pstat_print_all_
  -> EXTERN: (92,20) pstat_free_
  -> EXTERN: (92,40) errquit_
  -> EXTERN: (93,20) pstat_free_
  -> EXTERN: (93,41) errquit_
  -> EXTERN: (94,20) pstat_free_
  -> EXTERN: (94,38) errquit_
  -> EXTERN: (95,20) pstat_free_
  -> EXTERN: (95,39) errquit_
  -> EXTERN: (96,20) pstat_free_
  -> EXTERN: (96,42) errquit_
  -> EXTERN: (97,20) pstat_free_
  -> EXTERN: (97,40) errquit_
  -> EXTERN: (98,20) pstat_free_
  -> EXTERN: (98,40) errquit_
  -> EXTERN: (99,20) pstat_free_
  -> EXTERN: (99,41) errquit_
  -> EXTERN: (100,20) pstat_free_
  -> EXTERN: (100,40) errquit_
  -> EXTERN: (101,20) pstat_free_
  -> EXTERN: (101,41) errquit_
  -> EXTERN: (102,20) pstat_free_
  -> EXTERN: (102,42) errquit_
  -> EXTERN: (103,20) pstat_free_
  -> EXTERN: (103,41) errquit_
  -> EXTERN: (104,20) pstat_free_
  -> EXTERN: (104,42) errquit_
  -> EXTERN: (105,20) pstat_free_
  -> EXTERN: (105,40) errquit_
  -> EXTERN: (106,20) pstat_free_
  -> EXTERN: (106,39) errquit_
  -> EXTERN: (107,20) pstat_free_
  -> EXTERN: (107,40) errquit_
  -> EXTERN: (108,20) pstat_free_
  -> EXTERN: (108,41) errquit_
  -> EXTERN: (109,20) pstat_free_
  -> EXTERN: (109,42) errquit_
  -> EXTERN: (110,20) pstat_free_
  -> EXTERN: (110,41) errquit_
  -> EXTERN: (111,20) pstat_free_
  -> EXTERN: (111,39) errquit_
  -> EXTERN: (112,20) pstat_free_
  -> EXTERN: (112,41) errquit_
  -> EXTERN: (113,20) pstat_free_
  -> EXTERN: (113,41) errquit_
  -> EXTERN: (114,20) pstat_free_
  -> EXTERN: (114,39) errquit_
  -> EXTERN: (115,20) pstat_free_
  -> EXTERN: (115,40) errquit_
  -> EXTERN: (116,20) pstat_free_
  -> EXTERN: (116,39) errquit_
  -> EXTERN: (117,20) pstat_free_
  -> EXTERN: (117,41) errquit_
  -> EXTERN: (118,20) pstat_free_
  -> EXTERN: (118,41) errquit_
  -> EXTERN: (119,20) pstat_free_
  -> EXTERN: (119,42) errquit_
  -> EXTERN: (120,20) pstat_free_
  -> EXTERN: (120,40) errquit_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_pstat.F(80,18):remark #34051: REGISTER ALLOCATION : [dft_pstat_print_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_pstat.F:80

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :     357
            Global    :      65
            Local     :     292
        Regenerable   :     293
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_PSTAT_INIT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_PSTAT_INIT) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_pstat.F(1,18)
  -> EXTERN: (10,17) rtdb_get_
  -> EXTERN: (15,17) pstat_allocate_
  -> EXTERN: (16,22) errquit_
  -> EXTERN: (17,17) pstat_allocate_
  -> EXTERN: (18,23) errquit_
  -> EXTERN: (19,17) pstat_allocate_
  -> EXTERN: (20,24) errquit_
  -> EXTERN: (21,17) pstat_allocate_
  -> EXTERN: (22,22) errquit_
  -> EXTERN: (23,17) pstat_allocate_
  -> EXTERN: (24,21) errquit_
  -> EXTERN: (25,17) pstat_allocate_
  -> EXTERN: (26,22) errquit_
  -> EXTERN: (27,17) pstat_allocate_
  -> EXTERN: (28,20) errquit_
  -> EXTERN: (29,17) pstat_allocate_
  -> EXTERN: (30,21) errquit_
  -> EXTERN: (31,17) pstat_allocate_
  -> EXTERN: (32,24) errquit_
  -> EXTERN: (33,17) pstat_allocate_
  -> EXTERN: (34,22) errquit_
  -> EXTERN: (35,17) pstat_allocate_
  -> EXTERN: (36,23) errquit_
  -> EXTERN: (37,17) pstat_allocate_
  -> EXTERN: (38,23) errquit_
  -> EXTERN: (39,17) pstat_allocate_
  -> EXTERN: (40,21) errquit_
  -> EXTERN: (41,17) pstat_allocate_
  -> EXTERN: (42,23) errquit_
  -> EXTERN: (43,17) pstat_allocate_
  -> EXTERN: (44,23) errquit_
  -> EXTERN: (45,17) pstat_allocate_
  -> EXTERN: (46,21) errquit_
  -> EXTERN: (47,17) pstat_allocate_
  -> EXTERN: (48,22) errquit_
  -> EXTERN: (49,17) pstat_allocate_
  -> EXTERN: (50,22) errquit_
  -> EXTERN: (51,17) pstat_allocate_
  -> EXTERN: (52,22) errquit_
  -> EXTERN: (53,17) pstat_allocate_
  -> EXTERN: (54,23) errquit_
  -> EXTERN: (55,17) pstat_allocate_
  -> EXTERN: (56,23) errquit_
  -> EXTERN: (57,17) pstat_allocate_
  -> EXTERN: (58,23) errquit_
  -> EXTERN: (59,17) pstat_allocate_
  -> EXTERN: (60,22) errquit_
  -> EXTERN: (61,17) pstat_allocate_
  -> EXTERN: (62,23) errquit_
  -> EXTERN: (63,17) pstat_allocate_
  -> EXTERN: (64,23) errquit_
  -> EXTERN: (65,17) pstat_allocate_
  -> EXTERN: (66,24) errquit_
  -> EXTERN: (67,17) pstat_allocate_
  -> EXTERN: (68,24) errquit_
  -> EXTERN: (69,17) pstat_allocate_
  -> EXTERN: (70,24) errquit_
  -> EXTERN: (71,17) pstat_allocate_
  -> EXTERN: (72,26) errquit_
  -> EXTERN: (73,17) pstat_allocate_
  -> EXTERN: (74,21) errquit_
  -> EXTERN: (76,12) pstat_on_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_pstat.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_pstat_init_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_pstat.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :     536
            Global    :      73
            Local     :     463
        Regenerable   :     464
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_pstat.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	      subroutine dft_pstat_init(rtdb)
!INLINE REPORT: (DFT_PSTAT_INIT) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_pstat.F(1,18)
!  -> EXTERN: (10,17) rtdb_get_
!  -> EXTERN: (15,17) pstat_allocate_
!  -> EXTERN: (16,22) errquit_
!  -> EXTERN: (17,17) pstat_allocate_
!  -> EXTERN: (18,23) errquit_
!  -> EXTERN: (19,17) pstat_allocate_
!  -> EXTERN: (20,24) errquit_
!  -> EXTERN: (21,17) pstat_allocate_
!  -> EXTERN: (22,22) errquit_
!  -> EXTERN: (23,17) pstat_allocate_
!  -> EXTERN: (24,21) errquit_
!  -> EXTERN: (25,17) pstat_allocate_
!  -> EXTERN: (26,22) errquit_
!  -> EXTERN: (27,17) pstat_allocate_
!  -> EXTERN: (28,20) errquit_
!  -> EXTERN: (29,17) pstat_allocate_
!  -> EXTERN: (30,21) errquit_
!  -> EXTERN: (31,17) pstat_allocate_
!  -> EXTERN: (32,24) errquit_
!  -> EXTERN: (33,17) pstat_allocate_
!  -> EXTERN: (34,22) errquit_
!  -> EXTERN: (35,17) pstat_allocate_
!  -> EXTERN: (36,23) errquit_
!  -> EXTERN: (37,17) pstat_allocate_
!  -> EXTERN: (38,23) errquit_
!  -> EXTERN: (39,17) pstat_allocate_
!  -> EXTERN: (40,21) errquit_
!  -> EXTERN: (41,17) pstat_allocate_
!  -> EXTERN: (42,23) errquit_
!  -> EXTERN: (43,17) pstat_allocate_
!  -> EXTERN: (44,23) errquit_
!  -> EXTERN: (45,17) pstat_allocate_
!  -> EXTERN: (46,21) errquit_
!  -> EXTERN: (47,17) pstat_allocate_
!  -> EXTERN: (48,22) errquit_
!  -> EXTERN: (49,17) pstat_allocate_
!  -> EXTERN: (50,22) errquit_
!  -> EXTERN: (51,17) pstat_allocate_
!  -> EXTERN: (52,22) errquit_
!  -> EXTERN: (53,17) pstat_allocate_
!  -> EXTERN: (54,23) errquit_
!  -> EXTERN: (55,17) pstat_allocate_
!  -> EXTERN: (56,23) errquit_
!  -> EXTERN: (57,17) pstat_allocate_
!  -> EXTERN: (58,23) errquit_
!  -> EXTERN: (59,17) pstat_allocate_
!  -> EXTERN: (60,22) errquit_
!  -> EXTERN: (61,17) pstat_allocate_
!  -> EXTERN: (62,23) errquit_
!  -> EXTERN: (63,17) pstat_allocate_
!  -> EXTERN: (64,23) errquit_
!  -> EXTERN: (65,17) pstat_allocate_
!  -> EXTERN: (66,24) errquit_
!  -> EXTERN: (67,17) pstat_allocate_
!  -> EXTERN: (68,24) errquit_
!  -> EXTERN: (69,17) pstat_allocate_
!  -> EXTERN: (70,24) errquit_
!  -> EXTERN: (71,17) pstat_allocate_
!  -> EXTERN: (72,26) errquit_
!  -> EXTERN: (73,17) pstat_allocate_
!  -> EXTERN: (74,21) errquit_
!  -> EXTERN: (76,12) pstat_on_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_pstat.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_pstat_init_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_pstat.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
!        
!    Routine temporaries
!        Total         :     536
!            Global    :      73
!            Local     :     463
!        Regenerable   :     464
!        Spilled       :       0
!        
!    Routine stack
!        Variables     :       8 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	      implicit none
3	#include "pstat.fh"
4	#include "dftps.fh"
5	#include "rtdb.fh"
6	#include "mafdecls.fh"
7	      integer rtdb
8	      integer junk
9	c
10	      if (.not. rtdb_get(rtdb, 'dft:pstat',
11	     $     MT_LOG, 1, odftps)) odftps = .false.
12	c
13	      if (.not. odftps) return
14	c
15	      if (.not. pstat_allocate('dft: 1-e', pstat_qstat, 0, junk,
16	     $     ps_onel)) call errquit('dft: dft_pstat_init', 0,0)
17	      if (.not. pstat_allocate('dft: guess', pstat_qstat, 0, junk,
18	     $     ps_guess)) call errquit('dft: dft_pstat_init', 0,0)
19	      if (.not. pstat_allocate('dft:incore', pstat_qstat, 0, junk,
20	     $     ps_incore)) call errquit('dft: dft_pstat_init', 0,0)
21	      if (.not. pstat_allocate('dft:chol  ', pstat_qstat, 0, junk,
22	     $     ps_chol)) call errquit('dft: dft_pstat_init', 0,0)
23	      if (.not. pstat_allocate('dft:inv   ', pstat_qstat, 0, junk,
24	     $     ps_inv)) call errquit('dft: dft_pstat_init', 0,0)
25	      if (.not. pstat_allocate('dft:2ceri', pstat_qstat, 0, junk,
26	     $     ps_2cer)) call errquit('dft: dft_pstat_init', 0,0)
27	      if (.not. pstat_allocate('dft:  xc', pstat_qstat, 0, junk,
28	     $     ps_xc)) call errquit('dft: dft_pstat_init', 0,0)
29	      if (.not. pstat_allocate('dft:fck2e', pstat_qstat, 0, junk,
30	     $     ps_f2e)) call errquit('dft: dft_pstat_init', 0,0)
31	      if (.not. pstat_allocate('dft:gvxc', pstat_qstat, 0, junk,
32	     $     ps_getvxc)) call errquit('dft: dft_pstat_init', 0,0)
33	      if (.not. pstat_allocate('dft:qv0b', pstat_qstat, 0, junk,
34	     $     ps_qv0b)) call errquit('dft: dft_pstat_init', 0,0)
35	      if (.not. pstat_allocate('dft:xmrge', pstat_qstat, 0, junk,
36	     $     ps_xmrge)) call errquit('dft: dft_pstat_init', 0,0)
37	      if (.not. pstat_allocate('dft:xcopy', pstat_qstat, 0, junk,
38	     $     ps_xcopy)) call errquit('dft: dft_pstat_init', 0,0)
39	      if (.not. pstat_allocate('dft:ssw', pstat_qstat, 0, junk,
40	     $     ps_ssw)) call errquit('dft: dft_pstat_init', 0,0)
41	      if (.not. pstat_allocate('dft:xcrho', pstat_qstat, 0, junk,
42	     $     ps_xcrho)) call errquit('dft: dft_pstat_init', 0,0)
43	      if (.not. pstat_allocate('dft:tabcd', pstat_qstat, 0, junk,
44	     $     ps_tabcd)) call errquit('dft: dft_pstat_init', 0,0)
45	      if (.not. pstat_allocate('dft:ebf', pstat_qstat, 0, junk,
46	     $     ps_ebf)) call errquit('dft: dft_pstat_init', 0,0)
47	      if (.not. pstat_allocate('dft:excf', pstat_qstat, 0, junk,
48	     $     ps_excf)) call errquit('dft: dft_pstat_init', 0,0)
49	      if (.not. pstat_allocate('dft:xcfit', pstat_qstat, 0, junk,
50	     $     ps_fitv)) call errquit('dft: dft_pstat_init', 0,0)
51	      if (.not. pstat_allocate('dft:diag', pstat_qstat, 0, junk,
52	     $     ps_diag)) call errquit('dft: dft_pstat_init', 0,0)
53	      if (.not. pstat_allocate('dft:fitcd', pstat_qstat, 0, junk,
54	     $     ps_fitcd)) call errquit('dft: dft_pstat_init', 0,0)
55	      if (.not. pstat_allocate('dft:vcoul', pstat_qstat, 0, junk,
56	     $     ps_vcoul)) call errquit('dft: dft_pstat_init', 0,0)
57	      if (.not. pstat_allocate('dft:bld12', pstat_qstat, 0, junk,
58	     $     ps_bld12)) call errquit('dft: dft_pstat_init', 0,0)
59	      if (.not. pstat_allocate('dft:diis', pstat_qstat, 0, junk,
60	     $     ps_diis)) call errquit('dft: dft_pstat_init', 0,0)
61	      if (.not. pstat_allocate('dft:fockb', pstat_qstat, 0, junk,
62	     $     ps_fockb)) call errquit('dft: dft_pstat_init', 0,0)
63	      if (.not. pstat_allocate('dft:dgemm', pstat_qstat, 0, junk,
64	     $     ps_dgemm)) call errquit('dft: dft_pstat_init', 0,0)
65	      if (.not. pstat_allocate('dft:bdgem', pstat_qstat, 0, junk,
66	     $     ps_bdgemm)) call errquit('dft: dft_pstat_init', 0,0)
67	      if (.not. pstat_allocate('dft:scfend', pstat_qstat, 0, junk,
68	     $     ps_scfend)) call errquit('dft: dft_pstat_init', 0,0)
69	      if (.not. pstat_allocate('dft:scf', pstat_qstat, 0, junk,
70	     $     ps_scfdft)) call errquit('dft: dft_pstat_init', 0,0)
71	      if (.not. pstat_allocate('dft:cpks_coef', pstat_qstat, 0, junk,
72	     $     ps_cpkscoef)) call errquit('dft: dft_pstat_init', 0,0)
73	      if (.not. pstat_allocate('dft:total', pstat_qstat, 0, junk,
74	     $     ps_dft)) call errquit('dft: dft_pstat_init', 0,0)
75	c       
76	      call pstat_on(ps_dft)
77	      odftps = .true.
78	c
79	      end
80	      subroutine dft_pstat_print()
!INLINE REPORT: (DFT_PSTAT_PRINT) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_pstat.F(80,18)
!  -> EXTERN: (86,15) pstat_off_
!  -> EXTERN: (87,15) pstat_print_all_
!  -> EXTERN: (92,20) pstat_free_
!  -> EXTERN: (92,40) errquit_
!  -> EXTERN: (93,20) pstat_free_
!  -> EXTERN: (93,41) errquit_
!  -> EXTERN: (94,20) pstat_free_
!  -> EXTERN: (94,38) errquit_
!  -> EXTERN: (95,20) pstat_free_
!  -> EXTERN: (95,39) errquit_
!  -> EXTERN: (96,20) pstat_free_
!  -> EXTERN: (96,42) errquit_
!  -> EXTERN: (97,20) pstat_free_
!  -> EXTERN: (97,40) errquit_
!  -> EXTERN: (98,20) pstat_free_
!  -> EXTERN: (98,40) errquit_
!  -> EXTERN: (99,20) pstat_free_
!  -> EXTERN: (99,41) errquit_
!  -> EXTERN: (100,20) pstat_free_
!  -> EXTERN: (100,40) errquit_
!  -> EXTERN: (101,20) pstat_free_
!  -> EXTERN: (101,41) errquit_
!  -> EXTERN: (102,20) pstat_free_
!  -> EXTERN: (102,42) errquit_
!  -> EXTERN: (103,20) pstat_free_
!  -> EXTERN: (103,41) errquit_
!  -> EXTERN: (104,20) pstat_free_
!  -> EXTERN: (104,42) errquit_
!  -> EXTERN: (105,20) pstat_free_
!  -> EXTERN: (105,40) errquit_
!  -> EXTERN: (106,20) pstat_free_
!  -> EXTERN: (106,39) errquit_
!  -> EXTERN: (107,20) pstat_free_
!  -> EXTERN: (107,40) errquit_
!  -> EXTERN: (108,20) pstat_free_
!  -> EXTERN: (108,41) errquit_
!  -> EXTERN: (109,20) pstat_free_
!  -> EXTERN: (109,42) errquit_
!  -> EXTERN: (110,20) pstat_free_
!  -> EXTERN: (110,41) errquit_
!  -> EXTERN: (111,20) pstat_free_
!  -> EXTERN: (111,39) errquit_
!  -> EXTERN: (112,20) pstat_free_
!  -> EXTERN: (112,41) errquit_
!  -> EXTERN: (113,20) pstat_free_
!  -> EXTERN: (113,41) errquit_
!  -> EXTERN: (114,20) pstat_free_
!  -> EXTERN: (114,39) errquit_
!  -> EXTERN: (115,20) pstat_free_
!  -> EXTERN: (115,40) errquit_
!  -> EXTERN: (116,20) pstat_free_
!  -> EXTERN: (116,39) errquit_
!  -> EXTERN: (117,20) pstat_free_
!  -> EXTERN: (117,41) errquit_
!  -> EXTERN: (118,20) pstat_free_
!  -> EXTERN: (118,41) errquit_
!  -> EXTERN: (119,20) pstat_free_
!  -> EXTERN: (119,42) errquit_
!  -> EXTERN: (120,20) pstat_free_
!  -> EXTERN: (120,40) errquit_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_pstat.F(80,18):remark #34051: REGISTER ALLOCATION : [dft_pstat_print_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_pstat.F:80
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :    5[ rax rdx rcx rsi rdi]
!        
!    Routine temporaries
!        Total         :     357
!            Global    :      65
!            Local     :     292
!        Regenerable   :     293
!        Spilled       :       0
!        
!    Routine stack
!        Variables     :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
81	      implicit none
82	#include "pstat.fh"
83	#include "dftps.fh"
84	c     
85	      if (odftps) then
86	         call pstat_off(ps_dft)
87	         call pstat_print_all
88	         odftps = .false.
89	c
90	c     delete the SCF timers
91	c
92	         if (.not. pstat_free(ps_onel))call errquit('dft_pstat?', 0,0)
93	         if (.not. pstat_free(ps_guess))call errquit('dft_pstat?', 0,0)
94	         if (.not. pstat_free(ps_xc))call errquit('dft_pstat?', 0,0)
95	         if (.not. pstat_free(ps_f2e))call errquit('dft_pstat?', 0,0)
96	         if (.not. pstat_free(ps_getvxc))call errquit('dft_pstat?', 0,0)
97	         if (.not. pstat_free(ps_qv0b))call errquit('dft_pstat?', 0,0)
98	         if (.not. pstat_free(ps_diis))call errquit('dft_pstat?', 0,0)
99	         if (.not. pstat_free(ps_fockb))call errquit('dft_pstat?', 0,0)
100	         if (.not. pstat_free(ps_diag))call errquit('dft_pstat?', 0,0)
101	         if (.not. pstat_free(ps_dgemm))call errquit('dft_pstat?', 0,0)
102	         if (.not. pstat_free(ps_bdgemm))call errquit('dft_pstat?', 0,0)
103	         if (.not. pstat_free(ps_fitcd))call errquit('dft_pstat?', 0,0)
104	         if (.not. pstat_free(ps_incore))call errquit('dft_pstat?', 0,0)
105	         if (.not. pstat_free(ps_chol))call errquit('dft_pstat?', 0,0)
106	         if (.not. pstat_free(ps_inv))call errquit('dft_pstat?', 0,0)
107	         if (.not. pstat_free(ps_2cer))call errquit('dft_pstat?', 0,0)
108	         if (.not. pstat_free(ps_vcoul))call errquit('dft_pstat?', 0,0)
109	         if (.not. pstat_free(ps_scfdft))call errquit('dft_pstat?', 0,0)
110	         if (.not. pstat_free(ps_bld12))call errquit('dft_pstat?', 0,0)
111	         if (.not. pstat_free(ps_ssw))call errquit('dft_pstat?', 0,0)
112	         if (.not. pstat_free(ps_xcrho))call errquit('dft_pstat?', 0,0)
113	         if (.not. pstat_free(ps_tabcd))call errquit('dft_pstat?', 0,0)
114	         if (.not. pstat_free(ps_ebf))call errquit('dft_pstat?', 0,0)
115	         if (.not. pstat_free(ps_excf))call errquit('dft_pstat?', 0,0)
116	         if (.not. pstat_free(ps_dft))call errquit('dft_pstat?', 0,0)
117	         if (.not. pstat_free(ps_xmrge))call errquit('dft_pstat?', 0,0)
118	         if (.not. pstat_free(ps_xcopy))call errquit('dft_pstat?', 0,0)
119	         if (.not. pstat_free(ps_scfend))call errquit('dft_pstat?', 0,0)
120	         if (.not. pstat_free(ps_fitv))call errquit('dft_pstat?', 0,0)
121	c
122	      endif
123	c
124	      end
125	c $Id$
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: FUKUI

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FUKUI) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(20,18)
  -> EXTERN: (71,12) ga_nodeid_
  -> EXTERN: (72,22) util_print_
  -> EXTERN: (73,15) ga_create_atom_blocked_
  -> EXTERN: (74,16) ma_push_get_
  -> EXTERN: (76,10) errquit_
  -> EXTERN: (78,29) ga_create_atom_blocked_
  -> EXTERN: (80,29) ga_create_atom_blocked_
  -> EXTERN: (82,15) ga_zero_
  -> EXTERN: (83,15) ga_zero_
  -> EXTERN: (86,19) ga_create_atom_blocked_
  -> EXTERN: (99,18) ga_zero_
  -> EXTERN: (100,18) ga_get_
  -> EXTERN: (102,18) ga_put_
  -> EXTERN: (107,21) ga_dgemm_
  -> EXTERN: (112,21) ga_dgemm_
  -> EXTERN: (119,16) ma_pop_stack_
  -> EXTERN: (120,10) errquit_
  -> EXTERN: (123,15) ga_copy_
  -> EXTERN: (124,15) ga_copy_
  -> EXTERN: (130,11) dft_header_
  -> EXTERN: (139,13) ga_create_atom_blocked_
  -> EXTERN: (140,12) ga_zero_
  -> EXTERN: (141,12) int_1e_ga_
  -> EXTERN: (143,12) ga_zero_
  -> EXTERN: (144,12) ga_add_
  -> EXTERN: (147,10) dft_header_
  -> (148,12) MULL_POP_FUK
  -> EXTERN: (150,12) ga_zero_
  -> EXTERN: (151,12) ga_add_
  -> EXTERN: (154,10) dft_header_
  -> (155,12) MULL_POP_FUK
  -> EXTERN: (157,12) ga_zero_
  -> EXTERN: (158,12) ga_add_
  -> EXTERN: (161,10) dft_header_
  -> (162,12) MULL_POP_FUK
  -> EXTERN: (164,12) ga_zero_
  -> EXTERN: (165,12) ga_add_
  -> EXTERN: (168,10) dft_header_
  -> (169,12) MULL_POP_FUK
  -> EXTERN: (171,12) ga_zero_
  -> EXTERN: (172,12) ga_add_
  -> EXTERN: (175,10) dft_header_
  -> (176,12) MULL_POP_FUK
  -> EXTERN: (178,12) ga_zero_
  -> EXTERN: (179,12) ga_add_
  -> EXTERN: (182,10) dft_header_
  -> (183,12) MULL_POP_FUK
  -> EXTERN: (185,12) ga_zero_
  -> EXTERN: (186,12) ga_add_
  -> EXTERN: (189,10) dft_header_
  -> (190,12) MULL_POP_FUK
  -> EXTERN: (198,10) for_write_seq_lis
  -> EXTERN: (199,10) for_write_seq_lis
  -> EXTERN: (200,10) for_write_seq_fmt
  -> EXTERN: (200,10) for_write_seq_fmt_xmit
  -> EXTERN: (200,10) for_write_seq_fmt_xmit
  -> EXTERN: (201,10) for_write_seq_lis
  -> EXTERN: (202,10) for_write_seq_lis
  -> EXTERN: (203,10) for_write_seq_fmt
  -> EXTERN: (203,10) for_write_seq_fmt_xmit
  -> EXTERN: (203,10) for_write_seq_fmt_xmit
  -> EXTERN: (204,10) for_write_seq_lis
  -> EXTERN: (213,12) ga_zero_
  -> EXTERN: (214,12) fock_2e_
  -> EXTERN: (216,18) ga_ddot_
  -> EXTERN: (218,18) ga_ddot_
  -> EXTERN: (220,12) ga_zero_
  -> EXTERN: (221,12) fock_2e_
  -> EXTERN: (223,18) ga_ddot_
  -> EXTERN: (225,18) ga_ddot_
  -> EXTERN: (227,12) ga_zero_
  -> EXTERN: (228,12) fock_2e_
  -> EXTERN: (230,18) ga_ddot_
  -> EXTERN: (232,12) ga_zero_
  -> EXTERN: (233,12) fock_2e_
  -> EXTERN: (235,18) ga_ddot_
  -> EXTERN: (240,19) ga_create_atom_blocked_
  -> EXTERN: (242,18) ga_create_atom_blocked_
  -> EXTERN: (244,12) ga_zero_
  -> EXTERN: (245,12) ga_zero_
  -> EXTERN: (247,21) ga_create_atom_blocked_
  -> EXTERN: (249,20) ga_create_atom_blocked_
  -> EXTERN: (251,14) ga_zero_
  -> EXTERN: (252,14) ga_zero_
  -> EXTERN: (255,14) ga_dgemm_
  -> (262,12) XC_POT
  -> EXTERN: (267,12) ga_zero_
  -> EXTERN: (268,12) fock_2e_
  -> EXTERN: (271,26) ga_ddot_
  -> EXTERN: (272,26) ga_ddot_
  -> EXTERN: (288,14) errquit_
  -> EXTERN: (305,16) rtdb_put_
  -> EXTERN: (306,10) errquit_
  -> EXTERN: (308,14) ga_zero_
  -> EXTERN: (309,14) ga_dgemm_
  -> EXTERN: (318,14) ga_zero_
  -> (320,12) XC_POT
  -> EXTERN: (328,10) for_write_seq_fmt
  -> EXTERN: (328,10) for_write_seq_fmt_xmit
  -> EXTERN: (330,10) for_write_seq_lis
  -> EXTERN: (331,10) for_write_seq_fmt
  -> EXTERN: (332,10) for_write_seq_fmt
  -> EXTERN: (333,10) for_write_seq_fmt
  -> EXTERN: (334,10) for_write_seq_fmt
  -> EXTERN: (335,10) for_write_seq_fmt
  -> EXTERN: (337,10) for_write_seq_fmt
  -> EXTERN: (357,16) rtdb_put_
  -> EXTERN: (358,10) errquit_
  -> EXTERN: (360,14) ga_zero_
  -> EXTERN: (361,14) ga_dgemm_
  -> EXTERN: (370,14) ga_zero_
  -> (372,12) XC_POT
  -> EXTERN: (380,10) for_write_seq_lis
  -> EXTERN: (381,10) for_write_seq_fmt
  -> EXTERN: (381,10) for_write_seq_fmt_xmit
  -> EXTERN: (383,10) for_write_seq_lis
  -> EXTERN: (384,10) for_write_seq_fmt
  -> EXTERN: (385,10) for_write_seq_fmt
  -> EXTERN: (386,10) for_write_seq_fmt
  -> EXTERN: (387,10) for_write_seq_fmt
  -> EXTERN: (388,10) for_write_seq_fmt
  -> EXTERN: (390,10) for_write_seq_fmt
  -> EXTERN: (394,10) for_write_seq_lis
  -> EXTERN: (395,10) for_write_seq_fmt
  -> EXTERN: (397,10) for_write_seq_fmt
  -> EXTERN: (410,18) rtdb_put_
  -> EXTERN: (411,12) errquit_
  -> EXTERN: (413,16) ga_zero_
  -> EXTERN: (414,16) ga_dgemm_
  -> EXTERN: (422,16) ga_zero_
  -> (424,14) XC_POT
  -> EXTERN: (432,12) for_write_seq_lis
  -> EXTERN: (433,12) for_write_seq_fmt_xmit
  -> EXTERN: (433,12) for_write_seq_fmt
  -> EXTERN: (435,12) for_write_seq_lis
  -> EXTERN: (436,12) for_write_seq_fmt
  -> EXTERN: (437,12) for_write_seq_fmt
  -> EXTERN: (438,12) for_write_seq_fmt
  -> EXTERN: (439,12) for_write_seq_fmt
  -> EXTERN: (440,12) for_write_seq_fmt
  -> EXTERN: (442,12) for_write_seq_fmt
  -> EXTERN: (459,18) rtdb_put_
  -> EXTERN: (460,12) errquit_
  -> EXTERN: (462,16) ga_zero_
  -> EXTERN: (463,16) ga_dgemm_
  -> EXTERN: (472,16) ga_zero_
  -> (474,14) XC_POT
  -> EXTERN: (482,12) for_write_seq_lis
  -> EXTERN: (483,12) for_write_seq_fmt_xmit
  -> EXTERN: (483,12) for_write_seq_fmt
  -> EXTERN: (485,12) for_write_seq_lis
  -> EXTERN: (486,12) for_write_seq_fmt
  -> EXTERN: (487,12) for_write_seq_fmt
  -> EXTERN: (488,12) for_write_seq_fmt
  -> EXTERN: (489,12) for_write_seq_fmt
  -> EXTERN: (490,12) for_write_seq_fmt
  -> EXTERN: (492,12) for_write_seq_fmt
  -> EXTERN: (494,12) for_write_seq_lis
  -> EXTERN: (501,16) rtdb_put_
  -> EXTERN: (502,10) errquit_
  -> EXTERN: (503,17) ga_destroy_
  -> EXTERN: (503,40) errquit_
  -> EXTERN: (505,17) ga_destroy_
  -> EXTERN: (505,39) errquit_
  -> EXTERN: (508,19) ga_destroy_
  -> EXTERN: (508,42) errquit_
  -> EXTERN: (510,19) ga_destroy_
  -> EXTERN: (510,41) errquit_
  -> EXTERN: (514,17) ga_destroy_
  -> EXTERN: (514,36) errquit_
  -> EXTERN: (516,17) ga_destroy_
  -> EXTERN: (516,45) errquit_
  -> EXTERN: (518,17) ga_destroy_
  -> EXTERN: (518,45) errquit_
  -> EXTERN: (520,17) ga_destroy_
  -> EXTERN: (520,45) errquit_
  -> EXTERN: (522,17) ga_destroy_
  -> EXTERN: (522,45) errquit_
  -> EXTERN: (524,17) ga_destroy_
  -> EXTERN: (524,40) errquit_
  -> EXTERN: (526,17) ga_destroy_
  -> EXTERN: (526,34) errquit_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(77,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(117,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(116,10)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(258,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(273,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(312,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(319,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(364,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(371,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(417,9)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(423,9)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(466,9)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(473,9)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(20,18):remark #34051: REGISTER ALLOCATION : [fukui_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F:20

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :    1424
            Global    :     243
            Local     :    1181
        Regenerable   :    1093
        Spilled       :      53
        
    Routine stack
        Variables     :     704 bytes*
            Reads     :       4 [1.82e+00 ~ 1.8%]
            Writes    :     130 [2.31e+00 ~ 2.3%]
        Spills        :     376 bytes*
            Reads     :     129 [4.81e+00 ~ 4.8%]
            Writes    :     101 [3.87e+00 ~ 3.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: XC_POT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (XC_POT) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(689,18)
  -> EXTERN: (759,32) util_print_
  -> EXTERN: (761,21) util_print_
  -> EXTERN: (764,10) ga_nodeid_
  -> EXTERN: (765,13) ga_nnodes_
  -> EXTERN: (768,10) for_write_seq_lis
  -> EXTERN: (768,10) for_write_seq_lis_xmit
  -> EXTERN: (768,10) for_write_seq_lis_xmit
  -> EXTERN: (768,10) for_write_seq_lis_xmit
  -> EXTERN: (768,10) for_write_seq_lis_xmit
  -> EXTERN: (768,10) for_write_seq_lis_xmit
  -> EXTERN: (770,10) for_write_seq_lis
  -> EXTERN: (770,10) for_write_seq_lis_xmit
  -> EXTERN: (770,10) for_write_seq_lis_xmit
  -> EXTERN: (770,10) for_write_seq_lis_xmit
  -> EXTERN: (770,10) for_write_seq_lis_xmit
  -> EXTERN: (770,10) for_write_seq_lis_xmit
  -> EXTERN: (770,10) for_write_seq_lis_xmit
  -> EXTERN: (772,10) for_write_seq_lis
  -> EXTERN: (773,15) ga_print_
  -> EXTERN: (774,23) ga_print_
  -> EXTERN: (781,21) __powr8i8
  -> EXTERN: (782,15) ga_sync_
  -> EXTERN: (783,26) dft_tstamp_
  -> EXTERN: (790,26) ga_create_atom_blocked_
  -> EXTERN: (792,20) fock_2e_
  -> EXTERN: (794,37) ga_ddot_
  -> EXTERN: (795,20) ga_zero_
  -> EXTERN: (796,29) ga_ddot_
  -> EXTERN: (797,20) ga_dadd_
  -> EXTERN: (798,25) ga_destroy_
  -> EXTERN: (798,47) errquit_
  -> EXTERN: (801,20) fock_2e_
  -> EXTERN: (803,35) ga_ddot_
  -> EXTERN: (811,21) fock_2e_
  -> EXTERN: (813,39) ga_ddot_
  -> EXTERN: (814,21) ga_ddot_
  -> EXTERN: (826,26) ga_create_atom_blocked_
  -> EXTERN: (827,26) ga_create_atom_blocked_
  -> EXTERN: (828,21) ga_zero_
  -> EXTERN: (829,21) ga_zero_
  -> EXTERN: (834,21) fock_2e_
  -> EXTERN: (836,21) ga_zero_
  -> EXTERN: (837,21) ga_zero_
  -> EXTERN: (839,21) ga_ddot_
  -> EXTERN: (840,21) ga_ddot_
  -> EXTERN: (842,21) ga_ddot_
  -> EXTERN: (843,21) ga_ddot_
  -> EXTERN: (845,21) ga_ddot_
  -> EXTERN: (846,21) ga_ddot_
  -> EXTERN: (847,21) ga_dadd_
  -> EXTERN: (848,21) ga_copy_
  -> EXTERN: (849,21) ga_dadd_
  -> EXTERN: (851,21) ga_dadd_
  -> EXTERN: (853,26) ga_destroy_
  -> EXTERN: (853,47) errquit_
  -> EXTERN: (855,26) ga_destroy_
  -> EXTERN: (855,47) errquit_
  -> EXTERN: (859,26) dft_tstamp_
  -> EXTERN: (860,15) ga_sync_
  -> EXTERN: (881,17) rtdb_get_
  -> EXTERN: (887,23) bas_numbf_
  -> EXTERN: (888,21) errquit_
  -> EXTERN: (895,22) ma_push_get_
  -> EXTERN: (896,23) errquit_
  -> EXTERN: (898,18) dfill_
  -> EXTERN: (900,18) grid_quadv0_
  -> EXTERN: (907,18) sym_vec_symmetrize_
  -> EXTERN: (909,21) sym_vec_symmetrize_
  -> EXTERN: (914,18) xc_fitv_
  -> EXTERN: (916,29) dft_tstamp_
  -> EXTERN: (917,22) ma_pop_stack_
  -> EXTERN: (918,16) errquit_
  -> EXTERN: (924,10) for_write_seq_lis
  -> EXTERN: (925,15) ga_print_
  -> EXTERN: (926,23) ga_print_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(816,16)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(820,16)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(877,7)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(878,9) ]
   remark #25438: unrolled without remainder by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(689,18):remark #34051: REGISTER ALLOCATION : [xc_pot_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F:689

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     558
            Global    :      88
            Local     :     470
        Regenerable   :     388
        Spilled       :      17
        
    Routine stack
        Variables     :     312 bytes*
            Reads     :       7 [2.59e-01 ~ 0.3%]
            Writes    :      32 [1.76e+00 ~ 1.8%]
        Spills        :      88 bytes*
            Reads     :      19 [1.10e+00 ~ 1.1%]
            Writes    :      11 [9.09e-01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MULL_POP_FUK

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MULL_POP_FUK) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(531,18)
  -> EXTERN: (555,19) pstat_on_
  -> EXTERN: (561,15) geom_ncent_
  -> EXTERN: (562,12) errquit_
  -> EXTERN: (563,17) bas_numcont_
  -> EXTERN: (564,12) errquit_
  -> EXTERN: (565,18) bas_numbf_
  -> EXTERN: (566,12) errquit_
  -> EXTERN: (569,19) bas_ce2bfr_
  -> EXTERN: (570,14) errquit_
  -> EXTERN: (576,15) ma_push_get_
  -> EXTERN: (577,12) errquit_
  -> EXTERN: (578,15) ma_push_get_
  -> EXTERN: (579,12) errquit_
  -> EXTERN: (580,15) ma_push_get_
  -> EXTERN: (581,12) errquit_
  -> EXTERN: (583,14) ga_create_atom_blocked_
  -> EXTERN: (585,12) ga_dgemm_
  -> (587,12) MULL_CALC_FUK
  -> EXTERN: (590,12) ga_sync_
  -> EXTERN: (592,15) ma_pop_stack_
  -> EXTERN: (593,12) errquit_
  -> EXTERN: (594,15) ma_pop_stack_
  -> EXTERN: (595,12) errquit_
  -> EXTERN: (596,15) ma_pop_stack_
  -> EXTERN: (597,12) errquit_
  -> EXTERN: (598,15) ga_destroy_
  -> EXTERN: (600,19) pstat_off_


    Report from: Loop nest & Vector optimizations [loop, vec]



Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(573,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(531,18):remark #34051: REGISTER ALLOCATION : [mull_pop_fuk_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F:531

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r11 r13-r15]
        
    Routine temporaries
        Total         :     221
            Global    :      46
            Local     :     175
        Regenerable   :     162
        Spilled       :       5
        
    Routine stack
        Variables     :     112 bytes*
            Reads     :       9 [1.16e+01 ~ 11.6%]
            Writes    :       6 [5.15e+00 ~ 5.2%]
        Spills        :       8 bytes*
            Reads     :       1 [3.63e-01 ~ 0.4%]
            Writes    :       1 [3.63e-01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MULL_CALC_FUK

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MULL_CALC_FUK) [4] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(607,18)
  -> EXTERN: (633,10) ga_nodeid_
  -> EXTERN: (634,13) ga_nnodes_
  -> EXTERN: (636,12) dfill_
  -> EXTERN: (637,12) dfill_
  -> EXTERN: (639,17) bas_geom_
  -> EXTERN: (639,40) errquit_
  -> EXTERN: (643,18) bas_ce2cnr_
  -> EXTERN: (644,14) errquit_
  -> EXTERN: (645,14) get_atom_block_
  -> EXTERN: (649,21) bas_cn2bfr_
  -> EXTERN: (650,16) errquit_
  -> EXTERN: (659,12) ga_sync_
  -> EXTERN: (660,12) ga_dgop_
  -> EXTERN: (661,12) ga_dgop_
  -> EXTERN: (663,9) for_write_seq_fmt
  -> EXTERN: (665,9) for_write_seq_fmt
  -> EXTERN: (668,20) bas_ce2cnr_
  -> EXTERN: (669,16) errquit_
  -> EXTERN: (671,21) geom_cent_get_
  -> EXTERN: (672,16) errquit_
  -> EXTERN: (675,21) geom_tag_to_element_
  -> EXTERN: (678,14) for_write_seq_fmt_xmit
  -> EXTERN: (678,14) for_write_seq_fmt_xmit
  -> EXTERN: (678,14) for_write_seq_fmt_xmit
  -> EXTERN: (678,14) for_write_seq_fmt
  -> EXTERN: (678,40) f_ldnint_val
  -> EXTERN: (684,12) ga_sync_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(653,13)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(654,13) ]
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(658,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(657,9)
      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(681,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(607,18):remark #34051: REGISTER ALLOCATION : [mull_calc_fuk_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F:607

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     242
            Global    :      64
            Local     :     178
        Regenerable   :     162
        Spilled       :      13
        
    Routine stack
        Variables     :     184 bytes*
            Reads     :      13 [5.99e+00 ~ 6.0%]
            Writes    :      14 [2.06e+00 ~ 2.1%]
        Spills        :      56 bytes*
            Reads     :      10 [9.77e-01 ~ 1.0%]
            Writes    :       7 [7.22e-01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	C>
2	C> \brief Calculate Fukui indeces
3	C>
4	C> Calculate Fukui indeces for open shell wavefunctions [1,2].
5	C>
6	C> [1] E. Chamorro, P. P&eacute;rez,
7	C>     <i>"Condensed-to-atoms electronic Fukui functions within the
8	C>     framework of spin-polarized density-functional theory"</i>,
9	C>     J. Chem. Phys. <b>123</b>, 114107 (2005), DOI:
10	C>     <a href="https://doi.org/10.1063/1.2033689">
11	C>     10.1063/1.2033689</a>.
12	C>
13	C> [2] R.G. Parr, W. Yang,
14	C>     <i>"Density functional approach to the frontier-electron theory
15	C>     of chemical reactivity"</i>,
16	C>     J. Am. Chem. Soc. <b>106</b>, 4049-4050 (1984), DOI:
17	C>     <a href="https://doi.org/10.1021/ja00326a036">
18	C>     10.1021/ja00326a036</a>.
19	C>
20	      Subroutine fukui(g_movecs, k_eval, tol2e, rtdb,
!INLINE REPORT: (FUKUI) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(20,18)
!  -> EXTERN: (71,12) ga_nodeid_
!  -> EXTERN: (72,22) util_print_
!  -> EXTERN: (73,15) ga_create_atom_blocked_
!  -> EXTERN: (74,16) ma_push_get_
!  -> EXTERN: (76,10) errquit_
!  -> EXTERN: (78,29) ga_create_atom_blocked_
!  -> EXTERN: (80,29) ga_create_atom_blocked_
!  -> EXTERN: (82,15) ga_zero_
!  -> EXTERN: (83,15) ga_zero_
!  -> EXTERN: (86,19) ga_create_atom_blocked_
!  -> EXTERN: (99,18) ga_zero_
!  -> EXTERN: (100,18) ga_get_
!  -> EXTERN: (102,18) ga_put_
!  -> EXTERN: (107,21) ga_dgemm_
!  -> EXTERN: (112,21) ga_dgemm_
!  -> EXTERN: (119,16) ma_pop_stack_
!  -> EXTERN: (120,10) errquit_
!  -> EXTERN: (123,15) ga_copy_
!  -> EXTERN: (124,15) ga_copy_
!  -> EXTERN: (130,11) dft_header_
!  -> EXTERN: (139,13) ga_create_atom_blocked_
!  -> EXTERN: (140,12) ga_zero_
!  -> EXTERN: (141,12) int_1e_ga_
!  -> EXTERN: (143,12) ga_zero_
!  -> EXTERN: (144,12) ga_add_
!  -> EXTERN: (147,10) dft_header_
!  -> (148,12) MULL_POP_FUK
!  -> EXTERN: (150,12) ga_zero_
!  -> EXTERN: (151,12) ga_add_
!  -> EXTERN: (154,10) dft_header_
!  -> (155,12) MULL_POP_FUK
!  -> EXTERN: (157,12) ga_zero_
!  -> EXTERN: (158,12) ga_add_
!  -> EXTERN: (161,10) dft_header_
!  -> (162,12) MULL_POP_FUK
!  -> EXTERN: (164,12) ga_zero_
!  -> EXTERN: (165,12) ga_add_
!  -> EXTERN: (168,10) dft_header_
!  -> (169,12) MULL_POP_FUK
!  -> EXTERN: (171,12) ga_zero_
!  -> EXTERN: (172,12) ga_add_
!  -> EXTERN: (175,10) dft_header_
!  -> (176,12) MULL_POP_FUK
!  -> EXTERN: (178,12) ga_zero_
!  -> EXTERN: (179,12) ga_add_
!  -> EXTERN: (182,10) dft_header_
!  -> (183,12) MULL_POP_FUK
!  -> EXTERN: (185,12) ga_zero_
!  -> EXTERN: (186,12) ga_add_
!  -> EXTERN: (189,10) dft_header_
!  -> (190,12) MULL_POP_FUK
!  -> EXTERN: (198,10) for_write_seq_lis
!  -> EXTERN: (199,10) for_write_seq_lis
!  -> EXTERN: (200,10) for_write_seq_fmt
!  -> EXTERN: (200,10) for_write_seq_fmt_xmit
!  -> EXTERN: (200,10) for_write_seq_fmt_xmit
!  -> EXTERN: (201,10) for_write_seq_lis
!  -> EXTERN: (202,10) for_write_seq_lis
!  -> EXTERN: (203,10) for_write_seq_fmt
!  -> EXTERN: (203,10) for_write_seq_fmt_xmit
!  -> EXTERN: (203,10) for_write_seq_fmt_xmit
!  -> EXTERN: (204,10) for_write_seq_lis
!  -> EXTERN: (213,12) ga_zero_
!  -> EXTERN: (214,12) fock_2e_
!  -> EXTERN: (216,18) ga_ddot_
!  -> EXTERN: (218,18) ga_ddot_
!  -> EXTERN: (220,12) ga_zero_
!  -> EXTERN: (221,12) fock_2e_
!  -> EXTERN: (223,18) ga_ddot_
!  -> EXTERN: (225,18) ga_ddot_
!  -> EXTERN: (227,12) ga_zero_
!  -> EXTERN: (228,12) fock_2e_
!  -> EXTERN: (230,18) ga_ddot_
!  -> EXTERN: (232,12) ga_zero_
!  -> EXTERN: (233,12) fock_2e_
!  -> EXTERN: (235,18) ga_ddot_
!  -> EXTERN: (240,19) ga_create_atom_blocked_
!  -> EXTERN: (242,18) ga_create_atom_blocked_
!  -> EXTERN: (244,12) ga_zero_
!  -> EXTERN: (245,12) ga_zero_
!  -> EXTERN: (247,21) ga_create_atom_blocked_
!  -> EXTERN: (249,20) ga_create_atom_blocked_
!  -> EXTERN: (251,14) ga_zero_
!  -> EXTERN: (252,14) ga_zero_
!  -> EXTERN: (255,14) ga_dgemm_
!  -> (262,12) XC_POT
!  -> EXTERN: (267,12) ga_zero_
!  -> EXTERN: (268,12) fock_2e_
!  -> EXTERN: (271,26) ga_ddot_
!  -> EXTERN: (272,26) ga_ddot_
!  -> EXTERN: (288,14) errquit_
!  -> EXTERN: (305,16) rtdb_put_
!  -> EXTERN: (306,10) errquit_
!  -> EXTERN: (308,14) ga_zero_
!  -> EXTERN: (309,14) ga_dgemm_
!  -> EXTERN: (318,14) ga_zero_
!  -> (320,12) XC_POT
!  -> EXTERN: (328,10) for_write_seq_fmt
!  -> EXTERN: (328,10) for_write_seq_fmt_xmit
!  -> EXTERN: (330,10) for_write_seq_lis
!  -> EXTERN: (331,10) for_write_seq_fmt
!  -> EXTERN: (332,10) for_write_seq_fmt
!  -> EXTERN: (333,10) for_write_seq_fmt
!  -> EXTERN: (334,10) for_write_seq_fmt
!  -> EXTERN: (335,10) for_write_seq_fmt
!  -> EXTERN: (337,10) for_write_seq_fmt
!  -> EXTERN: (357,16) rtdb_put_
!  -> EXTERN: (358,10) errquit_
!  -> EXTERN: (360,14) ga_zero_
!  -> EXTERN: (361,14) ga_dgemm_
!  -> EXTERN: (370,14) ga_zero_
!  -> (372,12) XC_POT
!  -> EXTERN: (380,10) for_write_seq_lis
!  -> EXTERN: (381,10) for_write_seq_fmt
!  -> EXTERN: (381,10) for_write_seq_fmt_xmit
!  -> EXTERN: (383,10) for_write_seq_lis
!  -> EXTERN: (384,10) for_write_seq_fmt
!  -> EXTERN: (385,10) for_write_seq_fmt
!  -> EXTERN: (386,10) for_write_seq_fmt
!  -> EXTERN: (387,10) for_write_seq_fmt
!  -> EXTERN: (388,10) for_write_seq_fmt
!  -> EXTERN: (390,10) for_write_seq_fmt
!  -> EXTERN: (394,10) for_write_seq_lis
!  -> EXTERN: (395,10) for_write_seq_fmt
!  -> EXTERN: (397,10) for_write_seq_fmt
!  -> EXTERN: (410,18) rtdb_put_
!  -> EXTERN: (411,12) errquit_
!  -> EXTERN: (413,16) ga_zero_
!  -> EXTERN: (414,16) ga_dgemm_
!  -> EXTERN: (422,16) ga_zero_
!  -> (424,14) XC_POT
!  -> EXTERN: (432,12) for_write_seq_lis
!  -> EXTERN: (433,12) for_write_seq_fmt_xmit
!  -> EXTERN: (433,12) for_write_seq_fmt
!  -> EXTERN: (435,12) for_write_seq_lis
!  -> EXTERN: (436,12) for_write_seq_fmt
!  -> EXTERN: (437,12) for_write_seq_fmt
!  -> EXTERN: (438,12) for_write_seq_fmt
!  -> EXTERN: (439,12) for_write_seq_fmt
!  -> EXTERN: (440,12) for_write_seq_fmt
!  -> EXTERN: (442,12) for_write_seq_fmt
!  -> EXTERN: (459,18) rtdb_put_
!  -> EXTERN: (460,12) errquit_
!  -> EXTERN: (462,16) ga_zero_
!  -> EXTERN: (463,16) ga_dgemm_
!  -> EXTERN: (472,16) ga_zero_
!  -> (474,14) XC_POT
!  -> EXTERN: (482,12) for_write_seq_lis
!  -> EXTERN: (483,12) for_write_seq_fmt_xmit
!  -> EXTERN: (483,12) for_write_seq_fmt
!  -> EXTERN: (485,12) for_write_seq_lis
!  -> EXTERN: (486,12) for_write_seq_fmt
!  -> EXTERN: (487,12) for_write_seq_fmt
!  -> EXTERN: (488,12) for_write_seq_fmt
!  -> EXTERN: (489,12) for_write_seq_fmt
!  -> EXTERN: (490,12) for_write_seq_fmt
!  -> EXTERN: (492,12) for_write_seq_fmt
!  -> EXTERN: (494,12) for_write_seq_lis
!  -> EXTERN: (501,16) rtdb_put_
!  -> EXTERN: (502,10) errquit_
!  -> EXTERN: (503,17) ga_destroy_
!  -> EXTERN: (503,40) errquit_
!  -> EXTERN: (505,17) ga_destroy_
!  -> EXTERN: (505,39) errquit_
!  -> EXTERN: (508,19) ga_destroy_
!  -> EXTERN: (508,42) errquit_
!  -> EXTERN: (510,19) ga_destroy_
!  -> EXTERN: (510,41) errquit_
!  -> EXTERN: (514,17) ga_destroy_
!  -> EXTERN: (514,36) errquit_
!  -> EXTERN: (516,17) ga_destroy_
!  -> EXTERN: (516,45) errquit_
!  -> EXTERN: (518,17) ga_destroy_
!  -> EXTERN: (518,45) errquit_
!  -> EXTERN: (520,17) ga_destroy_
!  -> EXTERN: (520,45) errquit_
!  -> EXTERN: (522,17) ga_destroy_
!  -> EXTERN: (522,45) errquit_
!  -> EXTERN: (524,17) ga_destroy_
!  -> EXTERN: (524,40) errquit_
!  -> EXTERN: (526,17) ga_destroy_
!  -> EXTERN: (526,34) errquit_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(20,18):remark #34051: REGISTER ALLOCATION : [fukui_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F:20
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm5]
!        
!    Routine temporaries
!        Total         :    1424
!            Global    :     243
!            Local     :    1181
!        Regenerable   :    1093
!        Spilled       :      53
!        
!    Routine stack
!        Variables     :     704 bytes*
!            Reads     :       4 [1.82e+00 ~ 1.8%]
!            Writes    :     130 [2.31e+00 ~ 2.3%]
!        Spills        :     376 bytes*
!            Reads     :     129 [4.81e+00 ~ 4.8%]
!            Writes    :     101 [3.87e+00 ~ 3.9%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
21	     &                 nExc, iVxc_opt, g_xcinv, IOLGC, g_wght,
22	     &                 g_xyz, g_nq, wght_GA, rho_n, irdens_atom,
23	     &                 icetobfr, natoms)
24	c     
25	c     $Id$
26	c     
27	      implicit none
28	#include "errquit.fh"
29	      integer g_dens_HOMO(2), g_dens_LUMO(2), g_orb, g_dens_ss, ik,
30	     &        g_movecs(2), isp, k_eval(2), g_s,
31	     &        me, l_temp_vec, i_temp_vec,
32	     &        g_dens(2), noc_aux_1, noc_aux_2, noc_test
33	      integer irdens_atom, icetobfr
34	c
35	      integer nExc
36	      integer iVxc_opt
37	      integer g_xcinv, g_vxc(4), g_wght, g_xyz,g_nq
38	      integer natoms
39	      logical IOLGC, wght_GA
40	      integer rtdb
41	c
42	      double precision eig_lumo(2), eig_homo(2), jfac(4), kfac(4),
43	     &                 mu_n_mas, mu_n_men, mu_n_cer, tol2e,
44	     &                 mu_s_mas, mu_s_men, mu_s_cer, 
45	     &                 int_HaHa, int_HbHb, int_LaLa, int_LbLb,
46	     &                 int_HaLb, int_LaHb, Exc(2), ecoul, rho_n,
47	     &                 int_vxc_H(2), int_vxc_L(2), Exc_zero,
48	     &                 Exc_pert, diff_Exc, ion_pot, ele_afi,
49	     &                 high_mult, low_mult, e_orbital, e_coul,
50	     &                 e_xc
51	c
52	c #include "stdio.fh"
53	c #include "mafdecls.fh"
54	c #include "global.fh"
55	c #include "util.fh"
56	c
57	#include "mafdecls.fh"
58	#include "rtdb.fh"
59	#include "bas.fh"
60	#include "global.fh"
61	#include "tcgmsg.fh"
62	#include "cdft.fh"
63	#include "util.fh"
64	#include "sym.fh"
65	c
66	#include "stdio.fh"
67	c
68	      integer  ga_create_atom_blocked
69	      external ga_create_atom_blocked
70	      logical oprint_fukui
71	      me = ga_nodeid()
72	      oprint_fukui = util_print('Fukui information', print_high)
73	      g_orb = ga_create_atom_blocked(geom, AO_bas_han, 'ga_orb')
74	      if (.not.MA_Push_Get(MT_Dbl, nbf_ao, 'temp vec',
75	     &   l_temp_vec, i_temp_vec))
76	     &   call errquit('fukui: cannot allocate temp vec',0, MA_ERR)
77	      do isp = 1, 2
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(77,7)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!LOOP END
78	         g_dens_HOMO(isp) = ga_create_atom_blocked(geom,
79	     &                      AO_bas_han, 'ga_dens_orb_homo')
80	         g_dens_LUMO(isp) = ga_create_atom_blocked(geom,
81	     &                      AO_bas_han, 'ga_dens_orb_lumo')
82	         call ga_zero(g_dens_HOMO(isp))
83	         call ga_zero(g_dens_LUMO(isp))
84	      end do
85	c
86	      g_dens_ss = ga_create_atom_blocked(geom, AO_bas_han,
87	     &            'ga_dens_orb_ss')
88	c
89	      do isp = 1, ipol
90	         if (noc(isp).eq.0) then
91	           noc_aux_1 = 1
92	           noc_aux_2 = 1
93	         else
94	           noc_aux_1 = noc(isp)
95	           noc_aux_2 = noc(isp) + 1
96	         end if
97	C        do ik = noc(isp), (noc(isp)+1)
98	         do ik = noc_aux_1, noc_aux_2
99	            call ga_zero(g_orb)
100	            call ga_get(g_movecs(isp), 1, nbf_ao, ik, ik,
101	     &                  Dbl_MB(i_temp_vec), nbf_ao)
102	            call ga_put(g_orb, 1, nbf_ao, ik, ik, 
103	     &                  Dbl_MB(i_temp_vec), nbf_ao)
104	            if (ik.eq.noc(isp)) then
105	               eig_homo(isp) = dbl_mb(k_eval(isp) + 
106	     &                         noc(isp) - 1)
107	               call ga_dgemm('N', 'T', nbf_ao, nbf_ao, nbf_ao,
108	     &                       1.0d00, g_orb, g_orb, 0.d00, 
109	     &                       g_dens_HOMO(isp))
110	            else
111	               eig_lumo(isp) = dbl_mb(k_eval(isp) + noc(isp))
112	               call ga_dgemm('N', 'T', nbf_ao, nbf_ao, nbf_ao,
113	     &                       1.0d00, g_orb, g_orb, 0.d00,
114	     &                       g_dens_LUMO(isp))
115	            end if
116	         end do
117	      end do
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(117,7)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(116,10)
!      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!   LOOP END
!LOOP END
118	c
119	      if (.not.ma_pop_stack(l_temp_vec))
120	     &   call errquit('fukui: cannot pop stack',0, MA_ERR)
121	c      
122	      if (ipol.eq.1) then
123	         call ga_copy(g_dens_HOMO(1), g_dens_HOMO(2))
124	         call ga_copy(g_dens_LUMO(1), g_dens_LUMO(2))
125	         eig_homo(2) = eig_homo(1)
126	         eig_lumo(2) = eig_lumo(1)
127	      end if
128	c
129	      if (me.eq.0.and.oprint_fukui)
130	     &    call dft_header(' Reactivity Parameters ')
131	c
132	      mu_n_mas = 0.5d00*(eig_lumo(1) + eig_lumo(2))
133	      mu_n_men = 0.5d00*(eig_homo(1) + eig_homo(2))
134	      mu_n_cer = 0.5*(mu_n_mas + mu_n_men)
135	      mu_s_mas = 0.5d00*(eig_lumo(1) - eig_homo(2))
136	      mu_s_men = 0.5d00*(eig_homo(1) - eig_lumo(2))
137	      mu_s_cer = 0.5*(mu_s_mas + mu_s_men)
138	c
139	      g_s = ga_create_atom_blocked(geom, AO_bas_han, 'AO ovl')
140	      call ga_zero(g_s)
141	      call int_1e_ga(ao_bas_han,ao_bas_han,g_s,'overlap',.false.)
142	c
143	      call ga_zero(g_dens_ss)
144	      call ga_add(0.5d00, g_dens_LUMO(2), 0.5d00,
145	     &            g_dens_LUMO(1), g_dens_ss)
146	      if (me.eq.0.and.oprint_fukui)
147	     &   call dft_header('  Condensed Fukui function [fnn(+)]')
148	      call mull_pop_fuk(geom, AO_bas_han, g_dens_ss, g_s)
149	c
150	      call ga_zero(g_dens_ss)
151	      call ga_add(0.5d00, g_dens_HOMO(2), 0.5d00,
152	     &             g_dens_HOMO(1), g_dens_ss)
153	      if (me.eq.0.and.oprint_fukui)
154	     &   call dft_header(' Condensed Fukui function [fnn(-)]')
155	      call mull_pop_fuk(geom, AO_bas_han, g_dens_ss, g_s)
156	c
157	      call ga_zero(g_dens_ss)
158	      call ga_add(-0.5d00, g_dens_LUMO(2), 0.5d00,
159	     &             g_dens_LUMO(1), g_dens_ss)
160	      if (me.eq.0.and.oprint_fukui)
161	     &   call dft_header(' Condensed Fukui function [fsn(+)]')
162	      call mull_pop_fuk(geom, AO_bas_han, g_dens_ss, g_s)
163	c
164	      call ga_zero(g_dens_ss)
165	      call ga_add(0.5d00, g_dens_HOMO(2), 0.5d00,
166	     &             g_dens_LUMO(1), g_dens_ss)
167	      if (me.eq.0.and.oprint_fukui)
168	     &   call dft_header(' Condensed Fukui function [fss(+)]')
169	      call mull_pop_fuk(geom, AO_bas_han, g_dens_ss, g_s)
170	c
171	      call ga_zero(g_dens_ss)
172	      call ga_add(-0.5d00, g_dens_HOMO(2), 0.5d00,
173	     &             g_dens_LUMO(1), g_dens_ss)
174	      if (me.eq.0.and.oprint_fukui)
175	     &   call dft_header(' Condensed Fukui function [fns(+)]')
176	      call mull_pop_fuk(geom, AO_bas_han, g_dens_ss, g_s)
177	c
178	      call ga_zero(g_dens_ss)
179	      call ga_add(0.5d00, g_dens_HOMO(1), 0.5d00,
180	     &             g_dens_LUMO(2), g_dens_ss)
181	      if (me.eq.0.and.oprint_fukui)
182	     &   call dft_header(' Condensed Fukui function [fss(-)]')
183	      call mull_pop_fuk(geom, AO_bas_han, g_dens_ss, g_s)
184	c
185	      call ga_zero(g_dens_ss)
186	      call ga_add(0.5d00, g_dens_HOMO(1), -0.5d00,
187	     &             g_dens_LUMO(2), g_dens_ss)
188	      if (me.eq.0.and.oprint_fukui)
189	     &   call dft_header(' Condensed Fukui function [fns(-)]')
190	      call mull_pop_fuk(geom, AO_bas_han, g_dens_ss, g_s)
191	c
192	      mu_n_men = 0.5d00*(eig_homo(1) + eig_homo(2))
193	      mu_n_cer = 0.5*(mu_n_mas + mu_n_men)
194	      mu_s_mas = 0.5d00*(eig_lumo(1) - eig_homo(2))
195	      mu_s_men = 0.5d00*(eig_homo(1) - eig_lumo(2))
196	      mu_s_cer = 0.5*(mu_s_mas + mu_s_men)
197	      if (me.eq.0.and.oprint_fukui)then
198	         write(LuOut,*) ' ------------------------------------'
199	         write(LuOut,*) '    mu_n(+)    mu_n(-)    mu_n(0)'
200	         write(LuOut,'(3f11.4)')  mu_n_mas, mu_n_men, mu_n_cer
201	         write(LuOut,*) ' ------------------------------------'
202	         write(LuOut,*) '    mu_s(+)    mu_s(-)    mu_s(0)'
203	         write(LuOut,'(3f11.4)')  mu_s_mas, mu_s_men,mu_s_cer
204	         write(LuOut,*) ' ------------------------------------'
205	      endif
206	c
207	cc    Evaluating Coulomb integrals for HOMO, LUMO and differences
208	c
209	      kfac(1) = 0.d00
210	      jfac(1) = 1.0d0
211	      jfac(2) = 1.0d0
212	      kfac(2) = 0.0d0
213	      call ga_zero(g_orb)
214	      call fock_2e(geom, AO_bas_han, 1, jfac, kfac,
215	     &             tol2e, oskel, g_dens_HOMO(1), g_orb, .false.)
216	      int_HaHa = ga_ddot(g_dens_HOMO(1), g_orb)
217	c
218	      int_HaLb = ga_ddot(g_dens_LUMO(2), g_orb)
219	c
220	      call ga_zero(g_orb)
221	      call fock_2e(geom, AO_bas_han, 1, jfac, kfac,
222	     &             tol2e, oskel, g_dens_HOMO(2), g_orb, .false.)
223	      int_HbHb = ga_ddot(g_dens_HOMO(2), g_orb)
224	c
225	      int_LaHb = ga_ddot(g_dens_LUMO(1), g_orb)
226	c
227	      call ga_zero(g_orb)
228	      call fock_2e(geom, AO_bas_han, 1, jfac, kfac,
229	     &             tol2e, oskel, g_dens_LUMO(1), g_orb, .false.)
230	      int_LaLa = ga_ddot(g_dens_LUMO(1), g_orb)
231	c
232	      call ga_zero(g_orb)
233	      call fock_2e(geom, AO_bas_han, 1, jfac, kfac,
234	     &             tol2e, oskel, g_dens_LUMO(2), g_orb, .false.)
235	      int_LbLb = ga_ddot(g_dens_LUMO(2), g_orb)
236	c
237	c
238	cc     Evaluating exchange-correlation integrals
239	c
240	      g_dens(1) = ga_create_atom_blocked(geom, AO_bas_han,
241	     &                                       'ga_dens(1)')
242	      g_vxc(1) = ga_create_atom_blocked(geom, AO_bas_han,
243	     &                                       'g_vxc(1)')
244	      call ga_zero(g_dens(1))
245	      call ga_zero(g_vxc(1))
246	      if (ipol.eq.2) then
247	        g_dens(2) = ga_create_atom_blocked(geom, AO_bas_han,
248	     &                                       'ga_dens(2)')
249	        g_vxc(2) = ga_create_atom_blocked(geom, AO_bas_han,
250	     &                                       'g_vxc(2)')
251	        call ga_zero(g_dens(2))
252	        call ga_zero(g_vxc(2))
253	      endif
254	      do isp=1,ipol
255	        call ga_dgemm('N', 'T', nbf_ao, nbf_ao, 
256	     &                noc(isp), 2d0/dble(ipol), g_movecs(isp),
257	     &                g_movecs(isp), 0.0d00, g_dens(isp))
258	      enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(258,7)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
259	      Exc(1) = 0.0d00
260	      Exc(2) = 0.0d00
261	      Ecoul = 0.0d00
262	      call xc_pot(rtdb, Exc, Ecoul,nExc, iVxc_opt, g_xcinv, g_dens,
263	     &             g_vxc, IOLGC, g_wght, g_xyz, g_nq,wght_GA, rho_n,
264	     &             dbl_mb(irdens_atom), 
265	     &             int_mb(icetobfr), natoms)
266	      Exc_zero = Exc(1)
267	      call ga_zero(g_orb)
268	      call fock_2e(geom, AO_bas_han, 1, jfac, kfac,
269	     &             tol2e, oskel, g_dens_HOMO(1), g_orb, .false.)
270	      do isp = 1, ipol
271	        int_vxc_H(isp) = ga_ddot(g_dens_HOMO(isp), g_vxc(isp))
272	        int_vxc_L(isp) = ga_ddot(g_dens_LUMO(isp), g_vxc(isp))
273	      end do
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(273,7)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
274	      if(ipol .eq.1) then
275	        int_vxc_H(2) = int_vxc_H(1)
276	        int_vxc_L(2) = int_vxc_L(1)
277	      endif
278	c
279	cc    Approximating the ionization potential
280	c
281	      noc_aux_1 = noc(1)
282	      noc_aux_2 = noc(2)
283	C    Think about it.  How can you excite only one electron and still be RKS?
284	C    Code produces rubbish with RKS - compare to UKS/ROKS and see
285	C    This code assumes once closed shell, then always closed shell
286	      if(ipol .eq.1) then
287	        noc_aux_2 = noc_aux_1
288	        call errquit('fukui: UKS or ROKS required. No RKS', 0, 0)
289	      end if
290	
291	      noc_test = noc_aux_1 - noc_aux_2
292	      
293	      if (noc_test.eq.0) then
294	        noc(2) = noc_aux_2 - 1
295	        e_orbital = -eig_homo(2)
296	        e_coul = 0.5d00*int_HbHb
297	        e_xc = int_vxc_H(2)
298	      else
299	        noc(1) = noc_aux_1 - 1
300	        e_orbital = -eig_homo(1)
301	        e_coul = 0.5d00*int_HaHa
302	        e_xc = int_vxc_H(1)
303	      end if
304	      ion_pot = e_orbital + e_coul + e_xc
305	      if (.not.rtdb_put(rtdb, 'dft:noc', mt_int, 2, noc)) 
306	     &   call errquit('fukui: rtdb_put of noc failed', 0, RTDB_ERR)
307	      do isp=1,ipol
308	        call ga_zero(g_dens(isp))
309	        call ga_dgemm('N', 'T', nbf_ao, nbf_ao,
310	     &                noc(isp), 2d0/dble(ipol), g_movecs(isp),
311	     &                g_movecs(isp), 0.0d00, g_dens(isp))
312	      enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(312,7)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
313	     
314	      Exc(1) = 0.0d00
315	      Exc(2) = 0.0d00
316	      Ecoul = 0.0d00
317	      do isp = 1, ipol
318	        call ga_zero(g_vxc(isp))
319	      end do
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(319,7)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
320	      call xc_pot(rtdb, Exc, Ecoul,nExc, iVxc_opt, g_xcinv, g_dens,
321	     &             g_vxc, IOLGC, g_wght, g_xyz, g_nq,wght_GA, rho_n,
322	     &             dbl_mb(irdens_atom),
323	     &             int_mb(icetobfr), natoms)
324	      Exc_pert = Exc(1)
325	      diff_Exc = Exc_pert - Exc_zero
326	      ion_pot = ion_pot + diff_Exc
327	      if (me.eq.0.and.oprint_fukui)then
328	         write(LuOut,'("  Alpha = ",i3," ; Beta = ",i3)')
329	     &                   noc(1), noc(2)
330	         write(LuOut,*) ' Contributions in atomic units:'
331	         write(LuOut,'("      Orbital Energy = ",f10.4)') e_orbital
332	         write(LuOut,'("      Coulomb Integral = ",f10.4)') e_coul
333	         write(LuOut,'("      XC Integral = ",f10.4)') e_xc
334	         write(LuOut,'("      XC Diff. Energy = ",f10.4)') diff_Exc
335	         write(LuOut,'("      Ionization potential = ",f7.4," a.u.")') 
336	     &                                           ion_pot
337	         write(LuOut,'("                           = ",f7.2," eV")') 
338	     &                                           ion_pot*27.211
339	      end if
340	c
341	cc    Approximating the electron affinity
342	c
343	      if (noc_test.eq.0) then
344	        noc(1) = noc_aux_1 + 1
345	        noc(2) = noc_aux_2
346	        e_orbital = -eig_lumo(1)
347	        e_coul = - 0.5d00*int_LaLa
348	        e_xc = int_vxc_L(1)
349	      else
350	        noc(1) = noc_aux_1
351	        noc(2) = noc_aux_2 + 1
352	        e_orbital = -eig_lumo(2)
353	        e_coul = - 0.5d00*int_LbLb
354	        e_xc = int_vxc_L(2)
355	      end if
356	      ele_afi = e_orbital + e_coul + e_xc
357	      if (.not.rtdb_put(rtdb, 'dft:noc', mt_int, 2, noc))
358	     &   call errquit('fukui: rtdb_put of noc failed', 0, RTDB_ERR)
359	      do isp=1,ipol
360	        call ga_zero(g_dens(isp))
361	        call ga_dgemm('N', 'T', nbf_ao, nbf_ao,
362	     &                noc(isp), 2d0/dble(ipol), g_movecs(isp),
363	     &                g_movecs(isp), 0.0d00, g_dens(isp))
364	      enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(364,7)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
365	
366	      Exc(1) = 0.0d00
367	      Exc(2) = 0.0d00
368	      Ecoul = 0.0d00
369	      do isp = 1, ipol
370	        call ga_zero(g_vxc(isp))
371	      end do
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(371,7)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
372	      call xc_pot(rtdb, Exc, Ecoul,nExc, iVxc_opt, g_xcinv, g_dens,
373	     &             g_vxc, IOLGC, g_wght, g_xyz, g_nq,wght_GA, rho_n,
374	     &             dbl_mb(irdens_atom),
375	     &             int_mb(icetobfr), natoms)
376	      Exc_pert = Exc(1)
377	      diff_Exc = Exc_pert - Exc_zero
378	      ele_afi = ele_afi - diff_Exc
379	      if (me.eq.0.and.oprint_fukui)then
380	         write(LuOut,*) ' ------------------------------------'
381	         write(LuOut,'("  Alpha = ",i3," ; Beta = ",i3)')
382	     &                   noc(1), noc(2)
383	         write(LuOut,*) ' Contributions in atomic units:'
384	         write(LuOut,'("      Orbital Energy = ",f10.4)') e_orbital
385	         write(LuOut,'("      Coulomb Integral = ",f10.4)') e_coul
386	         write(LuOut,'("      XC Integral = ",f10.4)') e_xc
387	         write(LuOut,'("      XC Diff. Energy = ",f10.4)') diff_Exc
388	         write(LuOut,'("      Electron Affinity = ",f7.4," a.u.")')
389	     &                                        ele_afi
390	         write(LuOut,'("                        = ",f7.2," eV")')
391	     &                                        ele_afi*27.211
392	      end if
393	      if (me.eq.0.and.oprint_fukui)then
394	         write(LuOut,*) ' ------------------------------------'
395	         write(LuOut,'("  Electronegativity (I+A)/2 = ",f7.2," eV")') 
396	     &                        0.5d00*(ion_pot + ele_afi)*27.211
397	         write(LuOut,'("  Hardness (I-A) = ",f7.2," eV")') 
398	     &                        (ion_pot - ele_afi)*27.211
399	      end if
400	c
401	cc    Energy difference for high multiplicity
402	c
403	      if (noc_aux_2.gt.0) then
404	        noc(1) = noc_aux_1 + 1
405	        noc(2) = noc_aux_2 - 1
406	        e_orbital = eig_lumo(1) - eig_homo(2)
407	        e_coul = 0.5d00*(int_LaLa + int_HbHb) - int_LaHb
408	        e_xc = int_vxc_H(2) - int_vxc_L(1)
409	        high_mult = e_orbital + e_coul + e_xc
410	        if (.not.rtdb_put(rtdb, 'dft:noc', mt_int, 2, noc))
411	     &     call errquit('fukui: rtdb_put of noc failed', 0, RTDB_ERR)
412	        do isp=1,ipol
413	          call ga_zero(g_dens(isp))
414	          call ga_dgemm('N', 'T', nbf_ao, nbf_ao,
415	     &                  noc(isp), 2d0/dble(ipol), g_movecs(isp),
416	     &                  g_movecs(isp), 0.0d00, g_dens(isp))
417	        enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(417,9)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
418	        Exc(1) = 0.0d00
419	        Exc(2) = 0.0d00
420	        Ecoul = 0.0d00
421	        do isp = 1, ipol
422	          call ga_zero(g_vxc(isp))
423	        end do
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(423,9)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
424	        call xc_pot(rtdb, Exc, Ecoul,nExc, iVxc_opt, g_xcinv, g_dens,
425	     &               g_vxc, IOLGC, g_wght, g_xyz, g_nq,wght_GA, rho_n,
426	     &               dbl_mb(irdens_atom), 
427	     &               int_mb(icetobfr), natoms)
428	        Exc_pert = Exc(1)
429	        diff_Exc = Exc_pert - Exc_zero
430	        high_mult = high_mult + diff_Exc
431	        if (me.eq.0.and.oprint_fukui)then
432	           write(LuOut,*) ' ------------------------------------'
433	           write(LuOut,'("  Alpha = ",i3," ; Beta = ",i3)')
434	     &                     noc(1), noc(2)
435	           write(LuOut,*) ' Contributions in atomic units:'
436	           write(LuOut,'("      Orbital Energy = ",f10.4)') e_orbital
437	           write(LuOut,'("      Coulomb Integrals = ",f10.4)') e_coul
438	           write(LuOut,'("      XC Integrals = ",f10.4)') e_xc
439	           write(LuOut,'("      XC Diff. Energy = ",f10.4)') diff_Exc
440	           write(LuOut,'("      High Multiplicity = ",f7.4," a.u.")')
441	     &                                          high_mult
442	           write(LuOut,'("                        = ",f7.2," eV")')
443	     &                                          high_mult*27.211
444	        end if
445	      end if
446	c
447	cc    Energy difference for low multiplicity
448	c
449	      if (noc_test.ge.2) then
450	        noc(1) = noc_aux_1 - 1
451	        noc(2) = noc_aux_2 + 1
452	        low_mult = eig_lumo(2) - eig_homo(1) +
453	     &              0.5d00*(int_LbLb + int_HaHa) - int_HaLb +
454	     &              int_vxc_H(1) - int_vxc_L(2)
455	        e_orbital = eig_lumo(2) - eig_homo(1)
456	        e_coul = 0.5d00*(int_LbLb + int_HaHa) - int_HaLb
457	        e_xc = int_vxc_H(1) - int_vxc_L(2)
458	        low_mult = e_orbital + e_coul + e_xc
459	        if (.not.rtdb_put(rtdb, 'dft:noc', mt_int, 2, noc))
460	     &     call errquit('fukui: rtdb_put of noc failed', 0, RTDB_ERR)
461	        do isp=1,ipol
462	          call ga_zero(g_dens(isp))
463	          call ga_dgemm('N', 'T', nbf_ao, nbf_ao,
464	     &                  noc(isp), 2d0/dble(ipol), g_movecs(isp),
465	     &                  g_movecs(isp), 0.0d00, g_dens(isp))
466	        enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(466,9)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
467	
468	        Exc(1) = 0.0d00
469	        Exc(2) = 0.0d00
470	        Ecoul = 0.0d00
471	        do isp = 1, ipol
472	          call ga_zero(g_vxc(isp))
473	        end do
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(473,9)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
474	        call xc_pot(rtdb, Exc, Ecoul,nExc, iVxc_opt, g_xcinv, g_dens,
475	     &               g_vxc, IOLGC, g_wght, g_xyz, g_nq,wght_GA, rho_n,
476	     &               dbl_mb(irdens_atom), 
477	     &               int_mb(icetobfr), natoms)
478	        Exc_pert = Exc(1)
479	        diff_Exc = Exc_pert - Exc_zero
480	        low_mult = low_mult + diff_Exc
481	        if (me.eq.0.and.oprint_fukui)then
482	           write(LuOut,*) ' ------------------------------------'
483	           write(LuOut,'("  Alpha = ",i3," ; Beta = ",i3)')
484	     &                     noc(1), noc(2)
485	           write(LuOut,*) ' Contributions:'
486	           write(LuOut,'("      Orbital Energy = ",f10.4)') e_orbital
487	           write(LuOut,'("      Coulomb Integrals = ",f10.4)') e_coul
488	           write(LuOut,'("      XC Integrals = ",f10.4)') e_xc
489	           write(LuOut,'("      XC Diff. Energy = ",f10.4)') diff_Exc
490	           write(LuOut,'("      Low Multiplicity = ",f7.4," a.u.")')
491	     &                                         low_mult
492	           write(LuOut,'("                       = ",f7.2," eV")')
493	     &                                         low_mult*27.211
494	           write(LuOut,*) ' ------------------------------------'
495	        end if
496	      end if
497	cc
498	c
499	      noc(1) = noc_aux_1
500	      noc(2) = noc_aux_2
501	      if (.not.rtdb_put(rtdb, 'dft:noc', mt_int, 2, noc))
502	     &   call errquit('fukui: rtdb_put of noc failed', 0, RTDB_ERR)
503	      if (.not. ga_destroy(g_dens(1))) call errquit
504	     &    ('fukui: could not destroy g_dens(1)',0, GA_ERR)
505	      if (.not. ga_destroy(g_vxc(1))) call errquit
506	     &    ('fukui: could not destroy g_vxc(1)',0, GA_ERR)
507	      if (ipol.eq.2) then
508	        if (.not. ga_destroy(g_dens(2))) call errquit
509	     &    ('fukui: could not destroy g_dens(2)',0, GA_ERR)
510	        if (.not. ga_destroy(g_vxc(2))) call errquit
511	     &    ('fukui: could not destroy g_vxc(2)',0, GA_ERR)
512	      end if
513	c
514	      if (.not. ga_destroy(g_orb)) call errquit
515	     &   ('fukui: could not destroy g_orb', 0, GA_ERR)
516	      if (.not. ga_destroy(g_dens_HOMO(1))) call errquit
517	     &   ('fukui: could not destroy g_dens_HOMO', 0, GA_ERR)
518	      if (.not. ga_destroy(g_dens_LUMO(1))) call errquit
519	     &   ('fukui: could not destroy g_dens_LUMO', 0, GA_ERR)
520	      if (.not. ga_destroy(g_dens_HOMO(2))) call errquit
521	     &   ('fukui: could not destroy g_dens_HOMO_bet', 0, GA_ERR)
522	      if (.not. ga_destroy(g_dens_LUMO(2))) call errquit
523	     &   ('fukui: could not destroy g_dens_LUMO_bet', 0, GA_ERR)
524	      if (.not. ga_destroy(g_dens_ss)) call errquit
525	     &   ('fukui: could not destroy g_dens_ss', 0, GA_ERR)
526	      if (.not. ga_destroy(g_s)) call errquit
527	     &   ('fukui: could not destroy g_s', 0, GA_ERR)
528	      return
529	      end
530	
531	      Subroutine mull_pop_fuk( geom, basis, iga_dens,iga_s)
!INLINE REPORT: (MULL_POP_FUK) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(531,18)
!  -> EXTERN: (555,19) pstat_on_
!  -> EXTERN: (561,15) geom_ncent_
!  -> EXTERN: (562,12) errquit_
!  -> EXTERN: (563,17) bas_numcont_
!  -> EXTERN: (564,12) errquit_
!  -> EXTERN: (565,18) bas_numbf_
!  -> EXTERN: (566,12) errquit_
!  -> EXTERN: (569,19) bas_ce2bfr_
!  -> EXTERN: (570,14) errquit_
!  -> EXTERN: (576,15) ma_push_get_
!  -> EXTERN: (577,12) errquit_
!  -> EXTERN: (578,15) ma_push_get_
!  -> EXTERN: (579,12) errquit_
!  -> EXTERN: (580,15) ma_push_get_
!  -> EXTERN: (581,12) errquit_
!  -> EXTERN: (583,14) ga_create_atom_blocked_
!  -> EXTERN: (585,12) ga_dgemm_
!  -> (587,12) MULL_CALC_FUK
!  -> EXTERN: (590,12) ga_sync_
!  -> EXTERN: (592,15) ma_pop_stack_
!  -> EXTERN: (593,12) errquit_
!  -> EXTERN: (594,15) ma_pop_stack_
!  -> EXTERN: (595,12) errquit_
!  -> EXTERN: (596,15) ma_pop_stack_
!  -> EXTERN: (597,12) errquit_
!  -> EXTERN: (598,15) ga_destroy_
!  -> EXTERN: (600,19) pstat_off_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(531,18):remark #34051: REGISTER ALLOCATION : [mull_pop_fuk_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F:531
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r11 r13-r15]
!        
!    Routine temporaries
!        Total         :     221
!            Global    :      46
!            Local     :     175
!        Regenerable   :     162
!        Spilled       :       5
!        
!    Routine stack
!        Variables     :     112 bytes*
!            Reads     :       9 [1.16e+01 ~ 11.6%]
!            Writes    :       6 [5.15e+00 ~ 5.2%]
!        Spills        :       8 bytes*
!            Reads     :       1 [3.63e-01 ~ 0.4%]
!            Writes    :       1 [3.63e-01 ~ 0.4%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
532	
533	C$Id$
534	      Implicit none
535	#include "errquit.fh"
536	      integer geom,basis
537	      integer iga_s              ! overlap   GA handle
538	      integer iga_dens           ! dens. mat GA handle
539	      integer iga_ps             ! product   GA handle
540	
541	      integer natoms,nshells
542	      integer lPSmat,iPSmat,lqatom,iqatom,lqshell,iqshell
543	      integer iatom,ilo,ihi,nbf,max_at_bf2
544	c     
545	      integer  ga_create_atom_blocked
546	      external ga_create_atom_blocked
547	      logical status
548	
549	#include "bas.fh"
550	#include "geom.fh"
551	#include "global.fh"
552	#include "cscfps.fh"
553	#include "mafdecls.fh"
554	
555	      if (oscfps) call pstat_on(ps_mull)
556	      
557	
558	c*****************************************************************************
559	
560	c     
561	      if(.not.geom_ncent(geom, natoms))
562	     &     call errquit(' exiting in mull_pop',0, GEOM_ERR)
563	      if( .not. bas_numcont(basis,nshells) )
564	     &     call errquit(' exiting in mull_pop',1, BASIS_ERR)
565	      if ( .not. bas_numbf(basis,nbf) ) 
566	     &     call errquit(' exiting in mull_op',1, BASIS_ERR)
567	      max_at_bf2 = 0
568	      do iatom = 1, natoms
569	        if (.not. bas_ce2bfr(basis, iatom, ilo, ihi))
570	     $       call errquit('mul_pop: bas_ce2bfr failed', iatom,
571	     &       BASIS_ERR)
572	        max_at_bf2 = max(max_at_bf2, ihi-ilo+1)
573	      enddo
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(573,7)
!   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!LOOP END
574	      max_at_bf2 = max_at_bf2*max_at_bf2
575	
576	      if(.not.MA_Push_Get(mt_dbl,max_at_bf2,'PS',lPSmat,iPSmat))
577	     &     call errquit(' exiting in mull_pop: insuff stack',21, MA_ERR)
578	      if(.not.MA_Push_Get(mt_dbl,natoms,'q atom',lqatom,iqatom))
579	     &     call errquit(' exiting in mull_pop: insuff stack',22, MA_ERR)
580	      if(.not.MA_Push_Get(mt_dbl,nshells,'q shell',lqshell,iqshell))
581	     &     call errquit(' exiting in mull_pop: insuff stack',3, MA_ERR)
582	
583	      iga_PS=ga_create_atom_blocked(geom, basis, 'PS product')
584	
585	      call ga_dgemm('N','N',nbf,nbf,nbf,1.d0,
586	     &     iga_dens,iga_s,0.d0,iga_PS)
587	      call mull_calc_fuk(basis,natoms, nshells,max_at_bf2,iga_PS,
588	     &     dbl_mb(iqatom),dbl_mb(iqshell),dbl_mb(iPSmat))
589	      
590	      call ga_sync
591	
592	      if(.not.MA_Pop_Stack(lqshell))
593	     &     call errquit(' exiting in mull_pop',33, MA_ERR)
594	      if(.not.MA_Pop_Stack(lqatom))
595	     &     call errquit(' exiting in mull_pop',34, MA_ERR)
596	      if(.not.MA_Pop_Stack(lPSmat))
597	     &     call errquit(' exiting in mull_pop',35, MA_ERR)
598	      status= ga_destroy(iga_PS)
599	c
600	      if (oscfps) call pstat_off(ps_mull)
601	c
602	      return
603	      end
604	c
605	c
606	c
607	      Subroutine mull_calc_fuk(basis, natoms, nshells,max_at_bf2,iga_PS,
!INLINE REPORT: (MULL_CALC_FUK) [4] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(607,18)
!  -> EXTERN: (633,10) ga_nodeid_
!  -> EXTERN: (634,13) ga_nnodes_
!  -> EXTERN: (636,12) dfill_
!  -> EXTERN: (637,12) dfill_
!  -> EXTERN: (639,17) bas_geom_
!  -> EXTERN: (639,40) errquit_
!  -> EXTERN: (643,18) bas_ce2cnr_
!  -> EXTERN: (644,14) errquit_
!  -> EXTERN: (645,14) get_atom_block_
!  -> EXTERN: (649,21) bas_cn2bfr_
!  -> EXTERN: (650,16) errquit_
!  -> EXTERN: (659,12) ga_sync_
!  -> EXTERN: (660,12) ga_dgop_
!  -> EXTERN: (661,12) ga_dgop_
!  -> EXTERN: (663,9) for_write_seq_fmt
!  -> EXTERN: (665,9) for_write_seq_fmt
!  -> EXTERN: (668,20) bas_ce2cnr_
!  -> EXTERN: (669,16) errquit_
!  -> EXTERN: (671,21) geom_cent_get_
!  -> EXTERN: (672,16) errquit_
!  -> EXTERN: (675,21) geom_tag_to_element_
!  -> EXTERN: (678,14) for_write_seq_fmt_xmit
!  -> EXTERN: (678,14) for_write_seq_fmt_xmit
!  -> EXTERN: (678,14) for_write_seq_fmt_xmit
!  -> EXTERN: (678,14) for_write_seq_fmt
!  -> EXTERN: (678,40) f_ldnint_val
!  -> EXTERN: (684,12) ga_sync_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(607,18):remark #34051: REGISTER ALLOCATION : [mull_calc_fuk_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F:607
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
!        
!    Routine temporaries
!        Total         :     242
!            Global    :      64
!            Local     :     178
!        Regenerable   :     162
!        Spilled       :      13
!        
!    Routine stack
!        Variables     :     184 bytes*
!            Reads     :      13 [5.99e+00 ~ 6.0%]
!            Writes    :      14 [2.06e+00 ~ 2.1%]
!        Spills        :      56 bytes*
!            Reads     :      10 [9.77e-01 ~ 1.0%]
!            Writes    :       7 [7.22e-01 ~ 0.7%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
608	     &     qatom,qshell,PSmat)
609	
610	      Implicit none
611	#include "errquit.fh"
612	#include "geom.fh"
613	#include "bas.fh"
614	#include "global.fh"
615	#include "tcgmsg.fh"
616	#include "stdio.fh"
617	#include "msgids.fh"
618	#include "mafdecls.fh"
619	#include "inp.fh"
620	      integer basis
621	      integer natoms,nshells
622	      integer iga_PS             ! product   GA handle
623	      integer ifirst,ilast,nbf_at,max_at_bf2
624	      integer ish1,ish2,ish,nn,iat,mu
625	      integer me,nproc, geom
626	      double precision psmu, coord(3), qnuc
627	      double precision qatom(natoms),qshell(nshells),PSmat(max_at_bf2)
628	      character*2 symbol
629	      character*16 tag
630	      character*32 element
631	      integer atn
632	c     
633	      me=ga_nodeid()
634	      nproc=ga_nnodes()
635	      
636	      call dfill(natoms,0.D0,qatom,1)
637	      call dfill(nshells,0.D0,qshell,1)
638	
639	      if (.not. bas_geom(basis, geom)) call errquit
640	     $     ('mull_pop: bas_geom failed',basis, BASIS_ERR)
641	
642	      do iat=me+1,natoms,nproc
643	        if (.not.bas_ce2cnr(basis,iat,ish1,ish2))
644	     &       call errquit(' exiting in mull_pop',4, BASIS_ERR)
645	        call get_atom_block(iga_PS, basis,
646	     $       iat, iat, PSmat, nbf_at, nbf_at)
647	        mu=0
648	        do ish=ish1,ish2
649	          if (.not. bas_cn2bfr(basis,ish,ifirst,ilast))
650	     &         call errquit(' exiting in mull_pop.',5, BASIS_ERR)
651	          do nn=ifirst,ilast
652	            mu=mu+1
653	            psmu=PSmat((mu-1)*nbf_at+mu)
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(653,13)
!   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(654,13) ]
!   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
!LOOP END
654	            qshell(ish)=qshell(ish)+psmu
655	          enddo
656	          qatom(iat)=qatom(iat)+qshell(ish)
657	        enddo
658	      enddo
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(658,7)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(657,9)
!      remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!   LOOP END
!LOOP END
659	      call ga_sync
660	      call ga_dgop(Msg_Mull1,qatom,natoms,'+')
661	      call ga_dgop(Msg_Mull2,qshell,nshells,'+')
662	      if(me.eq.0) then
663	        write(LuOut,1)
664	    1   format(/'    Atom       Condensed Fukui ')
665	        write(luout,11)
666	 11     format( ' -----------   ----------------')
667	        do iat=1,natoms
668	          if (.not.bas_ce2cnr(basis,iat,ish1,ish2))
669	     &         call errquit(' exiting in mull_pop',4, BASIS_ERR)
670	c
671	          if (.not. geom_cent_get(geom, iat, tag, coord, qnuc)) 
672	     $         call errquit('mull_pop: geom_cent_tag failed',0,
673	     &       GEOM_ERR)
674	c
675	          if (.not. geom_tag_to_element(tag, symbol, element, atn))
676	     $         symbol = 'X'
677	          if (ish2.ge.ish1) then
678	             write(LuOut,2) iat,symbol,nint(qnuc),qatom(iat) 
679	 2           format(1x,i4,1x,a2,i4,1x,f10.4)
680	          endif
681	        enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(681,9)
!   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!LOOP END
682	      endif
683	c
684	      call ga_sync
685	
686	      return
687	      end
688	
689	      Subroutine xc_pot(rtdb, Exc, ecoul,nExc, iVxc_opt, g_xcinv,
!INLINE REPORT: (XC_POT) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(689,18)
!  -> EXTERN: (759,32) util_print_
!  -> EXTERN: (761,21) util_print_
!  -> EXTERN: (764,10) ga_nodeid_
!  -> EXTERN: (765,13) ga_nnodes_
!  -> EXTERN: (768,10) for_write_seq_lis
!  -> EXTERN: (768,10) for_write_seq_lis_xmit
!  -> EXTERN: (768,10) for_write_seq_lis_xmit
!  -> EXTERN: (768,10) for_write_seq_lis_xmit
!  -> EXTERN: (768,10) for_write_seq_lis_xmit
!  -> EXTERN: (768,10) for_write_seq_lis_xmit
!  -> EXTERN: (770,10) for_write_seq_lis
!  -> EXTERN: (770,10) for_write_seq_lis_xmit
!  -> EXTERN: (770,10) for_write_seq_lis_xmit
!  -> EXTERN: (770,10) for_write_seq_lis_xmit
!  -> EXTERN: (770,10) for_write_seq_lis_xmit
!  -> EXTERN: (770,10) for_write_seq_lis_xmit
!  -> EXTERN: (770,10) for_write_seq_lis_xmit
!  -> EXTERN: (772,10) for_write_seq_lis
!  -> EXTERN: (773,15) ga_print_
!  -> EXTERN: (774,23) ga_print_
!  -> EXTERN: (781,21) __powr8i8
!  -> EXTERN: (782,15) ga_sync_
!  -> EXTERN: (783,26) dft_tstamp_
!  -> EXTERN: (790,26) ga_create_atom_blocked_
!  -> EXTERN: (792,20) fock_2e_
!  -> EXTERN: (794,37) ga_ddot_
!  -> EXTERN: (795,20) ga_zero_
!  -> EXTERN: (796,29) ga_ddot_
!  -> EXTERN: (797,20) ga_dadd_
!  -> EXTERN: (798,25) ga_destroy_
!  -> EXTERN: (798,47) errquit_
!  -> EXTERN: (801,20) fock_2e_
!  -> EXTERN: (803,35) ga_ddot_
!  -> EXTERN: (811,21) fock_2e_
!  -> EXTERN: (813,39) ga_ddot_
!  -> EXTERN: (814,21) ga_ddot_
!  -> EXTERN: (826,26) ga_create_atom_blocked_
!  -> EXTERN: (827,26) ga_create_atom_blocked_
!  -> EXTERN: (828,21) ga_zero_
!  -> EXTERN: (829,21) ga_zero_
!  -> EXTERN: (834,21) fock_2e_
!  -> EXTERN: (836,21) ga_zero_
!  -> EXTERN: (837,21) ga_zero_
!  -> EXTERN: (839,21) ga_ddot_
!  -> EXTERN: (840,21) ga_ddot_
!  -> EXTERN: (842,21) ga_ddot_
!  -> EXTERN: (843,21) ga_ddot_
!  -> EXTERN: (845,21) ga_ddot_
!  -> EXTERN: (846,21) ga_ddot_
!  -> EXTERN: (847,21) ga_dadd_
!  -> EXTERN: (848,21) ga_copy_
!  -> EXTERN: (849,21) ga_dadd_
!  -> EXTERN: (851,21) ga_dadd_
!  -> EXTERN: (853,26) ga_destroy_
!  -> EXTERN: (853,47) errquit_
!  -> EXTERN: (855,26) ga_destroy_
!  -> EXTERN: (855,47) errquit_
!  -> EXTERN: (859,26) dft_tstamp_
!  -> EXTERN: (860,15) ga_sync_
!  -> EXTERN: (881,17) rtdb_get_
!  -> EXTERN: (887,23) bas_numbf_
!  -> EXTERN: (888,21) errquit_
!  -> EXTERN: (895,22) ma_push_get_
!  -> EXTERN: (896,23) errquit_
!  -> EXTERN: (898,18) dfill_
!  -> EXTERN: (900,18) grid_quadv0_
!  -> EXTERN: (907,18) sym_vec_symmetrize_
!  -> EXTERN: (909,21) sym_vec_symmetrize_
!  -> EXTERN: (914,18) xc_fitv_
!  -> EXTERN: (916,29) dft_tstamp_
!  -> EXTERN: (917,22) ma_pop_stack_
!  -> EXTERN: (918,16) errquit_
!  -> EXTERN: (924,10) for_write_seq_lis
!  -> EXTERN: (925,15) ga_print_
!  -> EXTERN: (926,23) ga_print_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(689,18):remark #34051: REGISTER ALLOCATION : [xc_pot_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F:689
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
!        
!    Routine temporaries
!        Total         :     558
!            Global    :      88
!            Local     :     470
!        Regenerable   :     388
!        Spilled       :      17
!        
!    Routine stack
!        Variables     :     312 bytes*
!            Reads     :       7 [2.59e-01 ~ 0.3%]
!            Writes    :      32 [1.76e+00 ~ 1.8%]
!        Spills        :      88 bytes*
!            Reads     :      19 [1.10e+00 ~ 1.1%]
!            Writes    :      11 [9.09e-01 ~ 0.9%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
690	     &                   g_dens, g_vxc, IOLGC, g_wght, g_xyz,g_nq, 
691	     &                   wght_GA, rho_n, rdens_atom, 
692	     &                   cetobfr, natoms)
693	c
694	C$Id$
695	c
696	      implicit none
697	#include "errquit.fh"
698	#include "stdio.fh"
699	c      
700	      integer nExc
701	      integer iVxc_opt
702	      integer g_xcinv, g_dens(2), g_vxc(4), g_wght, g_xyz,g_nq
703	      integer natoms
704	      logical IOLGC, wght_GA
705	      integer rtdb
706	c
707	#include "mafdecls.fh"
708	#include "rtdb.fh"
709	#include "bas.fh"
710	#include "global.fh"
711	#include "tcgmsg.fh"
712	#include "cdft.fh"
713	#include "util.fh"
714	#include "sym.fh"
715	c
716	      integer cetobfr(2,natoms)
717	      double precision rho_n, rdens_atom(ipol*natoms*natoms)
718	      double precision jfac(4),kfac(4)
719	      integer g_jk(4), g_d(4)
720	c     
721	      integer  ga_create_atom_blocked
722	      external ga_create_atom_blocked
723	c
724	c--> XC Energy
725	c
726	      double precision Exc(2)
727	      double precision ecoul ! [output]
728	c
729	c This driver routine solves for the XC energy and potential (Vxc) via 
730	c numerical quadrature methods. The results are obtained either by direct 
731	c numerical integration or by means of a LSQ fit of the Vxc to a set of 
732	c Gaussian functions. This fitted function can be used to evaluate Vxc
733	c via a summation of a series of 3-center overlap integrals (3OIs). The
734	c algorithms are formulated in terms of matrix products. See subsequent
735	c subroutines for further explanation.
736	c 
737	c              XC Energy and Potential Index Key, Vxc(pq,i)
738	c
739	c              Value of     |     Definition of index "i"
740	c            ipol     nExc  |    1        2        3       4
741	c           --------------------------------------------------
742	c              1        1   |   Vxc      
743	c              2        1   |   Vxc^up   Vxc^dw   
744	c              1        2   |   Vxc      
745	c              2        2   |   Vxc^up   Vxc^dw   
746	c
747	c           nTcols = ipol 
748	c
749	      integer me,nproc,i,nTrows,nTcols
750	      integer lTmat,iTmat,g_oep
751	      double precision zero,one,onem
752	      logical oprint_intermediate_xc, oprint_time, grid_on_file
753	      parameter(zero=0.d0,one=1.d0,onem=-1.d0)
754	      double precision tol2e,tot
755	c******************************************************************************
756	c
757	c Compute the matrix elements for the XC potential and energy.
758	c
759	      oprint_intermediate_xc = util_print('intermediate XC matrix',
760	     $     print_debug)
761	      oprint_time = util_print('dft timings', print_high)
762	      Exc(1)=0.d0
763	      Exc(2)=0.d0
764	      me=ga_nodeid()
765	      nproc=ga_nnodes()
766	c
767	      if (oprint_intermediate_xc)then
768	         write(*,*)' rtdb, Exc, nExc, iVxc_opt, g_xcinv: ',
769	     &               rtdb, Exc, nExc, iVxc_opt, g_xcinv
770	         write(*,*)' g_dens(1),g_vxc(1),IOLGC,g_wght,g_xyz,wght_GA: ',
771	     &               g_dens(1),g_vxc(1),IOLGC,g_wght,g_xyz,wght_GA
772	         write(*,*)' Fock XC matrix entering xc_getv: '
773	         call ga_print(g_vxc(1))
774	         if(ipol.eq.2)call ga_print(g_vxc(2))
775	      endif
776	c
777	      if (abs(xfac(1)).gt.1e-8 .or. (.not. CDFIT))then
778	c       
779	c        Compute the exact exchange potential (as in Hartree-Fock calculations).
780	c       
781	         tol2e=10.d0**(-itol2e)
782	         call ga_sync
783	         if (oprint_time)call dft_tstamp(' Before call to fock_2e. ')
784	         if (ipol.eq.1) then
785	            kfac(1) = -0.5d0*xfac(1)
786	            jfac(1)=0.0d0
787	            if (.not. CDFIT) then
788	             jfac(2) = 1.0d0
789	             kfac(2) = 0d0
790	              g_vxc(2) = ga_create_atom_blocked(geom,ao_bas_han,'jk')
791	              g_dens(2)=g_dens(1)
792	              call fock_2e(geom, AO_bas_han, 2, jfac, kfac,
793	     &             tol2e, oskel, g_dens(1), g_vxc(1), .false.)
794	              Exc(1) = Exc(1)+0.5d0*ga_ddot(g_dens(1),g_vxc(1))
795	              call ga_zero(g_vxc(2))
796	              ecoul = 0.5d0*ga_ddot(g_dens(1),g_vxc(2)) 
797	              call ga_dadd(1d0,g_vxc(1),1d0,g_vxc(2),g_vxc(1))
798	              if (.not. ga_destroy(g_vxc(2))) call errquit
799	     $             ('xc_getv: ga corrupt?',0, GA_ERR)
800	            else
801	              call fock_2e(geom, AO_bas_han, 1, jfac, kfac,
802	     &             tol2e, oskel, g_dens(1), g_vxc(1), .false.)
803	            Exc(1) = Exc(1)+0.5d0*ga_ddot(g_dens(1),g_vxc(1))
804	            endif
805	         else
806	            if (CDFIT) then
807	               jfac(1)=0.d0
808	               jfac(2)=0.d0
809	               kfac(1)=-1.0d0*xfac(1)
810	               kfac(2)=-1.0d0*xfac(1)
811	               call fock_2e(geom, AO_bas_han, 2, jfac, kfac,
812	     &              tol2e, oskel, g_dens, g_vxc, .false.)
813	               Exc(1) = Exc(1)+0.5d0*(ga_ddot(g_dens(1),g_vxc(1)) +
814	     &              ga_ddot(g_dens(2),g_vxc(2)))
815	            else
816	               jfac(1) = 1.0d0
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(816,16)
!   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
!   remark #15448: unmasked aligned unit stride loads: 1 
!   remark #15449: unmasked aligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 4 
!   remark #15477: vector cost: 1.500 
!   remark #15478: estimated potential speedup: 2.660 
!   remark #15488: --- end vector cost summary ---
!LOOP END
817	               jfac(2) = 0.0d0
818	               jfac(3) = 1.0d0
819	               jfac(4) = 0.0d0
820	               kfac(1) = 0.0d0
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(820,16)
!   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
!   remark #15448: unmasked aligned unit stride loads: 1 
!   remark #15449: unmasked aligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 4 
!   remark #15477: vector cost: 1.500 
!   remark #15478: estimated potential speedup: 2.660 
!   remark #15488: --- end vector cost summary ---
!LOOP END
821	               kfac(2) = 1.0d0
822	               kfac(3) = 0.0d0
823	               kfac(4) = 1.0d0
824	               g_jk(1) = g_vxc(1) ! This assignment is assumed
825	               g_jk(2) = g_vxc(2)
826	               g_jk(3) = ga_create_atom_blocked(geom, ao_bas_han, 'jk')
827	               g_jk(4) = ga_create_atom_blocked(geom, ao_bas_han, 'jk')
828	               call ga_zero(g_jk(3))
829	               call ga_zero(g_jk(4))
830	               g_d(1)  = g_dens(1)
831	               g_d(2)  = g_dens(1)
832	               g_d(3)  = g_dens(2)
833	               g_d(4)  = g_dens(2)
834	               call fock_2e(geom, AO_bas_han, 4, jfac, kfac,
835	     &              tol2e, oskel, g_d(1), g_jk(1),.false. )
836	               call ga_zero(g_jk(1))
837	               call ga_zero(g_jk(3))
838	               ecoul = 0.5d0*( ! Alpha coulomb energy
839	     $              ga_ddot(g_dens(1),g_jk(1)) + 
840	     $              ga_ddot(g_dens(1),g_jk(3)))
841	               ecoul = ecoul + 0.5d0*( ! Beta coulomb energy
842	     $              ga_ddot(g_dens(2),g_jk(1)) + 
843	     $              ga_ddot(g_dens(2),g_jk(3)))
844	               exc(1) = exc(1) - xfac(1)*0.5d0*( ! All exchange energy
845	     $              ga_ddot(g_dens(1),g_jk(2)) +
846	     $              ga_ddot(g_dens(2),g_jk(4)))
847	               call ga_dadd(1.0d0, g_jk(1), 1.0d0, g_jk(3), g_jk(1))
848	               call ga_copy(g_jk(1), g_jk(3))
849	               call ga_dadd(1.0d0, g_jk(1), -xfac(1), g_jk(2),
850	     $              g_jk(1))
851	               call ga_dadd(1.0d0, g_jk(3), -xfac(1), g_jk(4),
852	     $              g_jk(2))
853	               if (.not. ga_destroy(g_jk(3))) call errquit
854	     $              ('xc_getv: ga corrupt?',0, GA_ERR)
855	               if (.not. ga_destroy(g_jk(4))) call errquit
856	     $              ('xc_getv: ga corrupt?',1, GA_ERR)
857	            endif
858	         endif
859	         if (oprint_time)call dft_tstamp('  After call to fock_2e. ')
860	         call ga_sync
861	c
862	c        Symmetrize Vxc?
863	c
864	c         if (oskel)then
865	c            call sym_symmetrize(geom, AO_bas_han, .false., g_vxc(1))
866	c            if (ipol.gt.1)then
867	c               call sym_symmetrize(geom, AO_bas_han, .false., 
868	c     &              g_vxc(2))
869	c            endif
870	c         endif
871	c       
872	c        Compute the exact exchange energy.
873	c       
874	      endif
875	c
876	      tot=-xfac(1)
877	      do i=1,numfunc
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(877,7)
!   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/fukui.F(878,9) ]
!   remark #25438: unrolled without remainder by 2  
!LOOP END
878	        tot=tot+xfac(i)+cfac(i)
879	      enddo
880	c
881	      if (.not. rtdb_get(rtdb, 'dft:grid_on_file', mt_log, 1,
882	     &     grid_on_file))then
883	         grid_on_file = .false.
884	      endif
885	      if (abs(tot).gt.1e-8) then
886	         if(xcfit) then
887	            if (.not. bas_numbf(XC_bas_han,nbf_xc) )then
888	               call errquit('Exiting in getvxc.',1, BASIS_ERR)
889	            endif
890	            nTrows = nbf_xc
891	            nTcols = ipol
892	c         
893	c           Allocate scratch space for the "T" matrix.
894	c         
895	            if (.not.ma_push_get(MT_Dbl,nTrows*nTcols,'Tmat',lTmat,
896	     &         iTmat))call errquit('xc_getv: cannot allocate Tmat',0,
897	     &       MA_ERR)
898	            call dfill(nTrows*nTcols,0.D0,dbl_mb(iTmat),1)
899	         endif
900	            call grid_quadv0(rtdb, g_dens, g_vxc, nexc,rho_n,  Exc,
901	     .           dbl_mb(itmat))
902	      if(xcfit) then
903	c     
904	c           symmetrize the "T" vector
905	c     
906	         if (oskel)then
907	            call sym_vec_symmetrize(geom, xc_bas_han, Dbl_MB(iTmat))
908	            if (ipol.gt.1)then
909	               call sym_vec_symmetrize(geom, xc_bas_han, 
910	     &              Dbl_MB(iTmat+nbf_xc))
911	            endif
912	         endif
913	c      
914	            call xc_fitv(rtdb,Dbl_MB(iTmat), nTrows, nTcols,
915	     &                   g_vxc, g_xcinv, g_oep, IOLGC)
916	            if (oprint_time)call dft_tstamp(' After call to xc_fitv.  ')
917	            if (.not.ma_pop_stack(lTmat))
918	     &         call errquit('xc_getv: cannot pop stack',0, MA_ERR)
919	c
920	         endif
921	      endif
922	c
923	      if (oprint_intermediate_xc)then
924	         write(*,*)' Fock XC matrix leaving xc_pot: '
925	         call ga_print(g_vxc(1))
926	         if(ipol.eq.2)call ga_print(g_vxc(2))
927	      endif
928	c
929	c
930	      return
931	      end
932	
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_CANORG

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_CANORG) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(1,18)
  -> EXTERN: (26,12) ga_nodeid_
  -> EXTERN: (27,15) ga_nnodes_
  -> EXTERN: (33,12) ga_zero_
  -> EXTERN: (34,12) ga_distribution_
  -> EXTERN: (35,18) ga_nodeid_
  -> EXTERN: (40,23) ma_push_get_
  -> EXTERN: (41,33) errquit_
  -> EXTERN: (43,18) ga_get_
  -> EXTERN: (56,24) dscal_
  -> EXTERN: (61,18) ga_put_
  -> EXTERN: (63,21) ma_pop_stack_
  -> EXTERN: (63,42) errquit_


    Report from: Loop nest & Vector optimizations [loop, vec]



Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(59,13)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_canorg_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     117
            Global    :      33
            Local     :      84
        Regenerable   :      64
        Spilled       :       8
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :      13 [6.31e+00 ~ 6.3%]
            Writes    :      12 [3.70e+00 ~ 3.7%]
        Spills        :      24 bytes*
            Reads     :       3 [9.81e-01 ~ 1.0%]
            Writes    :       6 [7.49e-01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_LINDEP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_LINDEP) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(71,24)
  -> EXTERN: (95,10) for_write_seq_lis
  -> EXTERN: (96,10) for_write_seq_fmt
  -> EXTERN: (96,10) for_write_seq_fmt_xmit
  -> EXTERN: (96,10) for_write_seq_fmt_xmit
  -> EXTERN: (98,10) for_write_seq_fmt
  -> EXTERN: (98,10) for_write_seq_fmt_xmit
  -> EXTERN: (100,10) for_write_seq_fmt
  -> EXTERN: (100,10) for_write_seq_fmt_xmit
  -> EXTERN: (101,10) for_write_seq_fmt
  -> EXTERN: (101,10) for_write_seq_fmt_xmit
  -> EXTERN: (102,10) for_write_seq_lis


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(87,7)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(90,13) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(87,7)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(71,24):remark #34051: REGISTER ALLOCATION : [dft_lindep_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:71

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r10 r13-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     112
            Global    :      27
            Local     :      85
        Regenerable   :      73
        Spilled       :       6
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      20 [3.67e+00 ~ 3.7%]
        Spills        :      16 bytes*
            Reads     :       2 [3.67e-01 ~ 0.4%]
            Writes    :       2 [3.67e-01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_GUESSIN

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_GUESSIN) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(108,18)
  -> EXTERN: (130,10) ga_nodeid_
  -> EXTERN: (131,7) for_cpystr
  -> EXTERN: (134,20) for_cpstr
  -> EXTERN: (135,21) for_cpstr
  -> EXTERN: (135,49) for_cpstr
  -> EXTERN: (137,10) for_cpystr
  -> INLINE: (143,15) DFT_LINDEP
    -> EXTERN: (95,10) for_write_seq_lis
    -> EXTERN: (96,10) for_write_seq_fmt_xmit
    -> EXTERN: (96,10) for_write_seq_fmt_xmit
    -> EXTERN: (96,10) for_write_seq_fmt
    -> EXTERN: (98,10) for_write_seq_fmt_xmit
    -> EXTERN: (98,10) for_write_seq_fmt
    -> EXTERN: (100,10) for_write_seq_fmt_xmit
    -> EXTERN: (100,10) for_write_seq_fmt
    -> EXTERN: (101,10) for_write_seq_fmt_xmit
    -> EXTERN: (101,10) for_write_seq_fmt
    -> EXTERN: (102,10) for_write_seq_lis
  -> EXTERN: (146,20) ga_create_
  -> EXTERN: (148,15) errquit_
  -> EXTERN: (150,23) ga_create_
  -> EXTERN: (152,18) errquit_
  -> EXTERN: (154,15) ga_copy_
  -> EXTERN: (156,15) ga_copy_
  -> EXTERN: (161,19) for_cpstr


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(87,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(143,15)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(90,13) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(87,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(143,15)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(108,18):remark #34051: REGISTER ALLOCATION : [dft_guessin_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:108

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     210
            Global    :      50
            Local     :     160
        Regenerable   :     149
        Spilled       :      11
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      20 [2.21e+00 ~ 2.2%]
        Spills        :      40 bytes*
            Reads     :       7 [1.55e+00 ~ 1.6%]
            Writes    :       5 [1.88e+00 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_GUESSOUT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_GUESSOUT) [4] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(167,18)
  -> EXTERN: (174,15) ga_zero_
  -> EXTERN: (175,15) ga_copy_patch_
  -> EXTERN: (178,20) ga_destroy_
  -> EXTERN: (178,46) errquit_
  -> EXTERN: (182,18) ga_zero_
  -> EXTERN: (183,18) ga_copy_patch_
  -> EXTERN: (186,23) ga_destroy_
  -> EXTERN: (186,49) errquit_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(167,18):remark #34051: REGISTER ALLOCATION : [dft_guessout_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:167

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :      66
            Global    :      19
            Local     :      47
        Regenerable   :      31
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: UTIL_TOLLS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (UTIL_TOLLS) [5] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(192,18)
  -> EXTERN: (212,12) rtdb_get_
  -> EXTERN: (213,11) rtdb_get_
  -> EXTERN: (215,14) for_write_seq_fmt
  -> EXTERN: (218,19) util_flush_
  -> EXTERN: (221,12) rtdb_get_
  -> EXTERN: (223,14) for_write_seq_fmt
  -> EXTERN: (226,19) util_flush_
  -> EXTERN: (241,18) rtdb_put_
  -> EXTERN: (242,22) errquit_
  -> EXTERN: (246,11) for_write_seq_lis
  -> EXTERN: (246,11) for_write_seq_lis_xmit


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(192,18):remark #34051: REGISTER ALLOCATION : [util_tolls_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:192

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :     121
            Global    :      23
            Local     :      98
        Regenerable   :      82
        Spilled       :       6
        
    Routine stack
        Variables     :     104 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       8 [2.36e+00 ~ 2.4%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_CONVPAM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_CONVPAM) [6] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(253,18)
  -> EXTERN: (280,21) util_module_avail_
  -> EXTERN: (282,18) nwxc_getvals_
  -> EXTERN: (284,24) nwxc_reset_rho_tolerance_
  -> EXTERN: (296,10) for_write_seq_lis
  -> EXTERN: (296,10) for_write_seq_lis_xmit
  -> EXTERN: (315,23) ga_nodeid_
  -> EXTERN: (316,22) for_write_seq_fmt_xmit
  -> EXTERN: (316,22) for_write_seq_fmt
  -> EXTERN: (359,22) ga_nodeid_
  -> EXTERN: (360,24) util_cpusec_
  -> EXTERN: (362,13) for_write_seq_fmt_xmit
  -> EXTERN: (362,13) for_write_seq_fmt_xmit
  -> EXTERN: (362,13) for_write_seq_fmt_xmit
  -> EXTERN: (362,13) for_write_seq_fmt_xmit
  -> EXTERN: (362,13) for_write_seq_fmt_xmit
  -> EXTERN: (362,13) for_write_seq_fmt_xmit
  -> EXTERN: (362,13) for_write_seq_fmt
  -> EXTERN: (365,13) for_write_seq_fmt
  -> EXTERN: (365,13) for_write_seq_fmt_xmit
  -> EXTERN: (365,13) for_write_seq_fmt_xmit
  -> EXTERN: (365,13) for_write_seq_fmt_xmit
  -> EXTERN: (365,13) for_write_seq_fmt_xmit
  -> EXTERN: (365,13) for_write_seq_fmt_xmit
  -> EXTERN: (365,13) for_write_seq_fmt_xmit
  -> EXTERN: (365,13) for_write_seq_fmt_xmit


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(253,18):remark #34051: REGISTER ALLOCATION : [dft_convpam_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:253

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12 r14-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     214
            Global    :      32
            Local     :     182
        Regenerable   :     139
        Spilled       :      10
        
    Routine stack
        Variables     :     232 bytes*
            Reads     :       1 [8.44e-02 ~ 0.1%]
            Writes    :      25 [2.36e+00 ~ 2.4%]
        Spills        :      40 bytes*
            Reads     :       6 [7.43e-01 ~ 0.7%]
            Writes    :       5 [7.43e-01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_RABUCK

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_RABUCK) [7] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(396,33)
  -> EXTERN: (414,7) exp
  -> EXTERN: (414,7) log


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(396,33):remark #34051: REGISTER ALLOCATION : [dft_rabuck_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:396

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbp rsi rdi r8-r9 r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :      57
            Global    :      19
            Local     :      38
        Regenerable   :       3
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       3 [4.79e+00 ~ 4.8%]
            Writes    :       4 [3.71e+00 ~ 3.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_NONZVECS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_NONZVECS) [8] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(420,24)
  -> EXTERN: (439,12) ga_nodeid_
  -> EXTERN: (440,15) ga_nnodes_
  -> EXTERN: (442,17) ma_push_get_
  -> EXTERN: (443,25) errquit_
  -> EXTERN: (445,12) ifill_
  -> EXTERN: (446,12) ga_distribution_
  -> EXTERN: (447,18) ga_nodeid_
  -> EXTERN: (452,23) ma_push_get_
  -> EXTERN: (453,33) errquit_
  -> EXTERN: (455,18) ga_get_
  -> EXTERN: (459,20) dabsmax_
  -> EXTERN: (463,21) ma_pop_stack_
  -> EXTERN: (463,42) errquit_
  -> EXTERN: (467,12) ga_igop_
  -> EXTERN: (482,15) ma_pop_stack_
  -> EXTERN: (482,35) errquit_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(468,7)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(476,7) ]
   remark #25015: Estimate of max trip count of loop=2
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(462,13)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(420,24):remark #34051: REGISTER ALLOCATION : [dft_nonzvecs_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:420

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     149
            Global    :      40
            Local     :     109
        Regenerable   :      90
        Spilled       :       6
        
    Routine stack
        Variables     :      88 bytes*
            Reads     :      13 [6.43e+00 ~ 6.4%]
            Writes    :       3 [1.40e+00 ~ 1.4%]
        Spills        :      24 bytes*
            Reads     :       3 [6.53e-01 ~ 0.7%]
            Writes    :       3 [6.53e-01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	      subroutine dft_canorg( nmo, svals, g_svecs, g_xij)
!INLINE REPORT: (DFT_CANORG) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(1,18)
!  -> EXTERN: (26,12) ga_nodeid_
!  -> EXTERN: (27,15) ga_nnodes_
!  -> EXTERN: (33,12) ga_zero_
!  -> EXTERN: (34,12) ga_distribution_
!  -> EXTERN: (35,18) ga_nodeid_
!  -> EXTERN: (40,23) ma_push_get_
!  -> EXTERN: (41,33) errquit_
!  -> EXTERN: (43,18) ga_get_
!  -> EXTERN: (56,24) dscal_
!  -> EXTERN: (61,18) ga_put_
!  -> EXTERN: (63,21) ma_pop_stack_
!  -> EXTERN: (63,42) errquit_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_canorg_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm1]
!        
!    Routine temporaries
!        Total         :     117
!            Global    :      33
!            Local     :      84
!        Regenerable   :      64
!        Spilled       :       8
!        
!    Routine stack
!        Variables     :      96 bytes*
!            Reads     :      13 [6.31e+00 ~ 6.3%]
!            Writes    :      12 [3.70e+00 ~ 3.7%]
!        Spills        :      24 bytes*
!            Reads     :       3 [9.81e-01 ~ 1.0%]
!            Writes    :       6 [7.49e-01 ~ 0.7%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	c
3	c     Canonical Orthogonalization
4	c     Szabo & Ostlund page 144 (Dover Ed.)
5	c     
6	c     $Id$
7	c     
8	      implicit none
9	#include "errquit.fh"
10	c
11	      double precision svals(*) !  S evals [input]
12	      integer g_svecs ! GA handle for S evecs [input]
13	      integer g_xij  ! GA [ouput]
14	      integer nmo ! [out]
15	c
16	#include "mafdecls.fh"
17	#include "global.fh"
18	#include "cdft.fh"
19	c     
20	      integer me, nproc, i
21	      integer ltmpm, itmpm,ndep
22	      double precision aaz
23	      integer ilo,ihi,jlo,jhi,numi,numj,icount
24	      integer jfirst,jlast,ptrfirst
25	c
26	      me = ga_nodeid()
27	      nproc = ga_nnodes()
28	      ndep=nbf-nmo
29	c
30	c     
31	c        Build Xij
32	c     
33	      call ga_zero(g_xij)
34	      call ga_distribution(g_svecs,
35	     .           ga_nodeid(), ilo, ihi, jlo, jhi)
36	      if (ilo.gt.0 .and. ilo.le.ihi) then
37	         numi =  ihi-ilo+1
38	         numj =  jhi-jlo+1
39	         if (numi.gt.0 .and. numj.gt.0) then
40	            if (.not. MA_Push_Get(MT_Dbl, numi*numj, 'tmpm', 
41	     T           ltmpm, itmpm)) call errquit(
42	     T           'dftcano: failed to alloc tmpm',0, MA_ERR)
43	            call ga_get(g_svecs,ilo,ihi,jlo,jhi,
44	     .           dbl_mb(itmpm),numi)
45	            icount=itmpm
46	            jfirst=99999
47	            jlast=-1
48	            ptrfirst=0
49	            do i=jlo,jhi
50	               if(i.gt.ndep) then
51	                  if(ptrfirst.eq.0) ptrfirst=icount
52	                  jfirst=min(i-ndep,jfirst)
53	                  jlast=max(i-ndep,jlast)
54	                  aaz = svals(i)
55	                  aaz = 1.d0/sqrt(aaz)
56	                  call dscal(numi, aaz, DBL_MB(icount), 1)
57	               endif
58	               icount=icount+numi
59	            enddo
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(59,13)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
60	            if(jlast.ne.-1)
61	     C           call ga_put(g_xij,ilo,ihi,jfirst,jlast,
62	     .           dbl_mb(ptrfirst),numi)
63	            if(.not.MA_Pop_Stack(ltmpm)) call errquit(
64	     .           'failed popstack in dftcanorg ',0, 0)
65	         endif
66	      endif
67	c     
68	      return
69	      end
70	c
71	      integer function dft_lindep(nbf,toll_s,svals,oprint,luout)
!INLINE REPORT: (DFT_LINDEP) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(71,24)
!  -> EXTERN: (95,10) for_write_seq_lis
!  -> EXTERN: (96,10) for_write_seq_fmt
!  -> EXTERN: (96,10) for_write_seq_fmt_xmit
!  -> EXTERN: (96,10) for_write_seq_fmt_xmit
!  -> EXTERN: (98,10) for_write_seq_fmt
!  -> EXTERN: (98,10) for_write_seq_fmt_xmit
!  -> EXTERN: (100,10) for_write_seq_fmt
!  -> EXTERN: (100,10) for_write_seq_fmt_xmit
!  -> EXTERN: (101,10) for_write_seq_fmt
!  -> EXTERN: (101,10) for_write_seq_fmt_xmit
!  -> EXTERN: (102,10) for_write_seq_lis
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(71,24):remark #34051: REGISTER ALLOCATION : [dft_lindep_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:71
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r10 r13-r15 zmm0-zmm3]
!        
!    Routine temporaries
!        Total         :     112
!            Global    :      27
!            Local     :      85
!        Regenerable   :      73
!        Spilled       :       6
!        
!    Routine stack
!        Variables     :     176 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :      20 [3.67e+00 ~ 3.7%]
!        Spills        :      16 bytes*
!            Reads     :       2 [3.67e-01 ~ 0.4%]
!            Writes    :       2 [3.67e-01 ~ 0.4%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
72	      implicit none
73	      integer nbf ! [in]
74	      double precision toll_s ! [in]
75	      double precision svals(*) ! [in]
76	      logical oprint
77	      integer luout
78	c
79	      double precision smax,smin
80	      integer i,nmo
81	c
82	c     get linear dep
83	c
84	      smax=-1d30
85	      smin=1d30
86	      nmo = nbf
87	      do i=1,nbf
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(87,7)
!   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(90,13) ]
!   remark #25439: unrolled with remainder by 2  
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(87,7)
!<Remainder>
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(87,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(143,15)
!   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(90,13) ]
!   remark #25439: unrolled with remainder by 2  
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(87,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(143,15)
!<Remainder>
!LOOP END
88	         if(svals(i).lt.toll_s) then
89	            nmo=nmo-1
90	            smax=max(smax,svals(i))
91	            smin=min(smin,svals(i))
92	         endif
93	      enddo
94	      if(oprint.and.nbf.ne.nmo) then
95	         write(luout,*)
96	         write(luout,'(A,i5,A)') ' WARNING : Found ',nbf-nmo,
97	     /        ' linear dependencies '
98	         write(luout,11) ' S eigenvalue threshold:',toll_s
99	 11      format(A,1pe16.5)
100	         write(luout,11) ' Smallest S eigenvalue :',smin
101	         write(luout,11) ' Largest  S eigenvalue :',smax
102	         write(luout,*)
103	      endif
104	      dft_lindep=nmo
105	      return
106	      end
107	c
108	      subroutine dft_guessin(movecs_in,ldmix,ncanorg,fon,
!INLINE REPORT: (DFT_GUESSIN) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(108,18)
!  -> EXTERN: (130,10) ga_nodeid_
!  -> EXTERN: (131,7) for_cpystr
!  -> EXTERN: (134,20) for_cpstr
!  -> EXTERN: (135,21) for_cpstr
!  -> EXTERN: (135,49) for_cpstr
!  -> EXTERN: (137,10) for_cpystr
!  -> INLINE: (143,15) DFT_LINDEP
!    -> EXTERN: (95,10) for_write_seq_lis
!    -> EXTERN: (96,10) for_write_seq_fmt_xmit
!    -> EXTERN: (96,10) for_write_seq_fmt_xmit
!    -> EXTERN: (96,10) for_write_seq_fmt
!    -> EXTERN: (98,10) for_write_seq_fmt_xmit
!    -> EXTERN: (98,10) for_write_seq_fmt
!    -> EXTERN: (100,10) for_write_seq_fmt_xmit
!    -> EXTERN: (100,10) for_write_seq_fmt
!    -> EXTERN: (101,10) for_write_seq_fmt_xmit
!    -> EXTERN: (101,10) for_write_seq_fmt
!    -> EXTERN: (102,10) for_write_seq_lis
!  -> EXTERN: (146,20) ga_create_
!  -> EXTERN: (148,15) errquit_
!  -> EXTERN: (150,23) ga_create_
!  -> EXTERN: (152,18) errquit_
!  -> EXTERN: (154,15) ga_copy_
!  -> EXTERN: (156,15) ga_copy_
!  -> EXTERN: (161,19) for_cpstr
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(108,18):remark #34051: REGISTER ALLOCATION : [dft_guessin_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:108
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm3]
!        
!    Routine temporaries
!        Total         :     210
!            Global    :      50
!            Local     :     160
!        Regenerable   :     149
!        Spilled       :      11
!        
!    Routine stack
!        Variables     :     176 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :      20 [2.21e+00 ~ 2.2%]
!        Spills        :      40 bytes*
!            Reads     :       7 [1.55e+00 ~ 1.6%]
!            Writes    :       5 [1.88e+00 ~ 1.9%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
109	     ,     vecs_or_dens,
110	     ,     ipol,nbf_ao,g_movecs,g_gmovecs,
111	     ,     toll_s,svals)
112	      implicit none
113	#include "errquit.fh"
114	#include "mafdecls.fh"
115	#include "dft_scaleig.fh"
116	#include "global.fh"
117	#include "stdio.fh"
118	      character*(*) movecs_in
119	      logical ldmix ! [out]
120	      integer ncanorg ! [out]
121	      logical fon ! [in]
122	      character*(*) vecs_or_dens ! [out]
123	      integer ipol,g_movecs(2),g_gmovecs(2),nmo(2)
124	      integer nbf_ao
125	      double precision svals(*),toll_s
126	c
127	      external dft_lindep
128	      integer dft_lindep,nmo_out,me
129	c
130	      me=ga_nodeid()
131	      vecs_or_dens='density'
132	      ldmix=.false.
133	      ncanorg=0
134	      if((movecs_in.ne.'atomic'.and.
135	     *     movecs_in.ne.'fragment'.and.movecs_in.ne.'hcore')
136	     .     .or.fon) then
137	         vecs_or_dens='vectors'
138	         ldmix=.true.
139	         ncanorg=1
140	      endif
141	cedo with partial eigeensolver, need to get starting canonic. orthog
142	      if(yev.eq.'m') ncanorg=0
143	      nmo_out=dft_lindep(nbf_ao,toll_s,
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(87,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(143,15)
!   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(90,13) ]
!   remark #25439: unrolled with remainder by 2  
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(87,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(143,15)
!<Remainder>
!LOOP END
144	     .        svals,me.eq.0,luout)
145	      if(nmo_out.ne.nbf_ao) then
146	         if (.not. ga_create(mt_dbl, nbf_ao, nbf_ao, 'gvecs', 
147	     &        nbf_ao, 0, g_gmovecs(1))) 
148	     .        call errquit(' dftscf: ga_create failed ',0, GA_ERR)
149	         if(ipol.eq.2) then
150	            if (.not. ga_create(mt_dbl, nbf_ao, nbf_ao, 'gvecs', 
151	     &           nbf_ao, 0, g_gmovecs(2))) 
152	     .           call errquit(' dftscf: ga_create failed ',0, GA_ERR)
153	         endif
154	         call ga_copy(g_movecs(1),g_gmovecs(1))
155	         if(ipol.eq.2)
156	     /        call ga_copy(g_movecs(2),g_gmovecs(2))
157	      else
158	         g_gmovecs(1)=g_movecs(1)
159	         g_gmovecs(2)=g_movecs(2)
160	      endif
161	      if(movecs_in.eq.'atomic') then
162	         nmo(1)=nmo_out
163	         nmo(2)=nmo(1)
164	      endif
165	      return
166	      end
167	      subroutine dft_guessout(nmo,nbf_ao,g_gmovecs,g_movecs,ipol)
!INLINE REPORT: (DFT_GUESSOUT) [4] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(167,18)
!  -> EXTERN: (174,15) ga_zero_
!  -> EXTERN: (175,15) ga_copy_patch_
!  -> EXTERN: (178,20) ga_destroy_
!  -> EXTERN: (178,46) errquit_
!  -> EXTERN: (182,18) ga_zero_
!  -> EXTERN: (183,18) ga_copy_patch_
!  -> EXTERN: (186,23) ga_destroy_
!  -> EXTERN: (186,49) errquit_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(167,18):remark #34051: REGISTER ALLOCATION : [dft_guessout_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:167
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15]
!        
!    Routine temporaries
!        Total         :      66
!            Global    :      19
!            Local     :      47
!        Regenerable   :      31
!        Spilled       :       6
!        
!    Routine stack
!        Variables     :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
168	      implicit none
169	#include "errquit.fh"
170	#include "global.fh"
171	      integer nmo(2),nbf_ao,g_gmovecs(2),g_movecs(2),ipol
172	c
173	      if(nmo(1).ne.nbf_ao) then
174	         call ga_zero(g_movecs(1))
175	         call ga_copy_patch('n', g_gmovecs(1), 1, nbf_ao, 
176	     .        1, nmo(1),
177	     ,        g_movecs(1), 1,nbf_ao,1,nmo(1))
178	         if (.not. ga_destroy(g_gmovecs(1))) call errquit
179	     &      ('dft_scf: could not destroy g_gmovecs', 0, GA_ERR)
180	         if(ipol.eq.2) then
181	            nmo(2)=nmo(1)
182	            call ga_zero(g_movecs(2))
183	            call ga_copy_patch('n', g_gmovecs(2), 1, nbf_ao, 
184	     .           1, nmo(2),
185	     ,           g_movecs(2), 1,nbf_ao,1,nmo(2))
186	            if (.not. ga_destroy(g_gmovecs(2))) call errquit
187	     &         ('dft_scf: could not destroy g_gmovecs', 0, GA_ERR)
188	         endif
189	      endif
190	      return
191	      end
192	      subroutine util_tolls(rtdb,oprint,toll_s,n_dep,svals,nbf)
!INLINE REPORT: (UTIL_TOLLS) [5] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(192,18)
!  -> EXTERN: (212,12) rtdb_get_
!  -> EXTERN: (213,11) rtdb_get_
!  -> EXTERN: (215,14) for_write_seq_fmt
!  -> EXTERN: (218,19) util_flush_
!  -> EXTERN: (221,12) rtdb_get_
!  -> EXTERN: (223,14) for_write_seq_fmt
!  -> EXTERN: (226,19) util_flush_
!  -> EXTERN: (241,18) rtdb_put_
!  -> EXTERN: (242,22) errquit_
!  -> EXTERN: (246,11) for_write_seq_lis
!  -> EXTERN: (246,11) for_write_seq_lis_xmit
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(192,18):remark #34051: REGISTER ALLOCATION : [util_tolls_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:192
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15]
!        
!    Routine temporaries
!        Total         :     121
!            Global    :      23
!            Local     :      98
!        Regenerable   :      82
!        Spilled       :       6
!        
!    Routine stack
!        Variables     :     104 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       8 [2.36e+00 ~ 2.4%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
193	      implicit none
194	#include "errquit.fh"
195	#include "rtdb.fh"
196	#include "mafdecls.fh"
197	#include "stdio.fh"
198	      integer rtdb
199	      integer nbf
200	      double precision svals(*)
201	      logical oprint
202	c
203	      integer n_dep
204	      double precision toll_s
205	c
206	c     Get user input parameters ... only one allowed
207	c
208	c     lindep:n_dep  ... force number of linearly dep vectors vectors
209	c     lindep:toll_s    ... tolerance 
210	c
211	      toll_s=1d-5
212	       if (rtdb_get(rtdb, 'lindep:tol', mt_dbl, 1, toll_s).or.
213	     .    rtdb_get(rtdb, 'dft:toll_s', MT_DBL, 1, toll_s)) then
214	          if (oprint) then
215	             write(luout, 3) toll_s
216	 3           format(/' Setting tolerance for linear dependence to',
217	     $            1p,d9.2)
218	             call util_flush(luout)
219	          endif
220	       endif
221	       if (rtdb_get(rtdb, 'lindep:n_dep', mt_int, 1, n_dep)) then
222	          if (oprint) then
223	             write(luout, 2) n_dep
224	 2           format(/' Forcing the number of linearly dependent ',
225	     $            'vectors to be', i3)
226	             call util_flush(luout)
227	          endif
228	       else
229	          n_dep = -1
230	       endif
231	       if(n_dep.ne.-1) then
232	          if(n_dep.eq.0) then
233	             toll_s=-1.d9
234	          else
235	             toll_s=svals(n_dep+1)
236	          endif
237	       endif
238	c
239	c     this to keep sodft happy
240	c
241	       if (.not. rtdb_put(rtdb, 'dft:toll_s', MT_DBL, 1,
242	     .      toll_s)) call errquit(
243	     .      'utiltools: rtdbput failed',0, RTDB_ERR)
244	
245	       if(oprint) then
246	          write(luout,*) ' lindep tolerance = ',toll_s
247	       endif
248	c
249	!       if ((toll_s.ne.-1.0d0) .and. (n_dep.ne.-1)) call errquit
250	!     $      ('scf_lindep: only one of n_dep and tol permitted',0)
251	       return
252	       end
253	      subroutine dft_convpam(oprint,iter,etnew,etold,enuc)
!INLINE REPORT: (DFT_CONVPAM) [6] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(253,18)
!  -> EXTERN: (280,21) util_module_avail_
!  -> EXTERN: (282,18) nwxc_getvals_
!  -> EXTERN: (284,24) nwxc_reset_rho_tolerance_
!  -> EXTERN: (296,10) for_write_seq_lis
!  -> EXTERN: (296,10) for_write_seq_lis_xmit
!  -> EXTERN: (315,23) ga_nodeid_
!  -> EXTERN: (316,22) for_write_seq_fmt_xmit
!  -> EXTERN: (316,22) for_write_seq_fmt
!  -> EXTERN: (359,22) ga_nodeid_
!  -> EXTERN: (360,24) util_cpusec_
!  -> EXTERN: (362,13) for_write_seq_fmt_xmit
!  -> EXTERN: (362,13) for_write_seq_fmt_xmit
!  -> EXTERN: (362,13) for_write_seq_fmt_xmit
!  -> EXTERN: (362,13) for_write_seq_fmt_xmit
!  -> EXTERN: (362,13) for_write_seq_fmt_xmit
!  -> EXTERN: (362,13) for_write_seq_fmt_xmit
!  -> EXTERN: (362,13) for_write_seq_fmt
!  -> EXTERN: (365,13) for_write_seq_fmt
!  -> EXTERN: (365,13) for_write_seq_fmt_xmit
!  -> EXTERN: (365,13) for_write_seq_fmt_xmit
!  -> EXTERN: (365,13) for_write_seq_fmt_xmit
!  -> EXTERN: (365,13) for_write_seq_fmt_xmit
!  -> EXTERN: (365,13) for_write_seq_fmt_xmit
!  -> EXTERN: (365,13) for_write_seq_fmt_xmit
!  -> EXTERN: (365,13) for_write_seq_fmt_xmit
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(253,18):remark #34051: REGISTER ALLOCATION : [dft_convpam_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:253
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12 r14-r15 zmm0-zmm2]
!        
!    Routine temporaries
!        Total         :     214
!            Global    :      32
!            Local     :     182
!        Regenerable   :     139
!        Spilled       :      10
!        
!    Routine stack
!        Variables     :     232 bytes*
!            Reads     :       1 [8.44e-02 ~ 0.1%]
!            Writes    :      25 [2.36e+00 ~ 2.4%]
!        Spills        :      40 bytes*
!            Reads     :       6 [7.43e-01 ~ 0.7%]
!            Writes    :       5 [7.43e-01 ~ 0.7%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
254	      implicit none
255	#include "cdft.fh"
256	#include "stdio.fh"
257	#include "global.fh"
258	#include "dft_conv.fh"
259	#include "util.fh"
260	c
261	      logical oprint
262	      logical use_nwxc
263	      integer iter
264	      double precision etnew,etold,enuc
265	c
266	      double precision current_cpu
267	      logical gotsmear
268	      double precision ss
269	      gotsmear(ss)=abs(ss).gt.1d-9
270	c
271	      delta = -etold+etnew
272	      if (abs(delta).lt.5d-2.or.ltight)then
273	c     
274	c        Set coulomb acc to max (e.g., input parameter).
275	c        (note, may also require re-initializing DIIS)
276	c     
277	         itol2e = itol_max
278	         iAOacc = iAOacc_max
279	         tol_rho = tol_rho_max
280	         use_nwxc = util_module_avail("nwxc")
281	         if (use_nwxc) then
282	            call nwxc_getvals("nwxc_is_on",use_nwxc)
283	         endif
284	         if (use_nwxc) call nwxc_reset_rho_tolerance(tol_rho)
285	         if(iter.ge.nfock/2) iswitc = iswitc+1
286	         if(abs(delta).lt.1d-6) iswitc = iswitc+2
287	      else
288	         iswitc=0
289	      endif
290	c     
291	      iter = iter + 1
292	c     
293	c     Check convergence parameters.
294	c     
295	      if(oprint) then
296	         write(luout,*) ' delta = ',delta
297	      endif
298	      if ((abs(delta).lt.dampon.and.abs(delta).gt.dampoff).
299	     .     or.iter.le.ncydp.or.iter.le.1)then
300	         damping = .true.
301	         ndamp = ndamp_input
302	      else
303	         damping = .false.
304	         ndamp = ndamp_def
305	      endif
306	c     
307	      if ((abs(delta).lt.levlon.and.abs(delta).gt.levloff).or.
308	     &    (iter.le.ncysh))then
309	         if (homo_lumo_gap.lt.hl_tol.and.(.not.gotsmear(ssmear)))then
310	            levelshifting = .true.
311	            rlshift = rlshift_input
312	            if (check_shift)then
313	               if (lumo .lt. homo)then
314	                  levelshifting = .false.
315	                  if (ga_nodeid().eq.0 .and. oprint)
316	     &               write(LuOut,2224)homo, lumo
317	               endif
318	            endif
319	         else
320	            levelshifting = .false.
321	            rlshift = rlshift_def
322	         endif 
323	      else
324	         levelshifting = .false.
325	         rlshift = rlshift_def
326	      endif
327	c     
328	      if ((abs(delta).lt.diison.and.abs(delta).gt.diisoff).or.
329	     &     iter.le.ncyds.or.keep_diis_on)then
330	         diising = .true.
331	c     
332	c        Once started, keep DIIS on until diisoff threshold.
333	c     
334	         keep_diis_on = .true.
335	      else
336	         diising = .false.
337	      endif
338	      if (abs(delta).lt.diisoff.or.
339	     .     (ncyds.gt.0.and.iter.gt.ncyds))then
340	         diising = .false.
341	         keep_diis_on = .false.
342	      endif
343	c     
344	      if (nodamping)damping = .false.
345	      if (nolevelshifting) then 
346	        levelshifting = .false.
347	        rlshift=rlshift_def
348	      endif        
349	      if (nodiis)diising = .false.
350	c
351	      lmaxov = lmaxov_sv
352	c      don't turn off max_ovl
353	c      if ((lumo - homo).lt.-hl_tol.and.lmaxov)then
354	c         lmaxov = .false.
355	c         if (ga_nodeid().eq.0 .and. oprint)
356	c     &      write(LuOut,224)homo, lumo
357	c      endif
358	c     
359	      if (oprint.and.ga_nodeid().eq.0)then         
360	         current_cpu = util_cpusec()
361	         if (nexc.le.1)then
362	            write(LuOut,222)etnew+enuc, ecore, Ecoul, Exc(1), enuc, 
363	     &                      rho_n, current_cpu
364	         else
365	            write(LuOut,223)etnew+enuc, ecore, Ecoul, Exc(1), Exc(2),
366	     &                      enuc, rho_n, current_cpu
367	         endif
368	      endif
369	      return
370	 222  format(//
371	     &     '         Total DFT energy =', f22.12/
372	     &     '      One electron energy =', f22.12/
373	     &     '           Coulomb energy =', f22.12/
374	     &     '    Exchange-Corr. energy =', f22.12/
375	     &     ' Nuclear repulsion energy =', f22.12//
376	     &     ' Numeric. integr. density =', f22.12//
377	     &     '     Total iterative time =', f9.1,'s'//)
378	 223  format(//
379	     &     '         Total DFT energy =', f22.12/
380	     &     '      One electron energy =', f22.12/
381	     &     '           Coulomb energy =', f22.12/
382	     &     '          Exchange energy =', f22.12/
383	     &     '       Correlation energy =', f22.12/
384	     &     ' Nuclear repulsion energy =', f22.12//
385	     &     ' Numeric. integr. density =', f22.12//
386	     &     '     Total iterative time =', f9.1,'s'//)
387	 224  format(10x,' HOMO = ',f6.2,' LUMO = ',f6.2,
388	     &     /,10x,'Significant orbital reordering with',
389	     &     ' maximum overlap',
390	     &     /,10x,'turned ON.  Turning max_ovl OFF.')
391	 2224 format(10x,'HOMO = ',f6.2,' LUMO (with shift) = ',f6.2,
392	     &     /,10x,'Unshifted LUMO is less than HOMO.',
393	     &     /,10x,'Turning levelshifting OFF this iteration.')
394	
395	      end
396	      double precision function dft_rabuck(ipol,iter,n_rabuck,noc,
!INLINE REPORT: (DFT_RABUCK) [7] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(396,33)
!  -> EXTERN: (414,7) exp
!  -> EXTERN: (414,7) log
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(396,33):remark #34051: REGISTER ALLOCATION : [dft_rabuck_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:396
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   14[ rax rdx rcx rbp rsi rdi r8-r9 r15 zmm0-zmm4]
!        
!    Routine temporaries
!        Total         :      57
!            Global    :      19
!            Local     :      38
!        Regenerable   :       3
!        Spilled       :       4
!        
!    Routine stack
!        Variables     :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!        Spills        :      16 bytes*
!            Reads     :       3 [4.79e+00 ~ 4.8%]
!            Writes    :       4 [3.71e+00 ~ 3.7%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
397	     ,     derr,evala,evalb)
398	      implicit none
399	      integer ipol,iter,n_rabuck,noc(2)
400	      double precision evala(*),evalb(*),derr(*),delta
401	c
402	      integer nn,nss
403	      double precision ss,s_rabuck,derrt
404	      double precision smear_in
405	      s_rabuck(nn,ss,nss,delta)=min(ss*exp((1d0/(nss-1d0))*
406	     *     log(abs(1d0-10d0/ss))*(nn-1d0)),delta*1d-4)
407	c
408	      derrt=derr(1)
409	      if(ipol.eq.2) derrt=max(derr(1),derr(2))
410	      
411	      smear_in=max(abs(evala(noc(1))-evala(noc(1)+1)),1d-6)
412	      if(ipol.eq.2) smear_in=max(smear_in,
413	     ,     abs(evalb(noc(2))-evalb(noc(2)+1)))
414	      dft_rabuck=s_rabuck(iter,smear_in,n_rabuck,derrt)
415	c     ssmear=s_rabuck(iter,smear_in,n_rabuck,derrt)
416	c     ssmear=s_rabuck(iter,smear_in,n_rabuck,delta)
417	      
418	      return
419	      end
420	      integer function dft_nonzvecs(g_vecs,nbf,noc)
!INLINE REPORT: (DFT_NONZVECS) [8] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(420,24)
!  -> EXTERN: (439,12) ga_nodeid_
!  -> EXTERN: (440,15) ga_nnodes_
!  -> EXTERN: (442,17) ma_push_get_
!  -> EXTERN: (443,25) errquit_
!  -> EXTERN: (445,12) ifill_
!  -> EXTERN: (446,12) ga_distribution_
!  -> EXTERN: (447,18) ga_nodeid_
!  -> EXTERN: (452,23) ma_push_get_
!  -> EXTERN: (453,33) errquit_
!  -> EXTERN: (455,18) ga_get_
!  -> EXTERN: (459,20) dabsmax_
!  -> EXTERN: (463,21) ma_pop_stack_
!  -> EXTERN: (463,42) errquit_
!  -> EXTERN: (467,12) ga_igop_
!  -> EXTERN: (482,15) ma_pop_stack_
!  -> EXTERN: (482,35) errquit_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(420,24):remark #34051: REGISTER ALLOCATION : [dft_nonzvecs_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F:420
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
!        
!    Routine temporaries
!        Total         :     149
!            Global    :      40
!            Local     :     109
!        Regenerable   :      90
!        Spilled       :       6
!        
!    Routine stack
!        Variables     :      88 bytes*
!            Reads     :      13 [6.43e+00 ~ 6.4%]
!            Writes    :       3 [1.40e+00 ~ 1.4%]
!        Spills        :      24 bytes*
!            Reads     :       3 [6.53e-01 ~ 0.7%]
!            Writes    :       3 [6.53e-01 ~ 0.7%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
421	      implicit none
422	#include "errquit.fh"
423	c
424	      integer g_vecs ! GA handle for  vecs [input]
425	      integer nbf
426	      integer noc
427	c
428	#include "mafdecls.fh"
429	#include "global.fh"
430	#include "dft_scaleig.fh"
431	c     
432	      integer me, nproc, i
433	      integer ltmpm, itmpm,l_nz,k_nz
434	      double precision dabsmax,aaz,toll
435	      parameter(toll=1d-9)
436	      external dabsmax
437	      integer ilo,ihi,jlo,jhi,numi,numj,icount
438	c
439	      me = ga_nodeid()
440	      nproc = ga_nnodes()
441	c     
442	      if (.not. MA_Push_Get(MT_int, nbf , 'nonzero', 
443	     T     l_nz, k_nz)) call errquit(
444	     T           'dftnz: failed to alloc nz',0, MA_ERR)
445	      call ifill(nbf,0d0,int_mb(k_nz),1)
446	      call ga_distribution(g_vecs,
447	     .           ga_nodeid(), ilo, ihi, jlo, jhi)
448	      if (ilo.gt.0 .and. ilo.le.ihi) then
449	         numi =  ihi-ilo+1
450	         numj =  jhi-jlo+1
451	         if (numi.gt.0 .and. numj.gt.0) then
452	            if (.not. MA_Push_Get(MT_Dbl, numi*numj, 'tmpm', 
453	     T           ltmpm, itmpm)) call errquit(
454	     T           'dftcano: failed to alloc tmpm',0, MA_ERR)
455	            call ga_get(g_vecs,ilo,ihi,jlo,jhi,
456	     .           dbl_mb(itmpm),numi)
457	            icount=itmpm
458	            do i=jlo,jhi
459	               aaz=dabsmax(numi,dbl_mb(icount))
460	               if(aaz.gt.toll) int_mb(k_nz+i-1)=1d0
461	               icount=icount+numi
462	            enddo
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(462,13)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
463	            if(.not.MA_Pop_Stack(ltmpm)) call errquit(
464	     .           'failed popstack in dftcanorg ',0, 0)
465	         endif
466	      endif
467	      call ga_igop(375, int_mb(k_nz), nbf, '+')
468	      do i=nbf,1,-1
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(468,7)
!   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_canorg.F(476,7) ]
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
469	         if(int_mb(k_nz+i-1).ne.0) then
470	            dft_nonzvecs=i
471	            goto 1
472	         endif
473	      enddo
474	 1    continue
475	c     we should be using all the electrons .. right?
476	      dft_nonzvecs=max(noc,dft_nonzvecs)
477	#if 0
478	      write(6,*) ' nonzvecs ',dft_nonzvecs
479	      call util_flush(6)
480	#endif
481	c     
482	      if(.not.MA_Pop_Stack(l_nz)) call errquit(
483	     .     'failed popstack in dftnz ',0, 0)
484	      return
485	      end
486	c
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_DIAGN

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_DIAGN) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(3,18)
  -> EXTERN: (68,10) ga_nodeid_
  -> EXTERN: (69,13) ga_nnodes_
  -> EXTERN: (70,11) dft_lindep_
  -> EXTERN: (71,17) ga_create_
  -> EXTERN: (73,8) errquit_
  -> EXTERN: (74,17) ga_create_
  -> EXTERN: (76,8) errquit_
  -> EXTERN: (84,20) ga_create_
  -> EXTERN: (86,15) errquit_
  -> EXTERN: (87,15) dft_canorg_
  -> EXTERN: (94,19) pstat_on_
  -> EXTERN: (95,12) ga_dgemm_
  -> EXTERN: (97,12) ga_dgemm_
  -> EXTERN: (99,19) pstat_off_
  -> EXTERN: (107,18) ga_get_
  -> EXTERN: (109,18) ga_put_
  -> EXTERN: (121,18) ga_create_
  -> EXTERN: (123,8) errquit_
  -> EXTERN: (125,13) ga_zero_
  -> EXTERN: (127,18) ga_get_
  -> EXTERN: (128,18) ga_put_
  -> EXTERN: (130,13) ga_copy_
  -> EXTERN: (131,18) ga_destroy_
  -> EXTERN: (131,43) errquit_
  -> EXTERN: (139,10) util_print_
  -> EXTERN: (140,19) util_cpusec_
  -> EXTERN: (142,15) ga_print_
  -> EXTERN: (145,12) dft_tstamp_
  -> EXTERN: (147,19) pstat_on_
  -> INLINE: (150,12) DFT_SCALEIG
    -> EXTERN: (252,15) ga_pdsyev_
    -> EXTERN: (254,15) ga_pdsyevx_
    -> EXTERN: (256,15) ga_pdsyevd_
    -> EXTERN: (261,15) ga_pdsyevr_
    -> INLINE: (264,15) DFT_IDTYVECS
      -> EXTERN: (323,12) ga_inquire_
      -> EXTERN: (329,12) nga_zero_patch_
      -> EXTERN: (330,12) ga_distribution_
      -> EXTERN: (331,12) ga_nodeid_
      -> EXTERN: (336,21) ga_put_
    -> EXTERN: (276,15) errquit_
  -> EXTERN: (160,19) pstat_off_
  -> EXTERN: (162,12) dft_tstamp_
  -> EXTERN: (163,13) util_cpusec_
  -> EXTERN: (164,10) util_print_
  -> EXTERN: (165,19) util_cpusec_
  -> EXTERN: (168,10) util_print_
  -> EXTERN: (170,10) for_write_seq_fmt
  -> EXTERN: (186,12) ga_zero_
  -> EXTERN: (187,19) pstat_on_
  -> EXTERN: (188,12) ga_dgemm_
  -> EXTERN: (190,19) pstat_off_
  -> EXTERN: (191,17) ga_destroy_
  -> EXTERN: (191,38) errquit_
  -> EXTERN: (199,15) dft_mxovl_
  -> EXTERN: (207,12) ga_copy_
  -> EXTERN: (208,20) ga_destroy_
  -> EXTERN: (208,43) errquit_
  -> EXTERN: (212,21) ga_destroy_
  -> EXTERN: (212,40) errquit_


    Report from: Loop nest & Vector optimizations [loop, vec]



Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(110,10)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(129,8)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(337,13) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(150,12)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(3,18):remark #34051: REGISTER ALLOCATION : [dft_diagn_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:3

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     427
            Global    :      84
            Local     :     343
        Regenerable   :     324
        Spilled       :      13
        
    Routine stack
        Variables     :     160 bytes*
            Reads     :       8 [9.26e-01 ~ 0.9%]
            Writes    :      14 [1.34e+00 ~ 1.3%]
        Spills        :      56 bytes*
            Reads     :      11 [4.20e-01 ~ 0.4%]
            Writes    :      12 [1.56e+00 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_SCALEIG

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_SCALEIG) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(240,18)
  -> EXTERN: (252,15) ga_pdsyev_
  -> EXTERN: (254,15) ga_pdsyevx_
  -> EXTERN: (256,15) ga_pdsyevd_
  -> EXTERN: (261,15) ga_pdsyevr_
  -> INLINE: (264,15) DFT_IDTYVECS
    -> EXTERN: (323,12) ga_inquire_
    -> EXTERN: (329,12) nga_zero_patch_
    -> EXTERN: (330,12) ga_distribution_
    -> EXTERN: (331,12) ga_nodeid_
    -> EXTERN: (336,21) ga_put_
  -> EXTERN: (276,15) errquit_


    Report from: Loop nest & Vector optimizations [loop, vec]



Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(337,13) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(421,15)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(240,18):remark #34051: REGISTER ALLOCATION : [dft_scaleig_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:240

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rbx rsi rdi r8-r9 r14]
        
    Routine temporaries
        Total         :      92
            Global    :      22
            Local     :      70
        Regenerable   :      50
        Spilled       :       2
        
    Routine stack
        Variables     :      40 bytes*
            Reads     :       5 [1.86e+00 ~ 1.9%]
            Writes    :       4 [1.45e+00 ~ 1.5%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_REMSHFT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_REMSHFT) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(219,18)


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(231,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(232,13) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(232,13)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(232,13)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 2.310 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(232,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(219,18):remark #34051: REGISTER ALLOCATION : [dft_remshft_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:219

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rsi rdi r8-r14 zmm0-zmm5]
        
    Routine temporaries
        Total         :      54
            Global    :      25
            Local     :      29
        Regenerable   :       1
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.70e-01 ~ 0.3%]
            Writes    :       3 [2.70e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_IDTYVECS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_IDTYVECS) [4] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(313,18)
  -> EXTERN: (323,12) ga_inquire_
  -> EXTERN: (329,12) nga_zero_patch_
  -> EXTERN: (330,12) ga_distribution_
  -> EXTERN: (331,12) ga_nodeid_
  -> EXTERN: (336,21) ga_put_


    Report from: Loop nest & Vector optimizations [loop, vec]



Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(337,13)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(313,18):remark #34051: REGISTER ALLOCATION : [dft_idtyvecs_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:313

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r9 r13-r14]
        
    Routine temporaries
        Total         :      53
            Global    :      19
            Local     :      34
        Regenerable   :      29
        Spilled       :       2
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [2.69e+00 ~ 2.7%]
            Writes    :       2 [1.15e+00 ~ 1.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_SCALEIG_SO

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_SCALEIG_SO) [5] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(280,18)
  -> EXTERN: (292,15) ga_pzheevd_
  -> EXTERN: (297,15) ga_pzheevr_
  -> INLINE: (300,19) DFT_IDTYVECS
    -> EXTERN: (323,12) ga_inquire_
    -> EXTERN: (329,12) nga_zero_patch_
    -> EXTERN: (330,12) ga_distribution_
    -> EXTERN: (331,12) ga_nodeid_
    -> EXTERN: (336,21) ga_put_
  -> INLINE: (301,19) DFT_IDTYVECS
    -> EXTERN: (323,12) ga_inquire_
    -> EXTERN: (329,12) nga_zero_patch_
    -> EXTERN: (330,12) ga_distribution_
    -> EXTERN: (331,12) ga_nodeid_
    -> EXTERN: (336,21) ga_put_
  -> EXTERN: (305,15) errquit_


    Report from: Loop nest & Vector optimizations [loop, vec]



Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(337,13) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(573,19)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(337,13) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(574,19)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(280,18):remark #34051: REGISTER ALLOCATION : [dft_scaleig_so_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:280

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rbp rsi rdi r8-r9 r12]
        
    Routine temporaries
        Total         :     124
            Global    :      33
            Local     :      91
        Regenerable   :      73
        Spilled       :       2
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :      10 [3.73e+00 ~ 3.7%]
            Writes    :       8 [2.16e+00 ~ 2.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_EIG_SO

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_EIG_SO) [6] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(343,18)
  -> EXTERN: (374,16) ma_push_get_
  -> EXTERN: (375,12) errquit_
  -> EXTERN: (377,16) ma_push_get_
  -> EXTERN: (378,12) errquit_
  -> EXTERN: (379,16) ma_push_get_
  -> EXTERN: (381,12) errquit_
  -> EXTERN: (382,16) ma_push_get_
  -> EXTERN: (383,12) errquit_
  -> EXTERN: (392,15) ga_get_
  -> EXTERN: (397,15) ga_get_
  -> EXTERN: (405,12) zheev_
  -> EXTERN: (408,10) ga_nodeid_
  -> EXTERN: (415,15) ga_put_
  -> EXTERN: (422,15) ga_put_
  -> EXTERN: (426,12) ga_sync_
  -> EXTERN: (429,16) ma_pop_stack_
  -> EXTERN: (430,10) errquit_
  -> EXTERN: (431,16) ma_pop_stack_
  -> EXTERN: (432,10) errquit_
  -> EXTERN: (433,16) ma_pop_stack_
  -> EXTERN: (434,10) errquit_
  -> EXTERN: (435,16) ma_pop_stack_
  -> EXTERN: (436,10) errquit_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(386,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(390,7) ]
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(387,10)
      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(387,10)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(393,10)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 2.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(393,10)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(398,10)
   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 8.000 
   remark #15478: estimated potential speedup: 1.890 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 4  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(398,10)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(410,10)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(410,10)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(417,13)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(417,13)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(403,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(423,8)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(343,18):remark #34051: REGISTER ALLOCATION : [dft_eig_so_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:343

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     349
            Global    :     108
            Local     :     241
        Regenerable   :     149
        Spilled       :      13
        
    Routine stack
        Variables     :     112 bytes*
            Reads     :      17 [3.74e+00 ~ 3.7%]
            Writes    :      10 [1.50e+00 ~ 1.5%]
        Spills        :      56 bytes*
            Reads     :       8 [4.68e-01 ~ 0.5%]
            Writes    :       8 [3.16e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_UTILSCAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_UTILSCAL) [7] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(441,18)
  -> EXTERN: (446,17) rtdb_cget_
  -> EXTERN: (448,17) rtdb_get_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(441,18):remark #34051: REGISTER ALLOCATION : [dft_utilscal_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:441

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 r15]
        
    Routine temporaries
        Total         :      32
            Global    :      12
            Local     :      20
        Regenerable   :      18
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	cedo#define USE_PDSYEVR 1
2	cedo#define USE_ELPA 1
3	      subroutine dft_diagn(levelshifting,
!INLINE REPORT: (DFT_DIAGN) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(3,18)
!  -> EXTERN: (68,10) ga_nodeid_
!  -> EXTERN: (69,13) ga_nnodes_
!  -> EXTERN: (70,11) dft_lindep_
!  -> EXTERN: (71,17) ga_create_
!  -> EXTERN: (73,8) errquit_
!  -> EXTERN: (74,17) ga_create_
!  -> EXTERN: (76,8) errquit_
!  -> EXTERN: (84,20) ga_create_
!  -> EXTERN: (86,15) errquit_
!  -> EXTERN: (87,15) dft_canorg_
!  -> EXTERN: (94,19) pstat_on_
!  -> EXTERN: (95,12) ga_dgemm_
!  -> EXTERN: (97,12) ga_dgemm_
!  -> EXTERN: (99,19) pstat_off_
!  -> EXTERN: (107,18) ga_get_
!  -> EXTERN: (109,18) ga_put_
!  -> EXTERN: (121,18) ga_create_
!  -> EXTERN: (123,8) errquit_
!  -> EXTERN: (125,13) ga_zero_
!  -> EXTERN: (127,18) ga_get_
!  -> EXTERN: (128,18) ga_put_
!  -> EXTERN: (130,13) ga_copy_
!  -> EXTERN: (131,18) ga_destroy_
!  -> EXTERN: (131,43) errquit_
!  -> EXTERN: (139,10) util_print_
!  -> EXTERN: (140,19) util_cpusec_
!  -> EXTERN: (142,15) ga_print_
!  -> EXTERN: (145,12) dft_tstamp_
!  -> EXTERN: (147,19) pstat_on_
!  -> INLINE: (150,12) DFT_SCALEIG
!    -> EXTERN: (252,15) ga_pdsyev_
!    -> EXTERN: (254,15) ga_pdsyevx_
!    -> EXTERN: (256,15) ga_pdsyevd_
!    -> EXTERN: (261,15) ga_pdsyevr_
!    -> INLINE: (264,15) DFT_IDTYVECS
!      -> EXTERN: (323,12) ga_inquire_
!      -> EXTERN: (329,12) nga_zero_patch_
!      -> EXTERN: (330,12) ga_distribution_
!      -> EXTERN: (331,12) ga_nodeid_
!      -> EXTERN: (336,21) ga_put_
!    -> EXTERN: (276,15) errquit_
!  -> EXTERN: (160,19) pstat_off_
!  -> EXTERN: (162,12) dft_tstamp_
!  -> EXTERN: (163,13) util_cpusec_
!  -> EXTERN: (164,10) util_print_
!  -> EXTERN: (165,19) util_cpusec_
!  -> EXTERN: (168,10) util_print_
!  -> EXTERN: (170,10) for_write_seq_fmt
!  -> EXTERN: (186,12) ga_zero_
!  -> EXTERN: (187,19) pstat_on_
!  -> EXTERN: (188,12) ga_dgemm_
!  -> EXTERN: (190,19) pstat_off_
!  -> EXTERN: (191,17) ga_destroy_
!  -> EXTERN: (191,38) errquit_
!  -> EXTERN: (199,15) dft_mxovl_
!  -> EXTERN: (207,12) ga_copy_
!  -> EXTERN: (208,20) ga_destroy_
!  -> EXTERN: (208,43) errquit_
!  -> EXTERN: (212,21) ga_destroy_
!  -> EXTERN: (212,40) errquit_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(3,18):remark #34051: REGISTER ALLOCATION : [dft_diagn_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:3
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
!        
!    Routine temporaries
!        Total         :     427
!            Global    :      84
!            Local     :     343
!        Regenerable   :     324
!        Spilled       :      13
!        
!    Routine stack
!        Variables     :     160 bytes*
!            Reads     :       8 [9.26e-01 ~ 0.9%]
!            Writes    :      14 [1.34e+00 ~ 1.3%]
!        Spills        :      56 bytes*
!            Reads     :      11 [4.20e-01 ~ 0.4%]
!            Writes    :      12 [1.56e+00 ~ 1.6%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
4	     ,     nmo,ncanorg,
5	     .     g_fock,g_s,g_movecs,g_tmp,g_svecs,
6	     ,     evals,svals,nocc,homo,lumo,toll_s,
7	c
8	c MN solvation models -->
9	c
10	c     ,     oprint_intermediate_fock,oprint_time,oprint_conv_details)
11	     ,     oprint_intermediate_fock,oprint_time,oprint_conv_details,
12	     $ istep_cosmo_vem)
13	c
14	c <-- MN solvation models
15	c     
16	c     $Id$
17	c     
18	      implicit none
19	#include "errquit.fh"
20	#include "cdft.fh"
21	#include "global.fh"
22	#include "mafdecls.fh"
23	#include "dftps.fh"
24	#include "util.fh"
25	#ifdef SCALAPACK
26	#include "dft_scaleig.fh"
27	#endif
28	      logical levelshifting ! [in]
29	      integer g_tmp   ! [in]
30	      integer g_fock   ! [in]
31	      integer g_s   ! [in]
32	      integer g_movecs   ! [in]
33	      integer g_svecs   ! [in]
34	      integer nocc ! [in]
35	      double precision evals(*)   ! [out]
36	      double precision svals(*)   ! [in]
37	      double precision toll_s   ! [in]
38	      double precision homo,lumo ! [out]
39	      logical oprint_intermediate_fock,oprint_time,
40	     ,     oprint_conv_details ![in]
41	      integer nmo ! [out]
42	c
43	      integer me,j,nproc,g_fockt,g_xij,g_movecst
44	      integer ncanorg
45	      double precision fjj
46	      integer dft_lindep
47	      external dft_lindep
48	c
49	c     timing
50	c
51	      double precision time1,time2
52	c
53	c MN solvation models -->
54	c
55	      integer istep_cosmo_vem
56	      integer g_fockt_tmp
57	c
58	      if (istep_cosmo_vem.eq.2) levelshifting=.false.
59	c
60	c <-- MN solvation models
61	c     
62	c     Level shifting is implemented here (similarity 
63	c     transformation before standard eigensolver).  Note,
64	c     levelshifting is appropriate once a transformation
65	c     is available which makes the resulting Fock matrix 
66	c     diagonally dominant, e.g., in an approximate MO basis.  
67	c     
68	      me=ga_nodeid()
69	      nproc=ga_nnodes()
70	      nmo=dft_lindep(nbf_ao,toll_s,svals,oprint_conv_details,6)
71	      if (.not. ga_create(mt_dbl, nbf_ao, nbf_ao, 'movecstransf', 
72	     &     nbf, 0, g_movecst)) 
73	     . call errquit(' ddftdiagn: ga_create failed ',1, GA_ERR)
74	      if (.not. ga_create(mt_dbl, nmo, nmo, 'fock transf', 
75	     &     nmo, 0, g_fockt))
76	     . call errquit(' ddftdiagn: ga_create failed ',2, GA_ERR)
77	c
78	c     get xij through canonical orthog
79	c
80	#ifdef SCALAPACK
81	      if(yev.eq.'m') ncanorg=0
82	#endif
83	      if(ncanorg.eq.0) then
84	         if (.not. ga_create(mt_dbl, nbf_ao, nbf_ao, 'Xij canorg', 
85	     &        nbf, 0, g_xij)) 
86	     .        call errquit(' ddftdiagn: ga_create failed ',0, GA_ERR)
87	         call dft_canorg(nmo, svals, g_svecs, g_xij)
88	      else
89	         g_xij=g_movecs
90	       endif
91	c
92	c     F' = X+ * F * X
93	c
94	      if (odftps) call pstat_on(ps_dgemm)
95	      call ga_dgemm('N', 'N', nbf_ao, nmo, nbf_ao, 1d0, 
96	     &     g_fock, g_xij, 0d0, g_tmp)
97	      call ga_dgemm('T', 'N', nmo, nmo, nbf_ao, 1d0, 
98	     &     g_xij, g_tmp, 0d0, g_fockt)
99	      if (odftps) call pstat_off(ps_dgemm)
100	      
101	
102	      if (levelshifting.and.ncanorg.ne.0)then
103	c     
104	c     Build upper diagonal matrix. in MO basis
105	c     
106	         do j = nocc+1+me, nmo, nproc
107	            call ga_get(g_fockt, j, j, j, j, fjj, 1)
108	            fjj=fjj+rlshift
109	            call ga_put(g_fockt, j, j, j, j, fjj, 1)
110	         enddo
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(110,10)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
111	      else
112	         rlshift = 0.0
113	      endif
114	c
115	c MN solvation models -->
116	c
117	      if (istep_cosmo_vem.eq.2) then
118	c replace off-diagonal elements of the MO Fock matrix with zeros to skip
119	c actual diagonalization; evals will contain the expectation values <Phi(i)|F|Phi(i)> 
120	c rather than correct eigenvalues
121	       if (.not. ga_create(mt_dbl, nmo, nmo, 'fock transf tmp',
122	     $     nbf, 0, g_fockt_tmp))
123	     . call errquit(' ddftdiagn: ga_create failed g_fockt_tmp',
124	     $  2, GA_ERR)
125	       call ga_zero(g_fockt_tmp)
126	       do j = 1+me, nmo, nproc
127	            call ga_get(g_fockt, j, j, j, j, fjj, 1)
128	            call ga_put(g_fockt_tmp, j, j, j, j, fjj, 1)
129	       enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(129,8)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
130	       call ga_copy(g_fockt_tmp,g_fockt)
131	       if (.not. ga_destroy(g_fockt_tmp)) call errquit
132	     $        ('dft_diagn: could not destroy g_fockt_tmp', 0, GA_ERR)
133	      endif
134	c
135	c <-- MN solvation models
136	c     
137	c     Solve for the eigenvalues and eigenvectors of the Hamiltonian.
138	c     
139	      if(util_print('dft timings', print_high))
140	     &      time1=util_cpusec()   ! start diagonalization time
141	      if (oprint_intermediate_fock)then     
142	         call ga_print(g_fockt)
143	      endif
144	      if (oprint_time)
145	     &     call dft_tstamp(' calling diag ')
146	
147	      if (odftps) call pstat_on(ps_diag)
148	#if defined(PARALLEL_DIAG)
149	#ifdef SCALAPACK
150	      call dft_scaleig(g_fockt, g_fockt, evals,
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(337,13) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(150,12)
!   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!LOOP END
151	     P     nocc) 
152	#else
153	      call ga_diag_std(
154	     .     g_fockt,  g_fockt, evals)
155	#endif
156	#else 
157	      call ga_diag_std_seq(g_fockt, g_fockt, evals)
158	#endif
159	cedo      call ga_print(g_fockt)
160	      if (odftps) call pstat_off(ps_diag)
161	      if (oprint_time)
162	     &     call dft_tstamp(' called diag ')
163	      time2=util_cpusec()   ! end diagonalization time
164	      if(util_print('dft timings', print_high))
165	     &      time2=util_cpusec()   ! end diagonalization time
166	c
167	c     print diagonalization time
168	      if(util_print('dft timings', print_high)) then
169	       if (me.eq.0) then
170	         write(*,"(4x,'Diagonalization Time:',F13.1,'s')") time2-time1
171	       endif
172	      end if
173	c     
174	c     Check HOMO/LUMO gap.
175	c     
176	      if(nocc.gt.0) then
177	         homo = evals(nocc)
178	         lumo = evals(nocc+1)
179	      else
180	         homo=-100.0d0
181	         lumo=100.0d0
182	      endif
183	c
184	c     backtransform  C(k) = X * C'(k)
185	c
186	      call ga_zero(g_movecst)
187	      if (odftps) call pstat_on(ps_dgemm)
188	      call ga_dgemm('N', 'N', nbf_ao, nmo, nmo, 1d0, 
189	     &     g_xij, g_fockt, 0d0, g_movecst)
190	      if (odftps) call pstat_off(ps_dgemm)
191	      if (.not. ga_destroy(g_fockt)) call errquit
192	     &     ('dft_diagn: could not destroy g_scr', 0, GA_ERR)
193	
194	c     
195	c     Keep orbital ordering according to principle
196	c     of maximum overlap with previous iteration.
197	c     
198	      if (lmaxov)then
199	         call dft_mxovl(ao_bas_han, evals,
200	     &        g_movecst, g_movecs, g_s, g_fock,
201	     ,        nocc,oprint_conv_details,
202	     ,        homo,lumo)
203	      endif
204	c     
205	c     put new movecs
206	c     
207	      call ga_copy(g_movecst, g_movecs)
208	         if (.not. ga_destroy(g_movecst)) call errquit
209	     &        ('dft_diagn: could not destroy g_scr', 0, GA_ERR)
210	         if(ncanorg.eq.0) then
211	          ncanorg=1
212	          if (.not. ga_destroy(g_xij)) call errquit
213	     &       ('dft_diagn: could not destroy g_scr', 0, GA_ERR)
214	         endif
215	      
216	      return
217	      end
218	c
219	      subroutine dft_remshft(levelshifting,ipol,nbf_ao,noc,
!INLINE REPORT: (DFT_REMSHFT) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(219,18)
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(219,18):remark #34051: REGISTER ALLOCATION : [dft_remshft_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:219
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   18[ rax rdx rcx rsi rdi r8-r14 zmm0-zmm5]
!        
!    Routine temporaries
!        Total         :      54
!            Global    :      25
!            Local     :      29
!        Regenerable   :       1
!        Spilled       :       3
!        
!    Routine stack
!        Variables     :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!        Spills        :      24 bytes*
!            Reads     :       3 [2.70e-01 ~ 0.3%]
!            Writes    :       3 [2.70e-01 ~ 0.3%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
220	     ,     rlshift,eval)
221	      implicit none
222	      logical levelshifting
223	      integer ipol
224	      integer nbf_ao
225	      double precision eval(nbf_ao,*),rlshift
226	      integer noc(2)
227	c
228	      integer i,j
229	c
230	      if(levelshifting) then
231	         do i=1,ipol
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(231,10)
!   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(232,13) ]
!   remark #15542: loop was not vectorized: inner loop was already vectorized
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(232,13)
!   <Peeled loop for vectorization>
!      remark #25015: Estimate of max trip count of loop=1
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(232,13)
!      remark #15300: LOOP WAS VECTORIZED
!      remark #15442: entire loop may be executed in remainder
!      remark #15448: unmasked aligned unit stride loads: 1 
!      remark #15449: unmasked aligned unit stride stores: 1 
!      remark #15475: --- begin vector cost summary ---
!      remark #15476: scalar cost: 6 
!      remark #15477: vector cost: 2.500 
!      remark #15478: estimated potential speedup: 2.310 
!      remark #15488: --- end vector cost summary ---
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(232,13)
!   <Remainder loop for vectorization>
!   LOOP END
!LOOP END
232	            do j = noc(i)+1, nbf_ao
233	               eval(j,i)=eval(j,i)- rlshift
234	            enddo
235	         enddo
236	      endif
237	      return
238	      end
239	#ifdef SCALAPACK
240	      subroutine dft_scaleig(g_s,g_svecs,evals,
!INLINE REPORT: (DFT_SCALEIG) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(240,18)
!  -> EXTERN: (252,15) ga_pdsyev_
!  -> EXTERN: (254,15) ga_pdsyevx_
!  -> EXTERN: (256,15) ga_pdsyevd_
!  -> EXTERN: (261,15) ga_pdsyevr_
!  -> INLINE: (264,15) DFT_IDTYVECS
!    -> EXTERN: (323,12) ga_inquire_
!    -> EXTERN: (329,12) nga_zero_patch_
!    -> EXTERN: (330,12) ga_distribution_
!    -> EXTERN: (331,12) ga_nodeid_
!    -> EXTERN: (336,21) ga_put_
!  -> EXTERN: (276,15) errquit_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(240,18):remark #34051: REGISTER ALLOCATION : [dft_scaleig_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:240
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :    9[ rax rdx rcx rbx rsi rdi r8-r9 r14]
!        
!    Routine temporaries
!        Total         :      92
!            Global    :      22
!            Local     :      70
!        Regenerable   :      50
!        Spilled       :       2
!        
!    Routine stack
!        Variables     :      40 bytes*
!            Reads     :       5 [1.86e+00 ~ 1.9%]
!            Writes    :       4 [1.45e+00 ~ 1.5%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
241	     A      nocc)
242	      implicit none
243	#include "dft_scaleig.fh"
244	#include "global.fh"
245	      integer g_s,g_svecs
246	      double precision evals(*)
247	      integer nocc,i
248	c
249	      integer nmoout
250	c
251	      if(yev.eq.'v') then
252	         call ga_pdsyev(g_s, g_svecs, evals,nb)
253	      elseif(yev.eq.'x') then
254	         call ga_pdsyevx(g_s, g_svecs, evals,nb)
255	      elseif(yev.eq.'d') then
256	         call ga_pdsyevd(g_s, g_svecs, evals,nb)
257	#ifdef USE_PDSYEVR
258	      elseif(yev.eq.'r'.or.yev.eq.'m') then
259	         nmoout=0
260	         if(yev.eq.'m') nmoout=nocc
261	         call ga_pdsyevr(g_s, g_svecs, evals,nb,nmoout)
262	         if(nmoout.ne.0) 
263	c     patching non computed eigenvectors with identity
264	     d        call dft_idtyvecs(g_svecs,nmoout+1)
265	#endif
266	#ifdef USE_ELPA
267	      elseif(yev.eq.'e') then
268	         nmoout=0
269	         call ga_evp_real(g_s, g_svecs, evals,nb,nmoout)
270	      elseif(yev.eq.'l') then
271	         nmoout=nocc
272	         call ga_evp_real(g_s, g_svecs, evals,nb,nmoout)
273	         call dft_idtyvecs(g_svecs,nmoout+1)
274	#endif
275	      else
276	         call errquit(' wrong pdsyev value',0,0)
277	      endif
278	      return
279	      end
280	      subroutine dft_scaleig_so(g_s,g_svecs,evals,
!INLINE REPORT: (DFT_SCALEIG_SO) [5] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(280,18)
!  -> EXTERN: (292,15) ga_pzheevd_
!  -> EXTERN: (297,15) ga_pzheevr_
!  -> INLINE: (300,19) DFT_IDTYVECS
!    -> EXTERN: (323,12) ga_inquire_
!    -> EXTERN: (329,12) nga_zero_patch_
!    -> EXTERN: (330,12) ga_distribution_
!    -> EXTERN: (331,12) ga_nodeid_
!    -> EXTERN: (336,21) ga_put_
!  -> INLINE: (301,19) DFT_IDTYVECS
!    -> EXTERN: (323,12) ga_inquire_
!    -> EXTERN: (329,12) nga_zero_patch_
!    -> EXTERN: (330,12) ga_distribution_
!    -> EXTERN: (331,12) ga_nodeid_
!    -> EXTERN: (336,21) ga_put_
!  -> EXTERN: (305,15) errquit_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(280,18):remark #34051: REGISTER ALLOCATION : [dft_scaleig_so_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:280
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :    9[ rax rdx rcx rbp rsi rdi r8-r9 r12]
!        
!    Routine temporaries
!        Total         :     124
!            Global    :      33
!            Local     :      91
!        Regenerable   :      73
!        Spilled       :       2
!        
!    Routine stack
!        Variables     :      72 bytes*
!            Reads     :      10 [3.73e+00 ~ 3.7%]
!            Writes    :       8 [2.16e+00 ~ 2.2%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
281	     A      nocc)
282	      implicit none
283	#include "dft_scaleig.fh"
284	      integer g_s(*),g_svecs(*)
285	      double precision evals(*)
286	      integer nocc
287	c
288	      integer nmoout
289	c
290	#ifdef USE_GAPZHEEVD
291	      if(yev.eq.'d') then
292	         call ga_pzheevd(g_s, g_svecs, evals,nb)
293	#ifdef USE_PDSYEVR
294	      elseif(yev.eq.'r'.or.yev.eq.'m') then
295	         nmoout=0
296	         if(yev.eq.'m') nmoout=nocc
297	         call ga_pzheevr(g_s, g_svecs, evals,nb,nmoout)
298	         if(nmoout.ne.0)  then
299	c     patching non computed eigenvectors with identity
300	             call dft_idtyvecs(g_svecs(1),nmoout+1)
301	             call dft_idtyvecs(g_svecs(2),nmoout+1)
302	          endif
303	#endif
304	      else
305	         call errquit(' wrong pzheevs value',0,0)
306	      endif
307	#else
308	         call errquit(' dftscaleigso: not working',0,0)
309	#endif
310	      return
311	      end
312	#endif
313	      subroutine dft_idtyvecs(g_a,istart)
!INLINE REPORT: (DFT_IDTYVECS) [4] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(313,18)
!  -> EXTERN: (323,12) ga_inquire_
!  -> EXTERN: (329,12) nga_zero_patch_
!  -> EXTERN: (330,12) ga_distribution_
!  -> EXTERN: (331,12) ga_nodeid_
!  -> EXTERN: (336,21) ga_put_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(313,18):remark #34051: REGISTER ALLOCATION : [dft_idtyvecs_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:313
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :    9[ rax rdx rcx rsi rdi r8-r9 r13-r14]
!        
!    Routine temporaries
!        Total         :      53
!            Global    :      19
!            Local     :      34
!        Regenerable   :      29
!        Spilled       :       2
!        
!    Routine stack
!        Variables     :      32 bytes*
!            Reads     :       4 [2.69e+00 ~ 2.7%]
!            Writes    :       2 [1.15e+00 ~ 1.1%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
314	      implicit none
315	#include "global.fh"
316	      integer g_a
317	      integer istart
318	c
319	      integer alo(2),ahi(2)
320	      integer dimm,i
321	      integer typpe
322	
323	      call ga_inquire(g_a, typpe, dimm, dimm)
324	      if(istart.gt.dimm) return
325	      alo(1)=1
326	      ahi(1)=dimm
327	      alo(2)=istart
328	      ahi(2)=dimm
329	      call nga_zero_patch(g_a, alo, ahi)
330	      call ga_distribution(g_a,
331	     D     ga_nodeid(), alo(1), ahi(1), alo(2), ahi(2))
332	      if (alo(1).gt.0 .and. alo(1).le.ahi(1)) then
333	         if(ahi(1).ge.istart) then
334	            do i=max(alo(1),istart),min(ahi(1),dimm)
335	               if(i.ge.alo(2).and.i.le.ahi(2))
336	     P              call ga_put(g_a,i,i,i,i,1d0,0)
337	            enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(337,13) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(150,12)
!   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!LOOP END
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(337,13) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(421,15)
!   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!LOOP END
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(337,13)
!   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!LOOP END
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(337,13) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(573,19)
!   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(337,13) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(574,19)
!   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!LOOP END
338	         endif
339	      endif
340	      return
341	      end
342	c     
343	      subroutine dft_eig_so(nbf_mo, g_fockso, g_moso, evals)
!INLINE REPORT: (DFT_EIG_SO) [6] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(343,18)
!  -> EXTERN: (374,16) ma_push_get_
!  -> EXTERN: (375,12) errquit_
!  -> EXTERN: (377,16) ma_push_get_
!  -> EXTERN: (378,12) errquit_
!  -> EXTERN: (379,16) ma_push_get_
!  -> EXTERN: (381,12) errquit_
!  -> EXTERN: (382,16) ma_push_get_
!  -> EXTERN: (383,12) errquit_
!  -> EXTERN: (392,15) ga_get_
!  -> EXTERN: (397,15) ga_get_
!  -> EXTERN: (405,12) zheev_
!  -> EXTERN: (408,10) ga_nodeid_
!  -> EXTERN: (415,15) ga_put_
!  -> EXTERN: (422,15) ga_put_
!  -> EXTERN: (426,12) ga_sync_
!  -> EXTERN: (429,16) ma_pop_stack_
!  -> EXTERN: (430,10) errquit_
!  -> EXTERN: (431,16) ma_pop_stack_
!  -> EXTERN: (432,10) errquit_
!  -> EXTERN: (433,16) ma_pop_stack_
!  -> EXTERN: (434,10) errquit_
!  -> EXTERN: (435,16) ma_pop_stack_
!  -> EXTERN: (436,10) errquit_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(343,18):remark #34051: REGISTER ALLOCATION : [dft_eig_so_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:343
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm4]
!        
!    Routine temporaries
!        Total         :     349
!            Global    :     108
!            Local     :     241
!        Regenerable   :     149
!        Spilled       :      13
!        
!    Routine stack
!        Variables     :     112 bytes*
!            Reads     :      17 [3.74e+00 ~ 3.7%]
!            Writes    :      10 [1.50e+00 ~ 1.5%]
!        Spills        :      56 bytes*
!            Reads     :       8 [4.68e-01 ~ 0.5%]
!            Writes    :       8 [3.16e-01 ~ 0.3%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
344	c
345	      implicit none
346	c
347	#include "errquit.fh"
348	#include "bas.fh"
349	#include "geom.fh"
350	#include "mafdecls.fh"
351	#include "stdio.fh"
352	#include "rtdb.fh"
353	#include "cdft.fh"
354	#include "global.fh"
355	#include "msgids.fh"
356	#include "util.fh"
357	#include "zora.fh" 
358	#include "case.fh"
359	c     
360	c     so
361	      integer nbf_mo 
362	      integer g_fockso(2), g_moso(2)
363	      double precision evals(*)
364	c
365	      integer la, ia            ! complex*16 a(nbf_ao, nbf_ao)
366	      integer llwork 
367	      integer lwork, iwork      ! complex*16 work(3) 
368	      integer lrwork, irwork    ! double precision rwork
369	      integer lbuff, ibuff
370	      integer info
371	      integer i,j,i1
372	c
373	c     ma for complex diagonalizer 
374	      if (.not.MA_Push_Get(MT_DCpl,nbf_mo*nbf_mo,'cpl a',la,ia))
375	     &     call errquit('dft_scf: cannot allocate cpl a',0, MA_ERR)
376	      llwork = max(1, 2*nbf_mo-1)
377	      if (.not.MA_Push_Get(MT_DCpl,llwork,'cpl work',lwork,iwork))
378	     &     call errquit('dft_scf: cannot allocate cpl work',0, MA_ERR)
379	      if (.not.MA_Push_Get(MT_Dbl,max(1,3*nbf_mo-2),'w.s',lrwork,
380	     &     irwork))
381	     &     call errquit('dft_scf: cannot allocate w.s',0, MA_ERR)
382	      if (.not.ma_push_get(mt_dbl,nbf_mo,'buff',lbuff,ibuff))
383	     &     call errquit('dft_scf:push_get failed', 13, MA_ERR)
384	c
385	c     call diagonalizer
386	      do i = 1, nbf_mo 
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(386,7)
!   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(390,7) ]
!   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(387,10)
!      remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
!      remark #15475: --- begin vector cost summary ---
!      remark #15476: scalar cost: 6 
!      remark #15477: vector cost: 3.000 
!      remark #15478: estimated potential speedup: 2.000 
!      remark #15488: --- end vector cost summary ---
!      remark #25439: unrolled with remainder by 2  
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(387,10)
!   <Remainder>
!   LOOP END
!LOOP END
387	         do j = 1, nbf_mo
388	            DCpl_mb(ia+(nbf_mo)*(i-1)+(j-1))=dcmplx(0.0, 0.0)
389	         enddo
390	      enddo
391	      do i = 1, nbf_mo 
392	         call ga_get(g_fockso(1), 1,i, i,i, dbl_mb(ibuff),1)
393	         do j=1,i 
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(393,10)
!   remark #15300: LOOP WAS VECTORIZED
!   remark #15449: unmasked aligned unit stride stores: 1 
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 12 
!   remark #15477: vector cost: 4.500 
!   remark #15478: estimated potential speedup: 2.000 
!   remark #15488: --- end vector cost summary ---
!   remark #25015: Estimate of max trip count of loop=1
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(393,10)
!<Remainder loop for vectorization>
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
394	            DCpl_mb(ia+(nbf_mo)*(i-1)+(j-1))=
395	     &           dcmplx(dbl_mb(ibuff+j-1),0d0)
396	         enddo 
397	         call ga_get(g_fockso(2), 1,i, i,i, dbl_mb(ibuff),1)
398	         do j=1,i 
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(398,10)
!   remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 18 
!   remark #15477: vector cost: 8.000 
!   remark #15478: estimated potential speedup: 1.890 
!   remark #15488: --- end vector cost summary ---
!   remark #25439: unrolled with remainder by 4  
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(398,10)
!<Remainder>
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
399	            DCpl_mb(ia+(nbf_mo)*(i-1)+(j-1))=
400	     $               DCpl_mb(ia+(nbf_mo)*(i-1)+(j-1))
401	     $           +dcmplx(0d0,dbl_mb(ibuff+j-1))
402	         enddo 
403	      enddo
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(403,7)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
404	c
405	      call zheev( 'V', 'U', nbf_mo, DCpl_mb(ia), nbf_mo, evals,
406	     $            DCpl_mb(iwork), LLWORK, Dbl_mb(irwork), INFO )
407	c
408	      if(ga_nodeid().eq.0) then
409	       do i = 1, nbf_mo
410	         do j = 1, nbf_mo 
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(410,10)
!   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15452: unmasked strided loads: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 5 
!   remark #15477: vector cost: 3.500 
!   remark #15478: estimated potential speedup: 1.000 
!   remark #15488: --- end vector cost summary ---
!   remark #25439: unrolled with remainder by 2  
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(410,10)
!<Remainder>
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
411	            dbl_mb(ibuff+j-1)=0.0d0
412	            dbl_mb(ibuff+j-1)=dble(DCpl_mb(ia+nbf_mo*(i-1)+(j-1)))
413	         enddo 
414	         i1=i
415	         call ga_put(g_moso(1),1,nbf_mo,i1,i1,dbl_mb(ibuff),1)
416	         do j = 1, nbf_mo 
417	            dbl_mb(ibuff+j-1)=0.0d0
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(417,13)
!   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15452: unmasked strided loads: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 5 
!   remark #15477: vector cost: 3.500 
!   remark #15478: estimated potential speedup: 1.000 
!   remark #15488: --- end vector cost summary ---
!   remark #25439: unrolled with remainder by 2  
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(417,13)
!<Remainder>
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
418	            dbl_mb(ibuff+j-1)=
419	     $             dimag(dcmplx(DCpl_mb(ia+nbf_mo*(i-1)+(j-1))))
420	         enddo
421	         i1=i 
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(337,13) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(421,15)
!   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!LOOP END
422	         call ga_put(g_moso(2),1,nbf_mo,i1,i1,dbl_mb(ibuff),1)
423	       enddo
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(423,8)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
424	      endif
425	c
426	      call ga_sync()
427	c
428	c     pop memory
429	      if (.not.ma_pop_stack(lbuff))
430	     &   call errquit('dft_eig_so: cannot pop lbuff',0, MA_ERR)
431	      if (.not.ma_pop_stack(lrwork))
432	     &   call errquit('dft_eig_so: cannot pop lrwork',0, MA_ERR)
433	      if (.not.ma_pop_stack(lwork))
434	     &   call errquit('dft_eig_so: cannot pop lwork',0, MA_ERR)
435	      if (.not.ma_pop_stack(la))
436	     &   call errquit('dft_eig_so: cannot pop la',0, MA_ERR)
437	c     
438	      return
439	      end
440	
441	      subroutine dft_utilscal(rtdb)
!INLINE REPORT: (DFT_UTILSCAL) [7] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(441,18)
!  -> EXTERN: (446,17) rtdb_cget_
!  -> EXTERN: (448,17) rtdb_get_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F(441,18):remark #34051: REGISTER ALLOCATION : [dft_utilscal_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_diagn.F:441
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 r15]
!        
!    Routine temporaries
!        Total         :      32
!            Global    :      12
!            Local     :      20
!        Regenerable   :      18
!        Spilled       :       1
!        
!    Routine stack
!        Variables     :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
442	      integer rtdb
443	#include "rtdb.fh"
444	#include "dft_scaleig.fh"
445	#include "mafdecls.fh"
446	      if (.not. rtdb_cget(rtdb, 'dft:scaladiag',1,yev))
447	     &     yev='d'
448	      if (.not. rtdb_get(rtdb, 'dft:scalanb',mt_int,1,nb))
449	     &     nb=0
450	
451	      end subroutine
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_DUMP_INFO

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_DUMP_INFO) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dump_info.F(1,18)
  -> EXTERN: (9,7) for_write_seq_lis_xmit
  -> EXTERN: (9,7) for_write_seq_lis
  -> EXTERN: (13,7) for_write_seq_lis
  -> EXTERN: (14,7) for_write_seq_lis_xmit
  -> EXTERN: (14,7) for_write_seq_lis
  -> EXTERN: (15,7) for_write_seq_lis_xmit
  -> EXTERN: (15,7) for_write_seq_lis
  -> EXTERN: (16,7) for_write_seq_lis_xmit
  -> EXTERN: (16,7) for_write_seq_lis
  -> EXTERN: (17,7) for_write_seq_lis_xmit
  -> EXTERN: (17,7) for_write_seq_lis
  -> EXTERN: (18,7) for_write_seq_lis_xmit
  -> EXTERN: (18,7) for_write_seq_lis
  -> EXTERN: (19,7) for_write_seq_lis_xmit
  -> EXTERN: (19,7) for_write_seq_lis
  -> EXTERN: (20,7) for_write_seq_lis_xmit
  -> EXTERN: (20,7) for_write_seq_lis
  -> EXTERN: (21,7) for_write_seq_lis_xmit
  -> EXTERN: (21,7) for_write_seq_lis
  -> EXTERN: (22,7) for_write_seq_lis_xmit
  -> EXTERN: (22,7) for_write_seq_lis
  -> EXTERN: (23,7) for_write_seq_lis_xmit
  -> EXTERN: (23,7) for_write_seq_lis
  -> EXTERN: (24,7) for_write_seq_lis_xmit
  -> EXTERN: (24,7) for_write_seq_lis
  -> EXTERN: (25,7) for_write_seq_lis_xmit
  -> EXTERN: (25,7) for_write_seq_lis
  -> EXTERN: (26,7) for_write_seq_lis_xmit
  -> EXTERN: (26,7) for_write_seq_lis
  -> EXTERN: (27,7) for_write_seq_lis_xmit
  -> EXTERN: (27,7) for_write_seq_lis
  -> EXTERN: (28,7) for_write_seq_lis_xmit
  -> EXTERN: (28,7) for_write_seq_lis
  -> EXTERN: (29,7) for_write_seq_lis_xmit
  -> EXTERN: (29,7) for_write_seq_lis
  -> EXTERN: (30,7) for_write_seq_lis_xmit
  -> EXTERN: (30,7) for_write_seq_lis
  -> EXTERN: (31,7) for_write_seq_lis_xmit
  -> EXTERN: (31,7) for_write_seq_lis
  -> EXTERN: (32,7) for_write_seq_lis_xmit
  -> EXTERN: (32,7) for_write_seq_lis
  -> EXTERN: (33,7) for_write_seq_lis_xmit
  -> EXTERN: (33,7) for_write_seq_lis
  -> EXTERN: (34,7) for_write_seq_lis_xmit
  -> EXTERN: (34,7) for_write_seq_lis
  -> EXTERN: (38,7) for_write_seq_lis
  -> EXTERN: (39,7) for_write_seq_lis_xmit
  -> EXTERN: (39,7) for_write_seq_lis
  -> EXTERN: (40,7) for_write_seq_lis_xmit
  -> EXTERN: (40,7) for_write_seq_lis
  -> EXTERN: (41,7) for_write_seq_lis_xmit
  -> EXTERN: (41,7) for_write_seq_lis
  -> EXTERN: (42,7) for_write_seq_lis_xmit
  -> EXTERN: (42,7) for_write_seq_lis
  -> EXTERN: (43,7) for_write_seq_lis_xmit
  -> EXTERN: (43,7) for_write_seq_lis
  -> EXTERN: (44,7) for_write_seq_lis_xmit
  -> EXTERN: (44,7) for_write_seq_lis
  -> EXTERN: (45,7) for_write_seq_lis_xmit
  -> EXTERN: (45,7) for_write_seq_lis
  -> EXTERN: (46,7) for_write_seq_lis_xmit
  -> EXTERN: (46,7) for_write_seq_lis
  -> EXTERN: (47,7) for_write_seq_lis_xmit
  -> EXTERN: (47,7) for_write_seq_lis
  -> EXTERN: (48,7) for_write_seq_lis_xmit
  -> EXTERN: (48,7) for_write_seq_lis
  -> EXTERN: (49,7) for_write_seq_lis_xmit
  -> EXTERN: (49,7) for_write_seq_lis
  -> EXTERN: (50,7) for_write_seq_lis_xmit
  -> EXTERN: (50,7) for_write_seq_lis
  -> EXTERN: (51,7) for_write_seq_lis_xmit
  -> EXTERN: (51,7) for_write_seq_lis
  -> EXTERN: (52,7) for_write_seq_lis_xmit
  -> EXTERN: (52,7) for_write_seq_lis
  -> EXTERN: (53,7) for_write_seq_lis_xmit
  -> EXTERN: (53,7) for_write_seq_lis
  -> EXTERN: (54,7) for_write_seq_lis_xmit
  -> EXTERN: (54,7) for_write_seq_lis
  -> EXTERN: (55,7) for_write_seq_lis_xmit
  -> EXTERN: (55,7) for_write_seq_lis
  -> EXTERN: (56,7) for_write_seq_lis_xmit
  -> EXTERN: (56,7) for_write_seq_lis
  -> EXTERN: (57,7) for_write_seq_lis_xmit
  -> EXTERN: (57,7) for_write_seq_lis
  -> EXTERN: (58,7) for_write_seq_lis_xmit
  -> EXTERN: (58,7) for_write_seq_lis
  -> EXTERN: (59,7) for_write_seq_lis_xmit
  -> EXTERN: (59,7) for_write_seq_lis
  -> EXTERN: (60,7) for_write_seq_lis_xmit
  -> EXTERN: (60,7) for_write_seq_lis
  -> EXTERN: (61,7) for_write_seq_lis_xmit
  -> EXTERN: (61,7) for_write_seq_lis
  -> EXTERN: (62,7) for_write_seq_lis_xmit
  -> EXTERN: (62,7) for_write_seq_lis
  -> EXTERN: (63,7) for_write_seq_lis_xmit
  -> EXTERN: (63,7) for_write_seq_lis
  -> EXTERN: (64,7) for_write_seq_lis_xmit
  -> EXTERN: (64,7) for_write_seq_lis
  -> EXTERN: (65,7) for_write_seq_lis_xmit
  -> EXTERN: (65,7) for_write_seq_lis
  -> EXTERN: (66,7) for_write_seq_lis_xmit
  -> EXTERN: (66,7) for_write_seq_lis
  -> EXTERN: (67,7) for_write_seq_lis_xmit
  -> EXTERN: (67,7) for_write_seq_lis
  -> EXTERN: (68,7) for_write_seq_lis_xmit
  -> EXTERN: (68,7) for_write_seq_lis
  -> EXTERN: (69,7) for_write_seq_lis_xmit
  -> EXTERN: (69,7) for_write_seq_lis
  -> EXTERN: (70,7) for_write_seq_lis_xmit
  -> EXTERN: (70,7) for_write_seq_lis
  -> EXTERN: (71,7) for_write_seq_lis_xmit
  -> EXTERN: (71,7) for_write_seq_lis
  -> EXTERN: (72,7) for_write_seq_lis_xmit
  -> EXTERN: (72,7) for_write_seq_lis
  -> EXTERN: (73,7) for_write_seq_lis_xmit
  -> EXTERN: (73,7) for_write_seq_lis
  -> EXTERN: (74,7) for_write_seq_lis_xmit
  -> EXTERN: (74,7) for_write_seq_lis
  -> EXTERN: (75,7) for_write_seq_lis_xmit
  -> EXTERN: (75,7) for_write_seq_lis
  -> EXTERN: (76,7) for_write_seq_lis_xmit
  -> EXTERN: (76,7) for_write_seq_lis
  -> EXTERN: (77,7) for_write_seq_lis_xmit
  -> EXTERN: (77,7) for_write_seq_lis
  -> EXTERN: (78,7) for_write_seq_lis_xmit
  -> EXTERN: (78,7) for_write_seq_lis
  -> EXTERN: (79,7) for_write_seq_lis_xmit
  -> EXTERN: (79,7) for_write_seq_lis
  -> EXTERN: (80,7) for_write_seq_lis_xmit
  -> EXTERN: (80,7) for_write_seq_lis
  -> EXTERN: (81,7) for_write_seq_lis_xmit
  -> EXTERN: (81,7) for_write_seq_lis
  -> EXTERN: (82,7) for_write_seq_lis_xmit
  -> EXTERN: (82,7) for_write_seq_lis
  -> EXTERN: (83,7) for_write_seq_lis_xmit
  -> EXTERN: (83,7) for_write_seq_lis
  -> EXTERN: (84,7) for_write_seq_lis_xmit
  -> EXTERN: (84,7) for_write_seq_lis
  -> EXTERN: (88,7) for_write_seq_lis
  -> EXTERN: (89,7) for_write_seq_lis_xmit
  -> EXTERN: (89,7) for_write_seq_lis
  -> EXTERN: (90,7) for_write_seq_lis_xmit
  -> EXTERN: (90,7) for_write_seq_lis
  -> EXTERN: (91,7) for_write_seq_lis_xmit
  -> EXTERN: (91,7) for_write_seq_lis
  -> EXTERN: (92,7) for_write_seq_lis_xmit
  -> EXTERN: (92,7) for_write_seq_lis
  -> EXTERN: (93,7) for_write_seq_lis_xmit
  -> EXTERN: (93,7) for_write_seq_lis
  -> EXTERN: (94,7) for_write_seq_lis_xmit
  -> EXTERN: (94,7) for_write_seq_lis
  -> EXTERN: (95,7) for_write_seq_lis_xmit
  -> EXTERN: (95,7) for_write_seq_lis
  -> EXTERN: (96,7) for_write_seq_lis_xmit
  -> EXTERN: (96,7) for_write_seq_lis
  -> EXTERN: (97,7) for_write_seq_lis_xmit
  -> EXTERN: (97,7) for_write_seq_lis
  -> EXTERN: (98,7) for_write_seq_lis_xmit
  -> EXTERN: (98,7) for_write_seq_lis
  -> EXTERN: (99,7) for_write_seq_lis_xmit
  -> EXTERN: (99,7) for_write_seq_lis
  -> EXTERN: (100,7) for_write_seq_lis_xmit
  -> EXTERN: (100,7) for_write_seq_lis
  -> EXTERN: (101,7) for_write_seq_lis_xmit
  -> EXTERN: (101,7) for_write_seq_lis
  -> EXTERN: (102,7) for_write_seq_lis_xmit
  -> EXTERN: (102,7) for_write_seq_lis
  -> EXTERN: (103,7) for_write_seq_lis_xmit
  -> EXTERN: (103,7) for_write_seq_lis
  -> EXTERN: (107,7) for_write_seq_lis
  -> EXTERN: (108,7) for_write_seq_lis_xmit
  -> EXTERN: (108,7) for_write_seq_lis
  -> EXTERN: (109,7) for_write_seq_lis_xmit
  -> EXTERN: (109,7) for_write_seq_lis
  -> EXTERN: (110,7) for_write_seq_lis_xmit
  -> EXTERN: (110,7) for_write_seq_lis
  -> EXTERN: (111,7) for_write_seq_lis_xmit
  -> EXTERN: (111,7) for_write_seq_lis


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dump_info.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_dump_info_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dump_info.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8 r13-r14]
        
    Routine temporaries
        Total         :    1238
            Global    :      12
            Local     :    1226
        Regenerable   :    1166
        Spilled       :       2
        
    Routine stack
        Variables     :    2552 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :     402 [2.74e+01 ~ 27.4%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dump_info.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	      subroutine dft_dump_info(me)
!INLINE REPORT: (DFT_DUMP_INFO) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dump_info.F(1,18)
!  -> EXTERN: (9,7) for_write_seq_lis_xmit
!  -> EXTERN: (9,7) for_write_seq_lis
!  -> EXTERN: (13,7) for_write_seq_lis
!  -> EXTERN: (14,7) for_write_seq_lis_xmit
!  -> EXTERN: (14,7) for_write_seq_lis
!  -> EXTERN: (15,7) for_write_seq_lis_xmit
!  -> EXTERN: (15,7) for_write_seq_lis
!  -> EXTERN: (16,7) for_write_seq_lis_xmit
!  -> EXTERN: (16,7) for_write_seq_lis
!  -> EXTERN: (17,7) for_write_seq_lis_xmit
!  -> EXTERN: (17,7) for_write_seq_lis
!  -> EXTERN: (18,7) for_write_seq_lis_xmit
!  -> EXTERN: (18,7) for_write_seq_lis
!  -> EXTERN: (19,7) for_write_seq_lis_xmit
!  -> EXTERN: (19,7) for_write_seq_lis
!  -> EXTERN: (20,7) for_write_seq_lis_xmit
!  -> EXTERN: (20,7) for_write_seq_lis
!  -> EXTERN: (21,7) for_write_seq_lis_xmit
!  -> EXTERN: (21,7) for_write_seq_lis
!  -> EXTERN: (22,7) for_write_seq_lis_xmit
!  -> EXTERN: (22,7) for_write_seq_lis
!  -> EXTERN: (23,7) for_write_seq_lis_xmit
!  -> EXTERN: (23,7) for_write_seq_lis
!  -> EXTERN: (24,7) for_write_seq_lis_xmit
!  -> EXTERN: (24,7) for_write_seq_lis
!  -> EXTERN: (25,7) for_write_seq_lis_xmit
!  -> EXTERN: (25,7) for_write_seq_lis
!  -> EXTERN: (26,7) for_write_seq_lis_xmit
!  -> EXTERN: (26,7) for_write_seq_lis
!  -> EXTERN: (27,7) for_write_seq_lis_xmit
!  -> EXTERN: (27,7) for_write_seq_lis
!  -> EXTERN: (28,7) for_write_seq_lis_xmit
!  -> EXTERN: (28,7) for_write_seq_lis
!  -> EXTERN: (29,7) for_write_seq_lis_xmit
!  -> EXTERN: (29,7) for_write_seq_lis
!  -> EXTERN: (30,7) for_write_seq_lis_xmit
!  -> EXTERN: (30,7) for_write_seq_lis
!  -> EXTERN: (31,7) for_write_seq_lis_xmit
!  -> EXTERN: (31,7) for_write_seq_lis
!  -> EXTERN: (32,7) for_write_seq_lis_xmit
!  -> EXTERN: (32,7) for_write_seq_lis
!  -> EXTERN: (33,7) for_write_seq_lis_xmit
!  -> EXTERN: (33,7) for_write_seq_lis
!  -> EXTERN: (34,7) for_write_seq_lis_xmit
!  -> EXTERN: (34,7) for_write_seq_lis
!  -> EXTERN: (38,7) for_write_seq_lis
!  -> EXTERN: (39,7) for_write_seq_lis_xmit
!  -> EXTERN: (39,7) for_write_seq_lis
!  -> EXTERN: (40,7) for_write_seq_lis_xmit
!  -> EXTERN: (40,7) for_write_seq_lis
!  -> EXTERN: (41,7) for_write_seq_lis_xmit
!  -> EXTERN: (41,7) for_write_seq_lis
!  -> EXTERN: (42,7) for_write_seq_lis_xmit
!  -> EXTERN: (42,7) for_write_seq_lis
!  -> EXTERN: (43,7) for_write_seq_lis_xmit
!  -> EXTERN: (43,7) for_write_seq_lis
!  -> EXTERN: (44,7) for_write_seq_lis_xmit
!  -> EXTERN: (44,7) for_write_seq_lis
!  -> EXTERN: (45,7) for_write_seq_lis_xmit
!  -> EXTERN: (45,7) for_write_seq_lis
!  -> EXTERN: (46,7) for_write_seq_lis_xmit
!  -> EXTERN: (46,7) for_write_seq_lis
!  -> EXTERN: (47,7) for_write_seq_lis_xmit
!  -> EXTERN: (47,7) for_write_seq_lis
!  -> EXTERN: (48,7) for_write_seq_lis_xmit
!  -> EXTERN: (48,7) for_write_seq_lis
!  -> EXTERN: (49,7) for_write_seq_lis_xmit
!  -> EXTERN: (49,7) for_write_seq_lis
!  -> EXTERN: (50,7) for_write_seq_lis_xmit
!  -> EXTERN: (50,7) for_write_seq_lis
!  -> EXTERN: (51,7) for_write_seq_lis_xmit
!  -> EXTERN: (51,7) for_write_seq_lis
!  -> EXTERN: (52,7) for_write_seq_lis_xmit
!  -> EXTERN: (52,7) for_write_seq_lis
!  -> EXTERN: (53,7) for_write_seq_lis_xmit
!  -> EXTERN: (53,7) for_write_seq_lis
!  -> EXTERN: (54,7) for_write_seq_lis_xmit
!  -> EXTERN: (54,7) for_write_seq_lis
!  -> EXTERN: (55,7) for_write_seq_lis_xmit
!  -> EXTERN: (55,7) for_write_seq_lis
!  -> EXTERN: (56,7) for_write_seq_lis_xmit
!  -> EXTERN: (56,7) for_write_seq_lis
!  -> EXTERN: (57,7) for_write_seq_lis_xmit
!  -> EXTERN: (57,7) for_write_seq_lis
!  -> EXTERN: (58,7) for_write_seq_lis_xmit
!  -> EXTERN: (58,7) for_write_seq_lis
!  -> EXTERN: (59,7) for_write_seq_lis_xmit
!  -> EXTERN: (59,7) for_write_seq_lis
!  -> EXTERN: (60,7) for_write_seq_lis_xmit
!  -> EXTERN: (60,7) for_write_seq_lis
!  -> EXTERN: (61,7) for_write_seq_lis_xmit
!  -> EXTERN: (61,7) for_write_seq_lis
!  -> EXTERN: (62,7) for_write_seq_lis_xmit
!  -> EXTERN: (62,7) for_write_seq_lis
!  -> EXTERN: (63,7) for_write_seq_lis_xmit
!  -> EXTERN: (63,7) for_write_seq_lis
!  -> EXTERN: (64,7) for_write_seq_lis_xmit
!  -> EXTERN: (64,7) for_write_seq_lis
!  -> EXTERN: (65,7) for_write_seq_lis_xmit
!  -> EXTERN: (65,7) for_write_seq_lis
!  -> EXTERN: (66,7) for_write_seq_lis_xmit
!  -> EXTERN: (66,7) for_write_seq_lis
!  -> EXTERN: (67,7) for_write_seq_lis_xmit
!  -> EXTERN: (67,7) for_write_seq_lis
!  -> EXTERN: (68,7) for_write_seq_lis_xmit
!  -> EXTERN: (68,7) for_write_seq_lis
!  -> EXTERN: (69,7) for_write_seq_lis_xmit
!  -> EXTERN: (69,7) for_write_seq_lis
!  -> EXTERN: (70,7) for_write_seq_lis_xmit
!  -> EXTERN: (70,7) for_write_seq_lis
!  -> EXTERN: (71,7) for_write_seq_lis_xmit
!  -> EXTERN: (71,7) for_write_seq_lis
!  -> EXTERN: (72,7) for_write_seq_lis_xmit
!  -> EXTERN: (72,7) for_write_seq_lis
!  -> EXTERN: (73,7) for_write_seq_lis_xmit
!  -> EXTERN: (73,7) for_write_seq_lis
!  -> EXTERN: (74,7) for_write_seq_lis_xmit
!  -> EXTERN: (74,7) for_write_seq_lis
!  -> EXTERN: (75,7) for_write_seq_lis_xmit
!  -> EXTERN: (75,7) for_write_seq_lis
!  -> EXTERN: (76,7) for_write_seq_lis_xmit
!  -> EXTERN: (76,7) for_write_seq_lis
!  -> EXTERN: (77,7) for_write_seq_lis_xmit
!  -> EXTERN: (77,7) for_write_seq_lis
!  -> EXTERN: (78,7) for_write_seq_lis_xmit
!  -> EXTERN: (78,7) for_write_seq_lis
!  -> EXTERN: (79,7) for_write_seq_lis_xmit
!  -> EXTERN: (79,7) for_write_seq_lis
!  -> EXTERN: (80,7) for_write_seq_lis_xmit
!  -> EXTERN: (80,7) for_write_seq_lis
!  -> EXTERN: (81,7) for_write_seq_lis_xmit
!  -> EXTERN: (81,7) for_write_seq_lis
!  -> EXTERN: (82,7) for_write_seq_lis_xmit
!  -> EXTERN: (82,7) for_write_seq_lis
!  -> EXTERN: (83,7) for_write_seq_lis_xmit
!  -> EXTERN: (83,7) for_write_seq_lis
!  -> EXTERN: (84,7) for_write_seq_lis_xmit
!  -> EXTERN: (84,7) for_write_seq_lis
!  -> EXTERN: (88,7) for_write_seq_lis
!  -> EXTERN: (89,7) for_write_seq_lis_xmit
!  -> EXTERN: (89,7) for_write_seq_lis
!  -> EXTERN: (90,7) for_write_seq_lis_xmit
!  -> EXTERN: (90,7) for_write_seq_lis
!  -> EXTERN: (91,7) for_write_seq_lis_xmit
!  -> EXTERN: (91,7) for_write_seq_lis
!  -> EXTERN: (92,7) for_write_seq_lis_xmit
!  -> EXTERN: (92,7) for_write_seq_lis
!  -> EXTERN: (93,7) for_write_seq_lis_xmit
!  -> EXTERN: (93,7) for_write_seq_lis
!  -> EXTERN: (94,7) for_write_seq_lis_xmit
!  -> EXTERN: (94,7) for_write_seq_lis
!  -> EXTERN: (95,7) for_write_seq_lis_xmit
!  -> EXTERN: (95,7) for_write_seq_lis
!  -> EXTERN: (96,7) for_write_seq_lis_xmit
!  -> EXTERN: (96,7) for_write_seq_lis
!  -> EXTERN: (97,7) for_write_seq_lis_xmit
!  -> EXTERN: (97,7) for_write_seq_lis
!  -> EXTERN: (98,7) for_write_seq_lis_xmit
!  -> EXTERN: (98,7) for_write_seq_lis
!  -> EXTERN: (99,7) for_write_seq_lis_xmit
!  -> EXTERN: (99,7) for_write_seq_lis
!  -> EXTERN: (100,7) for_write_seq_lis_xmit
!  -> EXTERN: (100,7) for_write_seq_lis
!  -> EXTERN: (101,7) for_write_seq_lis_xmit
!  -> EXTERN: (101,7) for_write_seq_lis
!  -> EXTERN: (102,7) for_write_seq_lis_xmit
!  -> EXTERN: (102,7) for_write_seq_lis
!  -> EXTERN: (103,7) for_write_seq_lis_xmit
!  -> EXTERN: (103,7) for_write_seq_lis
!  -> EXTERN: (107,7) for_write_seq_lis
!  -> EXTERN: (108,7) for_write_seq_lis_xmit
!  -> EXTERN: (108,7) for_write_seq_lis
!  -> EXTERN: (109,7) for_write_seq_lis_xmit
!  -> EXTERN: (109,7) for_write_seq_lis
!  -> EXTERN: (110,7) for_write_seq_lis_xmit
!  -> EXTERN: (110,7) for_write_seq_lis
!  -> EXTERN: (111,7) for_write_seq_lis_xmit
!  -> EXTERN: (111,7) for_write_seq_lis
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dump_info.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_dump_info_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dump_info.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :    8[ rax rdx rcx rsi rdi r8 r13-r14]
!        
!    Routine temporaries
!        Total         :    1238
!            Global    :      12
!            Local     :    1226
!        Regenerable   :    1166
!        Spilled       :       2
!        
!    Routine stack
!        Variables     :    2552 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :     402 [2.74e+01 ~ 27.4%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	c
3	      implicit none
4	c
5	      integer i, me
6	c      
7	#include "cdft.fh"
8	c
9	      write(*,*)' me = ',me
10	c
11	c     Logicals
12	c
13	      write(*,*)' LOGICALS '
14	      write(*,*)' nodamping = ', nodamping
15	      write(*,*)' nolevelshifting = ', nolevelshifting
16	      write(*,*)' nodiis = ', nodiis
17	      write(*,*)' ltight = ', ltight
18	      write(*,*)' lmaxov = ', lmaxov
19	      write(*,*)' incore = ', incore
20	      write(*,*)' ldelley = ', ldelley
21	      write(*,*)' store_wght = ', store_wght
22	      write(*,*)' XCFIT = ', XCFIT
23	      write(*,*)' CDFIT = ', CDFIT
24	      write(*,*)' levelshift = ', levelshift
25	      write(*,*)' damp = ', damp
26	      write(*,*)' diis = ', diis
27	      write(*,*)' direct = ', direct
28	      write(*,*)' oskel = ', oskel
29	      write(*,*)' oadapt = ', oadapt
30	      write(*,*)' lcfac(i) = ', (lcfac(i),i=1,numfunc)
31	      write(*,*)' nlcfac(i) = ', (nlcfac(i),i=1,numfunc)
32	      write(*,*)' lxfac(i) = ', (lxfac(i),i=1,numfunc)
33	      write(*,*)' nlxfac(i) = ', (nlxfac(i),i=1,numfunc)
34	      write(*,*)' xccomb(i) = ', (xccomb(i),i=1,numfunc)
35	c
36	c     Integers
37	c
38	      write(*,*)' INTEGERS '
39	      write(*,*)' iAOacc = ', iAOacc
40	      write(*,*)' iCDacc = ', iXCacc
41	      write(*,*)' iXCacc = ', iXCacc
42	      write(*,*)' itol2e = ', itol2e
43	      write(*,*)' imull = ', imull
44	      write(*,*)' iangquad = ', iangquad
45	      write(*,*)' iterations = ', iterations
46	      write(*,*)' iguess = ', iguess
47	      write(*,*)' mult = ', mult
48	      write(*,*)' ipol = ', ipol
49	      write(*,*)' nfock = ', nfock
50	      write(*,*)' ncydp = ', ncydp
51	      write(*,*)' ncysh = ', ncysh
52	      write(*,*)' ncyds = ', ncyds
53	      write(*,*)' noio = ', noio
54	      write(*,*)' ndamp = ', ndamp
55	      write(*,*)' idecomp = ', idecomp
56	      write(*,*)' nagrid = ', nagrid
57	      write(*,*)' nquad_task = ', nquad_task
58	      write(*,*)' nrinc = ', nrinc
59	      write(*,*)' nrmax = ', nrmax
60	      write(*,*)' geom = ', geom
61	      write(*,*)' ncenters = ', ncenters
62	      write(*,*)' nbf = ', nbf
63	      write(*,*)' nradpts = ', nradpts
64	      write(*,*)' nang_leb_pts = ', nang_leb_pts
65	      write(*,*)' nbf_ao = ', nbf_ao
66	      write(*,*)' nbf_cd = ', nbf_cd
67	      write(*,*)' nbf_xc = ', nbf_xc
68	      write(*,*)' MXqshells = ', MXqshells
69	      write(*,*)' MXrad = ', MXrad
70	      write(*,*)' MXagrid = ', MXagrid
71	      write(*,*)' MXtheta = ', MXtheta
72	      write(*,*)' MXphi = ', MXphi
73	      write(*,*)' IAC_MAX = ', IAC_MAX
74	      write(*,*)' nqshells = ', nqshells
75	      write(*,*)' iqrot = ', iqrot
76	      write(*,*)' ntypes = ', ntypes
77	      write(*,*)' nquad_task = ', nquad_task
78	      write(*,*)' dft_ntags_bsmx = ', dft_ntags_bsmx
79	      write(*,*)' dft_max_cent = ', dft_max_cent
80	      write(*,*)' AO_bas_han = ', AO_bas_han
81	      write(*,*)' CD_bas_han = ', CD_bas_han
82	      write(*,*)' XC_bas_han = ', XC_bas_han
83	      write(*,*)' nrad: ',(nrad(i), i = 1, dft_ntags_bsmx)
84	      write(*,*)' nang: ',(nang(i), i = 1, dft_ntags_bsmx)
85	c
86	c     Doubles
87	c
88	      write(*,*)' DOUBLES '
89	      write(*,*)' rlshift = ', rlshift
90	      write(*,*)' dampon = ', dampon
91	      write(*,*)' dampoff = ', dampoff
92	      write(*,*)' levlon = ', levlon
93	      write(*,*)' levloff = ', levloff
94	      write(*,*)' diison = ', diison
95	      write(*,*)' diisoff = ', diisoff
96	      write(*,*)' rcharge = ', rcharge
97	      write(*,*)' tol_rho = ', tol_rho
98	      write(*,*)' cfac = ', (cfac(i),i=1,numfunc)
99	      write(*,*)' xfac =', (xfac(i),i=1,numfunc)
100	      write(*,*)' hl_tol = ', hl_tol
101	      write(*,*)' e_conv = ', e_conv
102	      write(*,*)' d_conv = ', d_conv
103	      write(*,*)' g_conv = ', g_conv
104	c
105	c     Characters
106	c
107	      write(*,*)' CHARACTERS '
108	      write(*,*)' title = ', title
109	      write(*,*)' gridtype = ', gridtype
110	      write(*,*)' xname = ', xname
111	      write(*,*)' cname = ', cname
112	c
113	      return
114	      end
115	c $Id$
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_FANT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_FANT) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fant.F(2,33)
  -> EXTERN: (33,20) geom_cent_get_
  -> EXTERN: (34,23) errquit_
  -> EXTERN: (37,23) geom_cent_get_
  -> EXTERN: (38,26) errquit_
  -> EXTERN: (42,35) exp
  -> EXTERN: (47,10) ga_nodeid_
  -> EXTERN: (48,12) for_write_seq_lis
  -> EXTERN: (48,12) for_write_seq_lis_xmit


    Report from: Loop nest & Vector optimizations [loop, vec]



Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fant.F(45,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fant.F(44,10)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fant.F(2,33):remark #34051: REGISTER ALLOCATION : [dft_fant_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fant.F:2

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r9 r13-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     102
            Global    :      28
            Local     :      74
        Regenerable   :      51
        Spilled       :       6
        
    Routine stack
        Variables     :     120 bytes*
            Reads     :       3 [3.23e+00 ~ 3.2%]
            Writes    :       8 [3.48e+00 ~ 3.5%]
        Spills        :      48 bytes*
            Reads     :       8 [2.88e+00 ~ 2.9%]
            Writes    :       7 [2.84e+00 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fant.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	c
2	      double precision function dft_fant(geom,natoms,a,d)
!INLINE REPORT: (DFT_FANT) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fant.F(2,33)
!  -> EXTERN: (33,20) geom_cent_get_
!  -> EXTERN: (34,23) errquit_
!  -> EXTERN: (37,23) geom_cent_get_
!  -> EXTERN: (38,26) errquit_
!  -> EXTERN: (42,35) exp
!  -> EXTERN: (47,10) ga_nodeid_
!  -> EXTERN: (48,12) for_write_seq_lis
!  -> EXTERN: (48,12) for_write_seq_lis_xmit
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fant.F(2,33):remark #34051: REGISTER ALLOCATION : [dft_fant_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fant.F:2
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r9 r13-r15 zmm0-zmm2]
!        
!    Routine temporaries
!        Total         :     102
!            Global    :      28
!            Local     :      74
!        Regenerable   :      51
!        Spilled       :       6
!        
!    Routine stack
!        Variables     :     120 bytes*
!            Reads     :       3 [3.23e+00 ~ 3.2%]
!            Writes    :       8 [3.48e+00 ~ 3.5%]
!        Spills        :      48 bytes*
!            Reads     :       8 [2.88e+00 ~ 2.9%]
!            Writes    :       7 [2.84e+00 ~ 2.8%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
3	c
4	C     Bonacic-Kouteck, V.; Cespiva, L.; Fantucci, P.; Pittner, J.; Kouteck, J. J. 
5	C     Chem. Phys. 1994, 98, 490.
6	C     Mitric, R.; Hartmann, M.; Stanca, B.; Bonacic-Koutecky, V.; Fantucci, P.;
7	C     J. Phys. Chem. A.; (Article); 2001; 105(39); 8892-8905
8	C     The core-core repulsion has been corrected according to
9	C     (CC(rij) ) l/rij + D exp(-arij)). 
10	C     Constants D and a obtained for 1e-RECP's from the fitting procedure
11	C     described in Appendix A necessery for corection of core-core potential: 
12	C     DAg-Ag ) 1619.887392, aAg-Ag ) 2.49630105, 
13	C     DAu-Au ) 1911.131090, aAu-Au ) 2.46590129, 
14	C     DAu-Ag ) 1765.509532, aAu-Ag ) 2.48110117. 
15	c
16	      implicit none
17	c
18	#include "errquit.fh"
19	#include "geom.fh"
20	#include "global.fh"
21	#include "stdio.fh"
22	c
23	      integer geom,natoms
24	      double precision a,d
25	c
26	      integer i,j
27	      double precision qi,qj
28	      double precision xi(3),xj(3),rij
29	      character*16 tag
30	c     
31	      dft_fant=0d0
32	      do i=1,natoms
33	         if (.not. geom_cent_get(geom, i, tag, 
34	     &        xi, qi))call errquit
35	     &        ('dft_fant: geom_cent_get failed', 0, GEOM_ERR)
36	         do j=1,i-1
37	            if (.not. geom_cent_get(geom, j, tag, 
38	     &           xj, qj))call errquit
39	     &           ('dft_fant: geom_cent_get failed', 0, GEOM_ERR)
40	            rij=sqrt((xi(1)-xj(1))**2+(xi(2)-xj(2))**2+
41	     +           (xi(3)-xj(3))**2)
42	            dft_fant=dft_fant + d*exp(-a*rij)
43	
44	         enddo
45	      enddo
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fant.F(45,7)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fant.F(44,10)
!      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!   LOOP END
!LOOP END
46	c
47	      if(ga_nodeid().eq.0)
48	     W     write(luout,*) 
49	     W     ' Bonacic-Koutecky Fantucci-Repulsive Term ',dft_fant
50	c
51	      return
52	      end
53	c $Id$
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_PRINTINFO

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_PRINTINFO) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_printinfo.F(1,18)
  -> EXTERN: (17,16) util_print_
  -> EXTERN: (19,11) ga_nodeid_
  -> EXTERN: (20,14) util_print_
  -> EXTERN: (21,22) bas_summary_print_
  -> EXTERN: (22,18) errquit_
  -> EXTERN: (25,13) for_write_seq_lis
  -> EXTERN: (27,27) util_print_
  -> EXTERN: (28,18) sym_print_char_table_
  -> EXTERN: (30,27) util_print_
  -> EXTERN: (31,18) sym_bas_irreps_
  -> EXTERN: (33,15) util_flush_
  -> EXTERN: (38,11) ga_nodeid_
  -> EXTERN: (39,14) util_print_
  -> EXTERN: (40,23) geom_print_
  -> EXTERN: (41,15) errquit_
  -> EXTERN: (42,13) for_write_seq_lis
  -> EXTERN: (44,14) util_print_
  -> EXTERN: (45,18) sym_print_all_
  -> EXTERN: (47,13) for_write_seq_lis
  -> EXTERN: (49,14) util_print_
  -> EXTERN: (50,23) bas_print_
  -> EXTERN: (51,18) errquit_
  -> EXTERN: (52,13) for_write_seq_lis
  -> EXTERN: (54,14) util_print_
  -> EXTERN: (55,15) ga_nodeid_
  -> EXTERN: (56,18) bas_print_labels_
  -> EXTERN: (58,14) util_print_
  -> EXTERN: (59,23) gbs_map_print_
  -> EXTERN: (60,18) errquit_
  -> EXTERN: (61,13) for_write_seq_lis
  -> EXTERN: (63,15) util_flush_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_printinfo.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_printinfo_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_printinfo.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :     208
            Global    :      41
            Local     :     167
        Regenerable   :     170
        Spilled       :       1
        
    Routine stack
        Variables     :      64 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       5 [4.92e-01 ~ 0.5%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_printinfo.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	      subroutine dft_printinfo()
!INLINE REPORT: (DFT_PRINTINFO) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_printinfo.F(1,18)
!  -> EXTERN: (17,16) util_print_
!  -> EXTERN: (19,11) ga_nodeid_
!  -> EXTERN: (20,14) util_print_
!  -> EXTERN: (21,22) bas_summary_print_
!  -> EXTERN: (22,18) errquit_
!  -> EXTERN: (25,13) for_write_seq_lis
!  -> EXTERN: (27,27) util_print_
!  -> EXTERN: (28,18) sym_print_char_table_
!  -> EXTERN: (30,27) util_print_
!  -> EXTERN: (31,18) sym_bas_irreps_
!  -> EXTERN: (33,15) util_flush_
!  -> EXTERN: (38,11) ga_nodeid_
!  -> EXTERN: (39,14) util_print_
!  -> EXTERN: (40,23) geom_print_
!  -> EXTERN: (41,15) errquit_
!  -> EXTERN: (42,13) for_write_seq_lis
!  -> EXTERN: (44,14) util_print_
!  -> EXTERN: (45,18) sym_print_all_
!  -> EXTERN: (47,13) for_write_seq_lis
!  -> EXTERN: (49,14) util_print_
!  -> EXTERN: (50,23) bas_print_
!  -> EXTERN: (51,18) errquit_
!  -> EXTERN: (52,13) for_write_seq_lis
!  -> EXTERN: (54,14) util_print_
!  -> EXTERN: (55,15) ga_nodeid_
!  -> EXTERN: (56,18) bas_print_labels_
!  -> EXTERN: (58,14) util_print_
!  -> EXTERN: (59,23) gbs_map_print_
!  -> EXTERN: (60,18) errquit_
!  -> EXTERN: (61,13) for_write_seq_lis
!  -> EXTERN: (63,15) util_flush_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_printinfo.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_printinfo_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_printinfo.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :    8[ rax rdx rcx rbx rsi rdi r8-r9]
!        
!    Routine temporaries
!        Total         :     208
!            Global    :      41
!            Local     :     167
!        Regenerable   :     170
!        Spilled       :       1
!        
!    Routine stack
!        Variables     :      64 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       5 [4.92e-01 ~ 0.5%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	C$Id$
3	      implicit none
4	#include "errquit.fh"
5	#include "mafdecls.fh"
6	#include "global.fh"
7	#include "bas.fh"
8	#include "geom.fh"
9	#include "util.fh"
10	#include "sym.fh"
11	#include "cdft.fh"
12	
13	      logical oprint
14	      integer nbf_per_ir(20)
15	
16	
17	      oprint = util_print('information', print_low)
18	
19	      if (ga_nodeid().eq.0 .and. oprint) then
20	         if (util_print('basis summary', print_default)) then
21	            if (.not.bas_summary_print(ao_bas_han))
22	     &           call errquit('dft: basis summary print failed',911,
23	     &       BASIS_ERR)
24	         else
25	            write(6,*)
26	         endif
27	         if (oadapt .and. util_print('char table', print_high)) then
28	            call sym_print_char_table(geom)
29	         endif
30	         if (oadapt .and. util_print('basis sym', print_default)) then
31	            call sym_bas_irreps(ao_bas_han, .true., nbf_per_ir)
32	         endif
33	         call util_flush(6)
34	      endif
35	c
36	c     Print out other info as requested by user
37	c
38	      if (ga_nodeid() .eq. 0) then
39	         if (util_print('geometry',print_high)) then
40	            if (.not. geom_print(geom))
41	     $        call errquit('dft: geom_print', 0, GEOM_ERR)
42	            write(6,*)
43	         endif
44	         if (util_print('symmetry', print_debug)) then
45	            call sym_print_all(geom, .true., .true., .true., 
46	     $           .true., .true.)
47	            write(6,*)
48	         endif
49	         if (util_print('basis', print_high)) then
50	            if (.not. bas_print(ao_bas_han)) 
51	     $           call errquit('dft: bas_print', 0, BASIS_ERR)
52	            write(6,*)
53	         endif
54	         if (util_print('basis labels',print_high) .and.
55	     $        ga_nodeid().eq.0) then
56	            call bas_print_labels(ao_bas_han)
57	         endif
58	         if (util_print('geombas', print_debug)) then
59	            if (.not. gbs_map_print(ao_bas_han)) 
60	     $           call errquit('dft:gmp', 0, BASIS_ERR)
61	            write(6,*)
62	         endif
63	         call util_flush(6)
64	      endif
65	         return
66	         end
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_FOCK_EFIELD

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_FOCK_EFIELD) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(8,18)
  -> EXTERN: (47,12) ga_nodeid_
  -> EXTERN: (52,12) __resetsp_inlined
  -> EXTERN: (52,12) ga_check_handle_
  -> EXTERN: (52,12) __getsp_inlined
  -> EXTERN: (53,17) memmove
  -> EXTERN: (53,17) _alloca
  -> EXTERN: (55,12) ga_inquire_
  -> EXTERN: (58,12) errquit_
  -> EXTERN: (58,12) __resetsp_inlined
  -> EXTERN: (58,12) __getsp_inlined
  -> EXTERN: (58,31) _alloca
  -> EXTERN: (58,31) memmove
  -> EXTERN: (61,12) errquit_
  -> EXTERN: (61,12) __resetsp_inlined
  -> EXTERN: (61,12) __getsp_inlined
  -> EXTERN: (61,31) _alloca
  -> EXTERN: (61,31) memmove
  -> EXTERN: (64,12) errquit_
  -> EXTERN: (64,12) __resetsp_inlined
  -> EXTERN: (64,12) __getsp_inlined
  -> EXTERN: (64,31) _alloca
  -> EXTERN: (64,31) memmove
  -> EXTERN: (66,17) bas_check_handle_
  -> EXTERN: (67,12) errquit_
  -> EXTERN: (67,12) __resetsp_inlined
  -> EXTERN: (67,12) __getsp_inlined
  -> EXTERN: (67,31) _alloca
  -> EXTERN: (67,31) memmove
  -> EXTERN: (73,17) ga_duplicate_
  -> EXTERN: (74,12) errquit_
  -> EXTERN: (74,12) __resetsp_inlined
  -> EXTERN: (74,12) __getsp_inlined
  -> EXTERN: (74,31) _alloca
  -> EXTERN: (74,31) memmove
  -> EXTERN: (75,17) ga_duplicate_
  -> EXTERN: (76,12) errquit_
  -> EXTERN: (76,12) __resetsp_inlined
  -> EXTERN: (76,12) __getsp_inlined
  -> EXTERN: (76,31) _alloca
  -> EXTERN: (76,31) memmove
  -> EXTERN: (77,17) ga_duplicate_
  -> EXTERN: (78,12) errquit_
  -> EXTERN: (78,12) __resetsp_inlined
  -> EXTERN: (78,12) __getsp_inlined
  -> EXTERN: (78,31) _alloca
  -> EXTERN: (78,31) memmove
  -> EXTERN: (80,17) ga_duplicate_
  -> EXTERN: (81,12) errquit_
  -> EXTERN: (81,12) __resetsp_inlined
  -> EXTERN: (81,12) __getsp_inlined
  -> EXTERN: (81,31) _alloca
  -> EXTERN: (81,31) memmove
  -> EXTERN: (85,12) ga_fill_
  -> EXTERN: (91,11) rtdb_get_
  -> EXTERN: (95,15) __getsp_inlined
  -> EXTERN: (95,15) errquit_
  -> EXTERN: (95,15) __resetsp_inlined
  -> EXTERN: (95,34) _alloca
  -> EXTERN: (95,34) memmove
  -> EXTERN: (98,20) bas_numcont_
  -> EXTERN: (99,15) errquit_
  -> EXTERN: (99,15) __getsp_inlined
  -> EXTERN: (99,15) __resetsp_inlined
  -> EXTERN: (99,34) memmove
  -> EXTERN: (99,34) _alloca
  -> EXTERN: (104,23) bas_continfo_
  -> EXTERN: (106,18) errquit_
  -> EXTERN: (106,18) __resetsp_inlined
  -> EXTERN: (106,18) __getsp_inlined
  -> EXTERN: (106,36) _alloca
  -> EXTERN: (106,36) memmove
  -> EXTERN: (108,22) ma_push_get_
  -> EXTERN: (109,18) errquit_
  -> EXTERN: (109,18) __resetsp_inlined
  -> EXTERN: (109,18) __getsp_inlined
  -> EXTERN: (109,36) _alloca
  -> EXTERN: (109,36) memmove
  -> EXTERN: (111,23) bas_cn2bfr_
  -> EXTERN: (112,18) errquit_
  -> EXTERN: (112,18) __resetsp_inlined
  -> EXTERN: (112,18) __getsp_inlined
  -> EXTERN: (112,37) _alloca
  -> EXTERN: (112,37) memmove
  -> EXTERN: (114,18) dfill_
  -> EXTERN: (116,23) bas_get_exponent_
  -> EXTERN: (117,18) errquit_
  -> EXTERN: (117,18) __resetsp_inlined
  -> EXTERN: (117,18) __getsp_inlined
  -> EXTERN: (117,37) _alloca
  -> EXTERN: (117,37) memmove
  -> EXTERN: (150,24) ga_fill_patch_
  -> EXTERN: (151,24) ga_fill_patch_
  -> EXTERN: (155,18) for_write_seq_fmt_xmit
  -> EXTERN: (155,18) for_write_seq_fmt_xmit
  -> EXTERN: (155,18) for_write_seq_fmt_xmit
  -> EXTERN: (155,18) for_write_seq_fmt_xmit
  -> EXTERN: (155,18) for_write_seq_fmt_xmit
  -> EXTERN: (155,18) for_write_seq_fmt_xmit
  -> EXTERN: (155,18) for_write_seq_fmt_xmit
  -> EXTERN: (155,18) for_write_seq_fmt
  -> EXTERN: (161,23) ma_pop_stack_
  -> EXTERN: (162,18) __resetsp_inlined
  -> EXTERN: (162,18) errquit_
  -> EXTERN: (162,18) __getsp_inlined
  -> EXTERN: (162,37) memmove
  -> EXTERN: (162,37) _alloca
  -> EXTERN: (171,12) ga_zero_
  -> EXTERN: (172,12) ga_zero_
  -> EXTERN: (173,12) ga_zero_
  -> EXTERN: (175,12) int_dip_ga_
  -> EXTERN: (178,12) ga_elem_multiply_
  -> EXTERN: (179,12) ga_elem_multiply_
  -> EXTERN: (180,12) ga_elem_multiply_
  -> EXTERN: (187,15) ga_norm_infinity_
  -> EXTERN: (189,15) ga_scale_
  -> EXTERN: (191,15) ga_norm_infinity_
  -> EXTERN: (193,15) ga_scale_
  -> EXTERN: (195,15) ga_norm_infinity_
  -> EXTERN: (197,15) ga_scale_
  -> EXTERN: (203,12) ga_zero_
  -> EXTERN: (204,12) ga_dadd_
  -> EXTERN: (205,12) ga_dadd_
  -> EXTERN: (206,12) ga_dadd_
  -> EXTERN: (217,17) ga_destroy_
  -> EXTERN: (218,12) errquit_
  -> EXTERN: (218,12) __resetsp_inlined
  -> EXTERN: (218,12) __getsp_inlined
  -> EXTERN: (218,31) _alloca
  -> EXTERN: (218,31) memmove
  -> EXTERN: (219,17) ga_destroy_
  -> EXTERN: (220,12) errquit_
  -> EXTERN: (220,12) __resetsp_inlined
  -> EXTERN: (220,12) __getsp_inlined
  -> EXTERN: (220,31) _alloca
  -> EXTERN: (220,31) memmove
  -> EXTERN: (221,17) ga_destroy_
  -> EXTERN: (222,12) errquit_
  -> EXTERN: (222,12) __resetsp_inlined
  -> EXTERN: (222,12) __getsp_inlined
  -> EXTERN: (222,31) _alloca
  -> EXTERN: (222,31) memmove
  -> EXTERN: (223,17) ga_destroy_
  -> EXTERN: (224,12) errquit_
  -> EXTERN: (224,12) __resetsp_inlined
  -> EXTERN: (224,12) __getsp_inlined
  -> EXTERN: (224,31) _alloca
  -> EXTERN: (224,31) memmove


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(143,13)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 2.100 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(143,13)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=2
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(163,10)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(152,16)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(53,17):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(53,17):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(58,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(58,31):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(224,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(224,31):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(222,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(222,31):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(220,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(220,31):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(218,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(218,31):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(162,37):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(162,37):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(117,37):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(117,37):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(112,37):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(112,37):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(109,36):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(109,36):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(106,36):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(106,36):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(99,34):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(99,34):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(95,34):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(95,34):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(81,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(81,31):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(78,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(78,31):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(76,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(76,31):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(74,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(74,31):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(67,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(67,31):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(64,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(64,31):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(61,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(61,31):remark #34026: call to memmove implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(8,18):remark #34051: REGISTER ALLOCATION : [dft_fock_efield_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F:8

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     635
            Global    :     143
            Local     :     492
        Regenerable   :     412
        Spilled       :      18
        
    Routine stack
        Variables     :     328 bytes*
            Reads     :      22 [4.21e+00 ~ 4.2%]
            Writes    :      20 [2.33e+00 ~ 2.3%]
        Spills        :     104 bytes*
            Reads     :      14 [5.31e-01 ~ 0.5%]
            Writes    :      13 [6.07e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	C     
2	C     Computes -D.E (dipole coupling to a uniform external applied
3	C     electric field), which can be added to the Fock matrix in the AO
4	C     basis.
5	C
6	C     The input matrix g_ddote will be replaced with -D.E.
7	C
8	      subroutine dft_fock_efield (rtdb, efield, g_ddote, lscale)
!INLINE REPORT: (DFT_FOCK_EFIELD) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(8,18)
!  -> EXTERN: (47,12) ga_nodeid_
!  -> EXTERN: (52,12) __resetsp_inlined
!  -> EXTERN: (52,12) ga_check_handle_
!  -> EXTERN: (52,12) __getsp_inlined
!  -> EXTERN: (53,17) memmove
!  -> EXTERN: (53,17) _alloca
!  -> EXTERN: (55,12) ga_inquire_
!  -> EXTERN: (58,12) errquit_
!  -> EXTERN: (58,12) __resetsp_inlined
!  -> EXTERN: (58,12) __getsp_inlined
!  -> EXTERN: (58,31) _alloca
!  -> EXTERN: (58,31) memmove
!  -> EXTERN: (61,12) errquit_
!  -> EXTERN: (61,12) __resetsp_inlined
!  -> EXTERN: (61,12) __getsp_inlined
!  -> EXTERN: (61,31) _alloca
!  -> EXTERN: (61,31) memmove
!  -> EXTERN: (64,12) errquit_
!  -> EXTERN: (64,12) __resetsp_inlined
!  -> EXTERN: (64,12) __getsp_inlined
!  -> EXTERN: (64,31) _alloca
!  -> EXTERN: (64,31) memmove
!  -> EXTERN: (66,17) bas_check_handle_
!  -> EXTERN: (67,12) errquit_
!  -> EXTERN: (67,12) __resetsp_inlined
!  -> EXTERN: (67,12) __getsp_inlined
!  -> EXTERN: (67,31) _alloca
!  -> EXTERN: (67,31) memmove
!  -> EXTERN: (73,17) ga_duplicate_
!  -> EXTERN: (74,12) errquit_
!  -> EXTERN: (74,12) __resetsp_inlined
!  -> EXTERN: (74,12) __getsp_inlined
!  -> EXTERN: (74,31) _alloca
!  -> EXTERN: (74,31) memmove
!  -> EXTERN: (75,17) ga_duplicate_
!  -> EXTERN: (76,12) errquit_
!  -> EXTERN: (76,12) __resetsp_inlined
!  -> EXTERN: (76,12) __getsp_inlined
!  -> EXTERN: (76,31) _alloca
!  -> EXTERN: (76,31) memmove
!  -> EXTERN: (77,17) ga_duplicate_
!  -> EXTERN: (78,12) errquit_
!  -> EXTERN: (78,12) __resetsp_inlined
!  -> EXTERN: (78,12) __getsp_inlined
!  -> EXTERN: (78,31) _alloca
!  -> EXTERN: (78,31) memmove
!  -> EXTERN: (80,17) ga_duplicate_
!  -> EXTERN: (81,12) errquit_
!  -> EXTERN: (81,12) __resetsp_inlined
!  -> EXTERN: (81,12) __getsp_inlined
!  -> EXTERN: (81,31) _alloca
!  -> EXTERN: (81,31) memmove
!  -> EXTERN: (85,12) ga_fill_
!  -> EXTERN: (91,11) rtdb_get_
!  -> EXTERN: (95,15) __getsp_inlined
!  -> EXTERN: (95,15) errquit_
!  -> EXTERN: (95,15) __resetsp_inlined
!  -> EXTERN: (95,34) _alloca
!  -> EXTERN: (95,34) memmove
!  -> EXTERN: (98,20) bas_numcont_
!  -> EXTERN: (99,15) errquit_
!  -> EXTERN: (99,15) __getsp_inlined
!  -> EXTERN: (99,15) __resetsp_inlined
!  -> EXTERN: (99,34) memmove
!  -> EXTERN: (99,34) _alloca
!  -> EXTERN: (104,23) bas_continfo_
!  -> EXTERN: (106,18) errquit_
!  -> EXTERN: (106,18) __resetsp_inlined
!  -> EXTERN: (106,18) __getsp_inlined
!  -> EXTERN: (106,36) _alloca
!  -> EXTERN: (106,36) memmove
!  -> EXTERN: (108,22) ma_push_get_
!  -> EXTERN: (109,18) errquit_
!  -> EXTERN: (109,18) __resetsp_inlined
!  -> EXTERN: (109,18) __getsp_inlined
!  -> EXTERN: (109,36) _alloca
!  -> EXTERN: (109,36) memmove
!  -> EXTERN: (111,23) bas_cn2bfr_
!  -> EXTERN: (112,18) errquit_
!  -> EXTERN: (112,18) __resetsp_inlined
!  -> EXTERN: (112,18) __getsp_inlined
!  -> EXTERN: (112,37) _alloca
!  -> EXTERN: (112,37) memmove
!  -> EXTERN: (114,18) dfill_
!  -> EXTERN: (116,23) bas_get_exponent_
!  -> EXTERN: (117,18) errquit_
!  -> EXTERN: (117,18) __resetsp_inlined
!  -> EXTERN: (117,18) __getsp_inlined
!  -> EXTERN: (117,37) _alloca
!  -> EXTERN: (117,37) memmove
!  -> EXTERN: (150,24) ga_fill_patch_
!  -> EXTERN: (151,24) ga_fill_patch_
!  -> EXTERN: (155,18) for_write_seq_fmt_xmit
!  -> EXTERN: (155,18) for_write_seq_fmt_xmit
!  -> EXTERN: (155,18) for_write_seq_fmt_xmit
!  -> EXTERN: (155,18) for_write_seq_fmt_xmit
!  -> EXTERN: (155,18) for_write_seq_fmt_xmit
!  -> EXTERN: (155,18) for_write_seq_fmt_xmit
!  -> EXTERN: (155,18) for_write_seq_fmt_xmit
!  -> EXTERN: (155,18) for_write_seq_fmt
!  -> EXTERN: (161,23) ma_pop_stack_
!  -> EXTERN: (162,18) __resetsp_inlined
!  -> EXTERN: (162,18) errquit_
!  -> EXTERN: (162,18) __getsp_inlined
!  -> EXTERN: (162,37) memmove
!  -> EXTERN: (162,37) _alloca
!  -> EXTERN: (171,12) ga_zero_
!  -> EXTERN: (172,12) ga_zero_
!  -> EXTERN: (173,12) ga_zero_
!  -> EXTERN: (175,12) int_dip_ga_
!  -> EXTERN: (178,12) ga_elem_multiply_
!  -> EXTERN: (179,12) ga_elem_multiply_
!  -> EXTERN: (180,12) ga_elem_multiply_
!  -> EXTERN: (187,15) ga_norm_infinity_
!  -> EXTERN: (189,15) ga_scale_
!  -> EXTERN: (191,15) ga_norm_infinity_
!  -> EXTERN: (193,15) ga_scale_
!  -> EXTERN: (195,15) ga_norm_infinity_
!  -> EXTERN: (197,15) ga_scale_
!  -> EXTERN: (203,12) ga_zero_
!  -> EXTERN: (204,12) ga_dadd_
!  -> EXTERN: (205,12) ga_dadd_
!  -> EXTERN: (206,12) ga_dadd_
!  -> EXTERN: (217,17) ga_destroy_
!  -> EXTERN: (218,12) errquit_
!  -> EXTERN: (218,12) __resetsp_inlined
!  -> EXTERN: (218,12) __getsp_inlined
!  -> EXTERN: (218,31) _alloca
!  -> EXTERN: (218,31) memmove
!  -> EXTERN: (219,17) ga_destroy_
!  -> EXTERN: (220,12) errquit_
!  -> EXTERN: (220,12) __resetsp_inlined
!  -> EXTERN: (220,12) __getsp_inlined
!  -> EXTERN: (220,31) _alloca
!  -> EXTERN: (220,31) memmove
!  -> EXTERN: (221,17) ga_destroy_
!  -> EXTERN: (222,12) errquit_
!  -> EXTERN: (222,12) __resetsp_inlined
!  -> EXTERN: (222,12) __getsp_inlined
!  -> EXTERN: (222,31) _alloca
!  -> EXTERN: (222,31) memmove
!  -> EXTERN: (223,17) ga_destroy_
!  -> EXTERN: (224,12) errquit_
!  -> EXTERN: (224,12) __resetsp_inlined
!  -> EXTERN: (224,12) __getsp_inlined
!  -> EXTERN: (224,31) _alloca
!  -> EXTERN: (224,31) memmove
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(8,18):remark #34051: REGISTER ALLOCATION : [dft_fock_efield_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F:8
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm2]
!        
!    Routine temporaries
!        Total         :     635
!            Global    :     143
!            Local     :     492
!        Regenerable   :     412
!        Spilled       :      18
!        
!    Routine stack
!        Variables     :     328 bytes*
!            Reads     :      22 [4.21e+00 ~ 4.2%]
!            Writes    :      20 [2.33e+00 ~ 2.3%]
!        Spills        :     104 bytes*
!            Reads     :      14 [5.31e-01 ~ 0.5%]
!            Writes    :      13 [6.07e-01 ~ 0.6%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
9	
10	      implicit none
11	      
12	#include "bas.fh"
13	#include "geom.fh"
14	#include "mafdecls.fh"
15	#include "stdio.fh"
16	#include "rtdb.fh"
17	#include "cdft.fh"
18	#include "global.fh"
19	#include "util.fh"
20	#include "errquit.fh"
21	
22	
23	C     == Inputs ==
24	      integer, intent(in)            :: rtdb
25	      double precision, intent(in)   :: efield(3) !x,y,z components of electric field
26	      integer, intent(in)            :: g_ddote   !-D.E--value will be computed and stored in this GA
27	      logical, intent(in)            :: lscale    ! if .true., scale -D.E by norm of the dipole matrices
28	
29	C     == Parameters ==
30	      character(*), parameter        :: pname = "dft_fock_efield: "
31	
32	C     == Variables ==
33	      integer                        :: me
34	      integer                        :: g_dipx, g_dipy, g_dipz
35	      integer                        :: g_mask
36	      integer                        :: dtype, n1, n2
37	      integer                        :: ibf, cont, icont
38	      integer                        :: bf_start, bf_end
39	      integer                        :: iexp, lexp
40	      integer                        :: ival
41	      integer                        :: ncont
42	      integer                        :: l, nprim, ncontr, isphere
43	      double precision               :: norm, scale, exp_cutoff
44	      logical                        :: cut_this_cont
45	
46	
47	      me = ga_nodeid ()
48	
49	C
50	C     Checks
51	C
52	      call ga_check_handle (g_ddote,
53	     $     pname//"third argument not a valid GA")
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(53,17):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(53,17):remark #34026: call to memmove implemented as a call to optimized library version
54	      
55	      call ga_inquire (g_ddote, dtype, n1, n2)
56	
57	      if (dtype.ne.mt_dbl)
58	     $     call errquit (pname//"only valid for real GA",0,0)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(58,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(58,31):remark #34026: call to memmove implemented as a call to optimized library version
59	
60	      if (n1.ne.n2)
61	     $     call errquit (pname//"only valid for square GAs",0,0)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(61,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(61,31):remark #34026: call to memmove implemented as a call to optimized library version
62	
63	      if (n1.ne.nbf)
64	     $     call errquit (pname//"GA must be nbf x nbf",0,0)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(64,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(64,31):remark #34026: call to memmove implemented as a call to optimized library version
65	
66	      if (.not. bas_check_handle (ao_bas_han, pname))
67	     $     call errquit (pname//"invalid basis handle",0,BASIS_ERR)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(67,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(67,31):remark #34026: call to memmove implemented as a call to optimized library version
68	
69	
70	C
71	C     Alloc dipole mats
72	C     
73	      if (.not. ga_duplicate (g_ddote, g_dipx, "dipx"))
74	     $     call errquit (pname//"alloc failed dipx", 0, GA_ERR)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(74,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(74,31):remark #34026: call to memmove implemented as a call to optimized library version
75	      if (.not. ga_duplicate (g_ddote, g_dipy, "dipy"))
76	     $     call errquit (pname//"alloc failed dipy", 0, GA_ERR)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(76,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(76,31):remark #34026: call to memmove implemented as a call to optimized library version
77	      if (.not. ga_duplicate (g_ddote, g_dipz, "dipz"))
78	     $     call errquit (pname//"alloc failed dipz", 0, GA_ERR)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(78,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(78,31):remark #34026: call to memmove implemented as a call to optimized library version
79	
80	      if (.not. ga_duplicate (g_ddote, g_mask, "mask"))
81	     $     call errquit (pname//"alloc failed mask", 0, GA_ERR)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(81,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(81,31):remark #34026: call to memmove implemented as a call to optimized library version
82	
83	
84	C     (start mask off at all 1's)
85	      call ga_fill (g_mask, 1d0)
86	
87	
88	C
89	C     Mask out small exponents (if desired), this will add 0's to the mask
90	C
91	      if (rtdb_get (rtdb, "dft:efield_exp_cutoff",
92	     $     mt_dbl, 1, exp_cutoff)) then
93	
94	         if (exp_cutoff .lt. 0d0)
95	     $        call errquit (pname//"invalid negative exp_cutoff")
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(95,34):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(95,34):remark #34026: call to memmove implemented as a call to optimized library version
96	
97	
98	         if (.not. bas_numcont (ao_bas_han, ncont))
99	     $        call errquit (pname//"ncont bas_numcont failed",
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(99,34):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(99,34):remark #34026: call to memmove implemented as a call to optimized library version
100	     $        0,BASIS_ERR)
101	
102	         do icont = 1, ncont
103	
104	            if (.not. bas_continfo(ao_bas_han, icont, l, nprim,
105	     &           ncontr, isphere))
106	     &           call errquit(pname//"bas_continfo failed",4, BASIS_ERR)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(106,36):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(106,36):remark #34026: call to memmove implemented as a call to optimized library version
107	
108	            if (.not.ma_push_get(mt_dbl,nprim,"exp",lexp,iexp))
109	     $           call errquit(pname//"make exp failed",0, MA_ERR)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(109,36):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(109,36):remark #34026: call to memmove implemented as a call to optimized library version
110	
111	            if (.not. bas_cn2bfr (ao_bas_han, icont, bf_start, bf_end))
112	     $           call errquit (pname//"bas_cn2bfr failed",0,BASIS_ERR)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(112,37):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(112,37):remark #34026: call to memmove implemented as a call to optimized library version
113	
114	            call dfill (nprim, 0d0, dbl_mb(iexp), 1)
115	
116	            if (.not. bas_get_exponent(ao_bas_han, icont, dbl_mb(iexp)))
117	     $           call errquit (pname//"bas_get_exponent failed",
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(117,37):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(117,37):remark #34026: call to memmove implemented as a call to optimized library version
118	     $           0, BASIS_ERR)
119	
120	c$$$            if (me.eq.0) then
121	c$$$               write (luout, *) ""            
122	c$$$               write (luout, *) ""
123	c$$$               write (luout, *) "icont   :", icont
124	c$$$               write (luout, *) "l       :", l
125	c$$$               write (luout, *) "nprim   :", nprim
126	c$$$               write (luout, *) "ncontr  :", ncontr
127	c$$$               write (luout, *) "isphere :", isphere
128	c$$$               write (luout, *) "bf_start:", bf_start
129	c$$$               write (luout, *) "bf_end  :", bf_end
130	c$$$               write (luout, *) "coefficients:"
131	c$$$               do ival = 1, nprim
132	c$$$                  write (luout, *) dbl_mb (iexp + ival - 1)
133	c$$$               enddo
134	c$$$               call util_flush (luout)
135	c$$$            endif
136	
137	
138	C     (if this contraction has at least one "small" coefficient we want
139	C     to cut, zero the parts of the mask that correspond to AOs in this
140	C     contraction)
141	            
142	            cut_this_cont = .false.
143	            do ival = 1, nprim
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(143,13)
!   remark #15300: LOOP WAS VECTORIZED
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 20 
!   remark #15477: vector cost: 5.000 
!   remark #15478: estimated potential speedup: 2.100 
!   remark #15488: --- end vector cost summary ---
!   remark #25015: Estimate of max trip count of loop=1
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(143,13)
!<Remainder loop for vectorization>
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
144	               if ( dbl_mb (iexp + ival - 1) .le. exp_cutoff )
145	     $              cut_this_cont = .true.
146	            enddo
147	
148	            if (cut_this_cont) then
149	               do ibf = bf_start, bf_end
150	                  call ga_fill_patch (g_mask, 1, nbf_ao, ibf, ibf, 0d0)
151	                  call ga_fill_patch (g_mask, ibf, ibf, 1, nbf_ao, 0d0)
152	               enddo
153	
154	               if (me.eq.0) 
155	     $           write (luout, "(1x,a,i0,a,es11.4,a,i0,a,i0)")
156	     $             "Contraction ", icont, " contains exponent below",
157	     $             exp_cutoff,  "; masked basis function(s): ",
158	     $             bf_start, " - ", bf_end
159	            endif
160	
161	            if (.not. ma_pop_stack (lexp))
162	     $           call errquit (pname//"pop exp failed", 0, MA_ERR)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(162,37):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(162,37):remark #34026: call to memmove implemented as a call to optimized library version
163	         enddo
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(163,10)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(152,16)
!      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!   LOOP END
!LOOP END
164	      endif
165	      
166	
167	
168	C
169	C     Calculate dipole mats and scale by mask
170	C
171	      call ga_zero (g_dipx)
172	      call ga_zero (g_dipy)
173	      call ga_zero (g_dipz)
174	
175	      call int_dip_ga (ao_bas_han, ao_bas_han,
176	     $     g_dipx, g_dipy, g_dipz)
177	
178	      call ga_elem_multiply (g_dipx, g_mask, g_dipx)
179	      call ga_elem_multiply (g_dipy, g_mask, g_dipy)
180	      call ga_elem_multiply (g_dipz, g_mask, g_dipz)
181	
182	c Daniel (10-10-12): Probably unnecessary...
183	c      call ga_print (g_dipx)
184	
185	      
186	      if (lscale) then
187	         call ga_norm_infinity (g_dipx, norm)
188	         scale = 1d0 / norm
189	         call ga_scale (g_dipx, scale)
190	
191	         call ga_norm_infinity (g_dipy, norm)
192	         scale = 1d0 / norm
193	         call ga_scale (g_dipy, scale)
194	
195	         call ga_norm_infinity (g_dipz, norm)
196	         scale = 1d0 / norm
197	         call ga_scale (g_dipz, scale)
198	      endif
199	      
200	C
201	C     Compute -D.E
202	C
203	      call ga_zero (g_ddote)
204	      call ga_dadd (efield(1), g_dipx, 1d0, g_ddote, g_ddote)
205	      call ga_dadd (efield(2), g_dipy, 1d0, g_ddote, g_ddote)  
206	      call ga_dadd (efield(3), g_dipz, 1d0, g_ddote, g_ddote)
207	
208	c Tested this with finite differentiation of pol. about the dipole.
209	c This line causes negative pol. w.r.t. the static response calc.
210	c      call ga_scale (g_ddote, -1d0)  ! so that we return -D.E. 
211	
212	
213	      
214	C
215	C     Cleanup
216	C
217	      if (.not. ga_destroy (g_dipx))
218	     $     call errquit (pname//"destroy failed dipx", 0, GA_ERR)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(218,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(218,31):remark #34026: call to memmove implemented as a call to optimized library version
219	      if (.not. ga_destroy (g_dipy))
220	     $     call errquit (pname//"destroy failed dipy", 0, GA_ERR)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(220,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(220,31):remark #34026: call to memmove implemented as a call to optimized library version
221	      if (.not. ga_destroy (g_dipz))
222	     $     call errquit (pname//"destroy failed dipz", 0, GA_ERR)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(222,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(222,31):remark #34026: call to memmove implemented as a call to optimized library version
223	      if (.not. ga_destroy (g_mask))
224	     $     call errquit (pname//"destroy failed mask", 0, GA_ERR)
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(224,31):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_fock_efield.F(224,31):remark #34026: call to memmove implemented as a call to optimized library version
225	
226	      end
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_FRAC_MO

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_FRAC_MO) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(10,19)
  -> EXTERN: (10,19) _alloca
  -> EXTERN: (10,19) _alloca
  -> EXTERN: (10,19) __getsp_inlined
  -> EXTERN: (44,17) rtdb_get_
  -> EXTERN: (54,18) ma_push_get_
  -> EXTERN: (55,9) errquit_
  -> EXTERN: (58,22) rtdb_get_
  -> EXTERN: (110,17) ma_pop_stack_
  -> EXTERN: (111,12) errquit_
  -> EXTERN: (114,8) __resetsp_inlined


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(40,8)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(40,8)
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.330 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(40,8)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(69,8)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 47 
   remark #15477: vector cost: 20.000 
   remark #15478: estimated potential speedup: 2.000 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(69,8)
<Remainder loop for vectorization>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(74,8)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(74,8)
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(74,8)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(89,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(89,9)
      remark #15315: loop was not vectorized: estimated number of iterations (1) is insufficient for vectorization
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 2 
      remark #25439: unrolled with remainder by 2  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(89,9)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(103,8)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(103,8)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(40,8):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(40,8):remark #34026: call to memset implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(74,8):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(74,8):remark #34026: call to memset implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(10,19):remark #34051: REGISTER ALLOCATION : [dft_frac_mo_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F:10

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     165
            Global    :      66
            Local     :      99
        Regenerable   :      51
        Spilled       :      10
        
    Routine stack
        Variables     :      24 bytes*
            Reads     :       5 [1.58e-01 ~ 0.2%]
            Writes    :       4 [9.70e-01 ~ 1.0%]
        Spills        :      40 bytes*
            Reads     :       5 [1.20e-01 ~ 0.1%]
            Writes    :       5 [7.89e-01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	c
2	c      Fractional MO occupations handler
3	c      occup nA nB
4	c          occA-1 occB-1
5	c          ...
6	c          occA-X  occB-nB
7	c          occA-nA
8	c      end
9	c
10	       subroutine dft_frac_mo(rtdb,           ! IN     : rtdb handle
!INLINE REPORT: (DFT_FRAC_MO) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(10,19)
!  -> EXTERN: (10,19) _alloca
!  -> EXTERN: (10,19) _alloca
!  -> EXTERN: (10,19) __getsp_inlined
!  -> EXTERN: (44,17) rtdb_get_
!  -> EXTERN: (54,18) ma_push_get_
!  -> EXTERN: (55,9) errquit_
!  -> EXTERN: (58,22) rtdb_get_
!  -> EXTERN: (110,17) ma_pop_stack_
!  -> EXTERN: (111,12) errquit_
!  -> EXTERN: (114,8) __resetsp_inlined
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(10,19):remark #34051: REGISTER ALLOCATION : [dft_frac_mo_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F:10
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
!        
!    Routine temporaries
!        Total         :     165
!            Global    :      66
!            Local     :      99
!        Regenerable   :      51
!        Spilled       :      10
!        
!    Routine stack
!        Variables     :      24 bytes*
!            Reads     :       5 [1.58e-01 ~ 0.2%]
!            Writes    :       4 [9.70e-01 ~ 1.0%]
!        Spills        :      40 bytes*
!            Reads     :       5 [1.20e-01 ~ 0.1%]
!            Writes    :       5 [7.89e-01 ~ 0.8%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
11	     &                        g_vecs,         ! IN     : MO vectors
12	     &                        focc,           ! OUT    : occupancies
13	     &                        nbf,            ! IN     : nr. basis functions
14	     &                        npol,           ! IN     : nr of polarizations
15	     &                        ntot_occ)       ! IN     : nr total of occupations
16	c
17	       implicit none
18	c
19	#include "errquit.fh"
20	#include "mafdecls.fh"
21	#include "stdio.fh"
22	#include "rtdb.fh"
23	#include "global.fh"
24	#include "msgids.fh"
25	#include "util.fh"
26	c
27	       integer rtdb
28	       integer nbf             ! input
29	       integer npol            ! nr of polarizations
30	       double precision focc(nbf*npol) ! fractional occupancies
31	       integer g_dens(npol)       ! spin-orbit density matrix
32	       integer g_vecs(npol)    ! input/output
33	       integer i,ispin,iorb,iorb1,ntot_occ,nbf_ao,ind_min,ind_max
34	       logical loccup_list,loccup,lerror_check
35	       integer l_occ,k_occ,nfocc_in(npol),nfocc
36	       double precision user_occ,diff_occ,error_occ 
37	c
38	c      get the user defined occupations
39	       nfocc = 0
40	       do i =1,npol
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(40,8)
!   remark #25408: memset generated
!   remark #15542: loop was not vectorized: inner loop was already vectorized
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(40,8)
!      remark #15300: LOOP WAS VECTORIZED
!      remark #15449: unmasked aligned unit stride stores: 1 
!      remark #15475: --- begin vector cost summary ---
!      remark #15476: scalar cost: 2 
!      remark #15477: vector cost: 1.500 
!      remark #15478: estimated potential speedup: 1.330 
!      remark #15488: --- end vector cost summary ---
!      remark #25015: Estimate of max trip count of loop=6
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(40,8)
!   <Remainder loop for vectorization>
!      remark #25015: Estimate of max trip count of loop=12
!   LOOP END
!LOOP END
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(40,8):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(40,8):remark #34026: call to memset implemented as a call to optimized library version
41	         nfocc_in(i) = 0
42	       end do
43	c
44	       loccup = rtdb_get(rtdb,'focc:occup',mt_int,2,nfocc_in) ! read both nfocc_in(1) and nfocc_in(2)
45	       if (.not. loccup) return
46	       if (npol.eq.1) then
47	          nfocc=nfocc_in(1)
48	       else
49	          nfocc=nfocc_in(1)+nfocc_in(2)
50	       end if
51	       if (nfocc.eq.0) return
52	c
53	c      memory for the user occupations
54	       if (.not. ma_push_get(mt_dbl,nfocc,'occups',l_occ,k_occ))
55	     &  call errquit('dft_frac_mo: k_occ error',0,MA_ERR)
56	c
57	c      get user occupation list
58	       loccup_list = rtdb_get(rtdb,'focc:occup_list',mt_dbl,nfocc,
59	     &   dbl_mb(k_occ))
60	       if (.not.loccup_list) return
61	c
62	c      tally up user occupation
63	       user_occ=0.0d0
64	       do i=1,nfocc
65	         user_occ=user_occ+dbl_mb(k_occ+i-1)
66	       enddo
67	       diff_occ=abs(ntot_occ*1.0d0-user_occ)
68	c
69	       do i=1,nfocc
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(69,8)
!   remark #15300: LOOP WAS VECTORIZED
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 47 
!   remark #15477: vector cost: 20.000 
!   remark #15478: estimated potential speedup: 2.000 
!   remark #15488: --- end vector cost summary ---
!   remark #25015: Estimate of max trip count of loop=1
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(69,8)
!<Remainder loop for vectorization>
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
70	          dbl_mb(k_occ+i-1)=sqrt(dbl_mb(k_occ+i-1))
71	       enddo
72	c
73	c      initialize fractional occupations
74	       do i=1,nbf*npol
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(74,8)
!   remark #25408: memset generated
!   remark #15542: loop was not vectorized: inner loop was already vectorized
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(74,8)
!      remark #15300: LOOP WAS VECTORIZED
!      remark #15451: unmasked unaligned unit stride stores: 1 
!      remark #15475: --- begin vector cost summary ---
!      remark #15476: scalar cost: 4 
!      remark #15477: vector cost: 2.500 
!      remark #15478: estimated potential speedup: 1.450 
!      remark #15488: --- end vector cost summary ---
!      remark #25015: Estimate of max trip count of loop=3
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(74,8)
!   <Remainder loop for vectorization>
!      remark #25015: Estimate of max trip count of loop=12
!   LOOP END
!LOOP END
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(74,8):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(74,8):remark #34026: call to memset implemented as a call to optimized library version
75	         focc(i)=0.0d0
76	       enddo
77	c
78	c      determine majority and minority component
79	       ind_min=2
80	       ind_max=1
81	       if (nfocc_in(1).lt.nfocc_in(2)) then
82	         ind_min=1 
83	         ind_max=2
84	       endif
85	c
86	       do ispin=1,npol
87	        iorb1=nbf*(ispin-1)+1
88	        iorb=ispin
89	        do i=1,nfocc_in(ind_min)
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(89,9)
!   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(89,9)
!      remark #15315: loop was not vectorized: estimated number of iterations (1) is insufficient for vectorization
!      remark #15451: unmasked unaligned unit stride stores: 1 
!      remark #15452: unmasked strided loads: 2 
!      remark #25439: unrolled with remainder by 2  
!      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
!      remark #25015: Estimate of max trip count of loop=1
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(89,9)
!   <Remainder>
!      remark #25015: Estimate of max trip count of loop=1
!   LOOP END
!LOOP END
90	          focc(iorb1)=dbl_mb(k_occ+iorb-1)*dbl_mb(k_occ+iorb-1)
91	          iorb=iorb+2
92	          iorb1=iorb1+1
93	        end do ! i loop
94	       end do   ! ispin loop   
95	c
96	       iorb =2*nfocc_in(ind_min)+1              
97	       iorb1=nfocc_in(ind_min)+1
98	       if (nfocc_in(1).lt.nfocc_in(2)) then
99	         iorb1=nbf+nfocc_in(ind_min)+1
100	       endif
101	c
102	c      unoccupied electron
103	       do i=1,nfocc_in(ind_max)-nfocc_in(ind_min)
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(103,8)
!   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 6 
!   remark #15477: vector cost: 4.500 
!   remark #15478: estimated potential speedup: 0.800 
!   remark #15488: --- end vector cost summary ---
!   remark #25439: unrolled with remainder by 2  
!   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_frac_mo.F(103,8)
!<Remainder>
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
104	         focc(iorb1)=dbl_mb(k_occ+iorb-1)*dbl_mb(k_occ+iorb-1)
105	         iorb=iorb+1
106	         iorb1=iorb1+1
107	       enddo ! i loop
108	c
109	c      clean up
110	       if (.not.ma_pop_stack(l_occ)) 
111	     &     call errquit('dft_frac_mo: ma_pop_stack l_occ',0, MA_ERR)
112	c
113	       return
114	       end
115	c $Id$
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
/home/meji656/Sources/nwchem.gw/src/include/bas_exndcf_dec.fh(16): remark #7713: This statement function has not been used.   [SF_EXNDCF]
      double precision sf_exndcf
-----------------------^

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_NWMOLDEN

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_NWMOLDEN) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(9,18)
  -> EXTERN: (43,18) ma_sizeof_
  -> EXTERN: (44,13) ga_nodeid_
  -> EXTERN: (46,12) for_cpstr
  -> EXTERN: (47,15) util_file_name_
  -> EXTERN: (49,20) rtdb_cget_
  -> EXTERN: (50,15) errquit_
  -> EXTERN: (54,18) nwmolden_openfile_
  -> EXTERN: (57,12) ga_brdcst_
  -> EXTERN: (59,15) errquit_
  -> EXTERN: (59,15) __resetsp_inlined
  -> EXTERN: (59,15) __getsp_inlined
  -> EXTERN: (59,33) _alloca
  -> EXTERN: (59,33) for_concat
  -> EXTERN: (60,15) nwmolden_geom_
  -> EXTERN: (61,12) errquit_
  -> EXTERN: (61,12) __resetsp_inlined
  -> EXTERN: (61,12) __getsp_inlined
  -> EXTERN: (61,30) _alloca
  -> EXTERN: (61,30) for_concat
  -> EXTERN: (63,17) bas_create_
  -> EXTERN: (64,10) errquit_
  -> EXTERN: (64,10) __resetsp_inlined
  -> EXTERN: (64,10) __getsp_inlined
  -> EXTERN: (64,28) _alloca
  -> EXTERN: (64,28) for_concat
  -> EXTERN: (65,17) bas_rtdb_load_
  -> EXTERN: (66,10) errquit_
  -> EXTERN: (66,10) __resetsp_inlined
  -> EXTERN: (66,10) __getsp_inlined
  -> EXTERN: (66,28) _alloca
  -> EXTERN: (66,28) for_concat
  -> EXTERN: (67,17) rtdb_get_
  -> EXTERN: (69,17) rtdb_get_
  -> EXTERN: (71,10) ga_nodeid_
  -> EXTERN: (72,10) for_write_seq_lis
  -> EXTERN: (72,10) for_write_seq_lis_xmit
  -> EXTERN: (73,10) for_write_seq_lis
  -> EXTERN: (73,10) for_write_seq_lis_xmit
  -> (76,18) INT_NORM_JANPA
  -> EXTERN: (77,15) errquit_
  -> EXTERN: (77,15) __getsp_inlined
  -> EXTERN: (77,15) __resetsp_inlined
  -> EXTERN: (77,33) for_concat
  -> EXTERN: (77,33) _alloca
  -> EXTERN: (80,18) int_normalize_
  -> EXTERN: (81,15) errquit_
  -> EXTERN: (81,15) __getsp_inlined
  -> EXTERN: (81,15) __resetsp_inlined
  -> EXTERN: (81,33) for_concat
  -> EXTERN: (81,33) _alloca
  -> EXTERN: (84,18) nwmolden_basis_
  -> EXTERN: (85,15) errquit_
  -> EXTERN: (85,15) __getsp_inlined
  -> EXTERN: (85,15) __resetsp_inlined
  -> EXTERN: (85,33) for_concat
  -> EXTERN: (85,33) _alloca
  -> EXTERN: (88,18) nwmolden_movecs_
  -> EXTERN: (91,15) errquit_
  -> EXTERN: (91,15) __getsp_inlined
  -> EXTERN: (91,15) __resetsp_inlined
  -> EXTERN: (91,33) for_concat
  -> EXTERN: (91,33) _alloca
  -> EXTERN: (95,12) for_cpstr
  -> EXTERN: (96,16) ma_sizeof_
  -> EXTERN: (97,20) for_cpstr
  -> EXTERN: (98,15) ga_brdcst_
  -> EXTERN: (102,20) bas_destroy_
  -> EXTERN: (103,13) errquit_
  -> EXTERN: (103,13) __resetsp_inlined
  -> EXTERN: (103,13) __getsp_inlined
  -> EXTERN: (103,31) _alloca
  -> EXTERN: (103,31) for_concat
  -> EXTERN: (106,18) nwmolden_closefile_
  -> EXTERN: (107,15) errquit_
  -> EXTERN: (107,15) __getsp_inlined
  -> EXTERN: (107,15) __resetsp_inlined
  -> EXTERN: (107,33) for_concat
  -> EXTERN: (107,33) _alloca
  -> EXTERN: (108,35) for_cpstr
  -> EXTERN: (109,10) for_write_seq_lis
  -> EXTERN: (110,10) for_write_seq_lis
  -> EXTERN: (111,10) for_write_seq_lis
  -> EXTERN: (112,10) for_write_seq_lis
  -> EXTERN: (113,10) for_write_seq_lis
  -> EXTERN: (114,10) for_write_seq_lis
  -> EXTERN: (115,10) for_write_seq_lis
  -> EXTERN: (118,15) ga_sync_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(45,7)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.520 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(45,7)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(45,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.570 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 6  
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(9,18):remark #34051: REGISTER ALLOCATION : [dft_nwmolden_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F:9

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     480
            Global    :     106
            Local     :     374
        Regenerable   :     325
        Spilled       :      14
        
    Routine stack
        Variables     :     592 bytes*
            Reads     :       6 [5.56e-01 ~ 0.6%]
            Writes    :      76 [1.60e+00 ~ 1.6%]
        Spills        :      72 bytes*
            Reads     :       9 [1.33e-01 ~ 0.1%]
            Writes    :       9 [2.24e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: INT_NORM_JANPA

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (INT_NORM_JANPA) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(121,24)
  -> EXTERN: (149,24) bas_check_handle_
  -> INLINE: (164,21) NMCOEF_JANPA2
    -> EXTERN: (238,23) pow
    -> EXTERN: (238,23) __powr8i8
    -> EXTERN: (242,34) __powr8i8
    -> EXTERN: (242,34) pow
    -> EXTERN: (253,15) pow
    -> EXTERN: (253,15) __powr8i8
  -> EXTERN: (170,18) __getsp_inlined
  -> EXTERN: (170,18) errquit_
  -> EXTERN: (170,18) __resetsp_inlined
  -> EXTERN: (170,31) _alloca
  -> EXTERN: (170,31) for_concat
  -> EXTERN: (173,18) errquit_
  -> EXTERN: (173,18) __getsp_inlined
  -> EXTERN: (173,18) __resetsp_inlined
  -> EXTERN: (173,31) for_concat
  -> EXTERN: (173,31) _alloca
  -> EXTERN: (175,18) __getsp_inlined
  -> EXTERN: (175,18) errquit_
  -> EXTERN: (175,18) __resetsp_inlined
  -> EXTERN: (175,31) _alloca
  -> EXTERN: (175,31) for_concat


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(143,7)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.520 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(143,7)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(143,7)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 5.330 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(163,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(208,10) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(209,13) ]
      remark #25439: unrolled with remainder by 8  
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(235,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between dbl_mb(exndcf(2,basis)-1+?+i-1) (236:10) and dbl_mb(exndcf(2,basis)-1+?+i-1) (238:10)
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(240,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(241,10) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between sum (242:13) and sum (242:13)
      LOOP END
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(250,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between dbl_mb(exndcf(2,basis)-1+ept+i-1) (253:15) and dbl_mb(exndcf(2,basis)-1+?+i-1) (251:10)
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(208,10) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
   <Remainder>
      remark #25436: completely unrolled by 7  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(178,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(121,24):remark #34051: REGISTER ALLOCATION : [int_norm_janpa_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F:121

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     280
            Global    :      86
            Local     :     194
        Regenerable   :      52
        Spilled       :      28
        
    Routine stack
        Variables     :     104 bytes*
            Reads     :       4 [2.47e+00 ~ 2.5%]
            Writes    :      14 [2.30e-02 ~ 0.0%]
        Spills        :     216 bytes*
            Reads     :      49 [2.29e+01 ~ 22.9%]
            Writes    :      31 [9.23e+00 ~ 9.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NMCOEF_JANPA2

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NMCOEF_JANPA2) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(184,18)
  -> EXTERN: (238,23) __powr8i8
  -> EXTERN: (238,23) pow
  -> EXTERN: (242,34) pow
  -> EXTERN: (242,34) __powr8i8
  -> EXTERN: (253,15) __powr8i8
  -> EXTERN: (253,15) pow


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(208,10)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(209,13) ]
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(208,10)
<Remainder>
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(235,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between sum (236:10) and sum (236:10)
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(240,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(241,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between sum (242:13) and sum (242:13)
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(250,7)
   remark #15527: loop was not vectorized: function call to pow cannot be vectorized   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(253,15) ]
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(184,18):remark #34051: REGISTER ALLOCATION : [nmcoef_janpa2_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F:184

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     168
            Global    :      51
            Local     :     117
        Regenerable   :       8
        Spilled       :      20
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     112 bytes*
            Reads     :      22 [1.63e+01 ~ 16.3%]
            Writes    :      20 [1.12e+01 ~ 11.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	c
2	c     $Id: dft_scf.F 28430 2016-07-27 18:47:23Z edo $
3	c
4	c     interface to nwmolden
5	c     need to print un-normalized basis exp to avoid troubles
6	c     Before using JANPA,  run the .molden file through 
7	c     molden2molden.jar -NormalizeBF to get the correct Molden normalization
8	c     https://sourceforge.net/p/janpa/wiki/nwchem2molden/
9	      subroutine dft_nwmolden(rtdb,geom,
!INLINE REPORT: (DFT_NWMOLDEN) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(9,18)
!  -> EXTERN: (43,18) ma_sizeof_
!  -> EXTERN: (44,13) ga_nodeid_
!  -> EXTERN: (46,12) for_cpstr
!  -> EXTERN: (47,15) util_file_name_
!  -> EXTERN: (49,20) rtdb_cget_
!  -> EXTERN: (50,15) errquit_
!  -> EXTERN: (54,18) nwmolden_openfile_
!  -> EXTERN: (57,12) ga_brdcst_
!  -> EXTERN: (59,15) errquit_
!  -> EXTERN: (59,15) __resetsp_inlined
!  -> EXTERN: (59,15) __getsp_inlined
!  -> EXTERN: (59,33) _alloca
!  -> EXTERN: (59,33) for_concat
!  -> EXTERN: (60,15) nwmolden_geom_
!  -> EXTERN: (61,12) errquit_
!  -> EXTERN: (61,12) __resetsp_inlined
!  -> EXTERN: (61,12) __getsp_inlined
!  -> EXTERN: (61,30) _alloca
!  -> EXTERN: (61,30) for_concat
!  -> EXTERN: (63,17) bas_create_
!  -> EXTERN: (64,10) errquit_
!  -> EXTERN: (64,10) __resetsp_inlined
!  -> EXTERN: (64,10) __getsp_inlined
!  -> EXTERN: (64,28) _alloca
!  -> EXTERN: (64,28) for_concat
!  -> EXTERN: (65,17) bas_rtdb_load_
!  -> EXTERN: (66,10) errquit_
!  -> EXTERN: (66,10) __resetsp_inlined
!  -> EXTERN: (66,10) __getsp_inlined
!  -> EXTERN: (66,28) _alloca
!  -> EXTERN: (66,28) for_concat
!  -> EXTERN: (67,17) rtdb_get_
!  -> EXTERN: (69,17) rtdb_get_
!  -> EXTERN: (71,10) ga_nodeid_
!  -> EXTERN: (72,10) for_write_seq_lis
!  -> EXTERN: (72,10) for_write_seq_lis_xmit
!  -> EXTERN: (73,10) for_write_seq_lis
!  -> EXTERN: (73,10) for_write_seq_lis_xmit
!  -> (76,18) INT_NORM_JANPA
!  -> EXTERN: (77,15) errquit_
!  -> EXTERN: (77,15) __getsp_inlined
!  -> EXTERN: (77,15) __resetsp_inlined
!  -> EXTERN: (77,33) for_concat
!  -> EXTERN: (77,33) _alloca
!  -> EXTERN: (80,18) int_normalize_
!  -> EXTERN: (81,15) errquit_
!  -> EXTERN: (81,15) __getsp_inlined
!  -> EXTERN: (81,15) __resetsp_inlined
!  -> EXTERN: (81,33) for_concat
!  -> EXTERN: (81,33) _alloca
!  -> EXTERN: (84,18) nwmolden_basis_
!  -> EXTERN: (85,15) errquit_
!  -> EXTERN: (85,15) __getsp_inlined
!  -> EXTERN: (85,15) __resetsp_inlined
!  -> EXTERN: (85,33) for_concat
!  -> EXTERN: (85,33) _alloca
!  -> EXTERN: (88,18) nwmolden_movecs_
!  -> EXTERN: (91,15) errquit_
!  -> EXTERN: (91,15) __getsp_inlined
!  -> EXTERN: (91,15) __resetsp_inlined
!  -> EXTERN: (91,33) for_concat
!  -> EXTERN: (91,33) _alloca
!  -> EXTERN: (95,12) for_cpstr
!  -> EXTERN: (96,16) ma_sizeof_
!  -> EXTERN: (97,20) for_cpstr
!  -> EXTERN: (98,15) ga_brdcst_
!  -> EXTERN: (102,20) bas_destroy_
!  -> EXTERN: (103,13) errquit_
!  -> EXTERN: (103,13) __resetsp_inlined
!  -> EXTERN: (103,13) __getsp_inlined
!  -> EXTERN: (103,31) _alloca
!  -> EXTERN: (103,31) for_concat
!  -> EXTERN: (106,18) nwmolden_closefile_
!  -> EXTERN: (107,15) errquit_
!  -> EXTERN: (107,15) __getsp_inlined
!  -> EXTERN: (107,15) __resetsp_inlined
!  -> EXTERN: (107,33) for_concat
!  -> EXTERN: (107,33) _alloca
!  -> EXTERN: (108,35) for_cpstr
!  -> EXTERN: (109,10) for_write_seq_lis
!  -> EXTERN: (110,10) for_write_seq_lis
!  -> EXTERN: (111,10) for_write_seq_lis
!  -> EXTERN: (112,10) for_write_seq_lis
!  -> EXTERN: (113,10) for_write_seq_lis
!  -> EXTERN: (114,10) for_write_seq_lis
!  -> EXTERN: (115,10) for_write_seq_lis
!  -> EXTERN: (118,15) ga_sync_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(9,18):remark #34051: REGISTER ALLOCATION : [dft_nwmolden_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F:9
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
!        
!    Routine temporaries
!        Total         :     480
!            Global    :     106
!            Local     :     374
!        Regenerable   :     325
!        Spilled       :      14
!        
!    Routine stack
!        Variables     :     592 bytes*
!            Reads     :       6 [5.56e-01 ~ 0.6%]
!            Writes    :      76 [1.60e+00 ~ 1.6%]
!        Spills        :      72 bytes*
!            Reads     :       9 [1.33e-01 ~ 0.1%]
!            Writes    :       9 [2.24e-01 ~ 0.2%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
10	     I     ipol,eval,occ,ir,
11	     N     nbf, nmo,
12	     I     g_movecs,scftype,rw)
13	      implicit none
14	#include "errquit.fh"
15	#include "bas.fh"
16	#include "mafdecls.fh"
17	#include "rtdb.fh"
18	#include "global.fh"
19	      integer rtdb
20	      integer geom 
21	      integer ipol
22	      double precision eval(*),occ(*)
23	      integer ir(*)
24	      integer nbf, nmo
25	      integer g_movecs(*)
26	      character*(*) scftype
27	      character*(*) rw ! [in] read - write
28	c
29	      character*20 pname
30	      integer ispin
31	      integer bas,io_res
32	      character*255 filename
33	      integer inntsize
34	      logical nwmolden_movecs,nwmolden_basis,nwmolden_geom
35	      external nwmolden_movecs,nwmolden_basis,nwmolden_geom
36	      logical nwmolden_openfile,nwmolden_closefile
37	      external nwmolden_openfile,nwmolden_closefile
38	      logical do_io,do_norm_janpa,do_norm_nwchem
39	      logical int_norm_janpa,int_normalize
40	      external int_norm_janpa,int_normalize
41	c
42	c
43	      inntsize = MA_sizeof(MT_INT,1,MT_BYTE)
44	      do_io=ga_nodeid().eq.0
45	      pname='dft_nwmolden: '
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(45,7)
!   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 4 
!   remark #15477: vector cost: 2.000 
!   remark #15478: estimated potential speedup: 1.520 
!   remark #15488: --- end vector cost summary ---
!   remark #25015: Estimate of max trip count of loop=1
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(45,7)
!<Remainder loop for vectorization>
!   remark #25436: completely unrolled by 1  
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(45,7)
!   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 2 
!   remark #15477: vector cost: 3.000 
!   remark #15478: estimated potential speedup: 0.570 
!   remark #15488: --- end vector cost summary ---
!   remark #25436: completely unrolled by 6  
!LOOP END
46	      if(rw.eq.'write') then
47	         call util_file_name('molden', .false., .false.,filename)
48	      else
49	         if (.not. rtdb_cget(rtdb, 'vectors:molden', 1, filename))
50	     $        call errquit('dftnwmolden: no file',0, 0)
51	      endif
52	      io_res=1
53	      if (do_io) then
54	         if(.not.nwmolden_openfile(rw,filename))
55	     E        io_res=0
56	      endif
57	      call ga_brdcst(2020, io_res, inntsize, 0)
58	      if(io_res.eq.0) 
59	     E        call errquit(pname//'nwmolden_openfile failed ',0,0)
60	      if(.not.nwmolden_geom(rw,geom))
61	     E     call errquit(pname//'nwmolden_geom failed ',0,0)
62	c     create internal basis handle
63	      if (.not. bas_create(bas, 'ao basis'))
64	     &   call errquit(pname//'bas_create?', 2, BASIS_ERR)
65	      if (.not. bas_rtdb_load(rtdb, geom, bas, 'ao basis'))
66	     &   call errquit(pname//'no ao basis ', 3, BASIS_ERR)
67	      if (.not. rtdb_get(rtdb,'molden:do_norm_janpa', mt_log, 1, 
68	     A     do_norm_janpa))  do_norm_janpa=.false.
69	      if (.not. rtdb_get(rtdb,'molden:do_norm_nwchem', mt_log, 1, 
70	     A     do_norm_nwchem))  do_norm_nwchem=.false.
71	      if(ga_nodeid().eq.0) then
72	         write(6,*) ' do_norm_janpa ',do_norm_janpa
73	         write(6,*) ' do_norm_nwchem ',do_norm_nwchem
74	      endif
75	      if(do_norm_janpa) then
76	         if(.not.int_norm_janpa(rtdb,bas))
77	     &        call errquit(pname//'norm_janpa failed ', 5, BASIS_ERR)
78	      endif
79	      if(do_norm_nwchem) then
80	         if(.not.int_normalize(rtdb,bas))
81	     &        call errquit(pname//'int_normalize failed ', 5, BASIS_ERR)
82	      endif
83	      if(do_io) then
84	         if(.not.nwmolden_basis(rw,bas))
85	     E        call errquit(pname//'nwmolden_basis failed ',0,0)
86	c
87	
88	         if(.not.nwmolden_movecs(rw,bas,nbf,nmo,
89	     1        eval,occ,ir,
90	     G        g_movecs,scftype))
91	     E        call errquit(pname//'nwmolden_movecs failed ',0,0)
92	         
93	      endif
94	c     broadcast evals when reading
95	      if(rw.eq.'read') then
96	         ispin=ma_sizeof(MT_DBL,nbf,MT_BYTE)
97	         if(scftype.eq.'UHF') ispin=ispin*2
98	         call ga_brdcst(1984, eval, ispin, 0)
99	      endif
100	      
101	c
102	         if (.not. bas_destroy(bas))
103	     &      call errquit(pname//'not able to destroy bas:',33,
104	     &       BASIS_ERR)
105	         if(do_io) then
106	         if(.not.nwmolden_closefile())
107	     E        call errquit(pname//'nwmolden_closefile failed ',0,0)
108	      if(.not.do_norm_janpa.and.rw.eq.'write') then
109	         write(6,*) ' '
110	         write(6,*) ' Molden file created '
111	         write(6,*) ' If you plan to use JANPA '
112	         write(6,*) '   run the .molden file through '
113	         write(6,*) '   molden2molden.jar -NormalizeBF to get the'
114	         write(6,*) '   correct Molden normalization '
115	         write(6,*) '  '
116	      endif
117	         endif
118	         call ga_sync()
119	         return
120	         end
121	      logical function int_norm_janpa(rtdb,basisin)
!INLINE REPORT: (INT_NORM_JANPA) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(121,24)
!  -> EXTERN: (149,24) bas_check_handle_
!  -> INLINE: (164,21) NMCOEF_JANPA2
!    -> EXTERN: (238,23) pow
!    -> EXTERN: (238,23) __powr8i8
!    -> EXTERN: (242,34) __powr8i8
!    -> EXTERN: (242,34) pow
!    -> EXTERN: (253,15) pow
!    -> EXTERN: (253,15) __powr8i8
!  -> EXTERN: (170,18) __getsp_inlined
!  -> EXTERN: (170,18) errquit_
!  -> EXTERN: (170,18) __resetsp_inlined
!  -> EXTERN: (170,31) _alloca
!  -> EXTERN: (170,31) for_concat
!  -> EXTERN: (173,18) errquit_
!  -> EXTERN: (173,18) __getsp_inlined
!  -> EXTERN: (173,18) __resetsp_inlined
!  -> EXTERN: (173,31) for_concat
!  -> EXTERN: (173,31) _alloca
!  -> EXTERN: (175,18) __getsp_inlined
!  -> EXTERN: (175,18) errquit_
!  -> EXTERN: (175,18) __resetsp_inlined
!  -> EXTERN: (175,31) _alloca
!  -> EXTERN: (175,31) for_concat
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(121,24):remark #34051: REGISTER ALLOCATION : [int_norm_janpa_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F:121
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
!        
!    Routine temporaries
!        Total         :     280
!            Global    :      86
!            Local     :     194
!        Regenerable   :      52
!        Spilled       :      28
!        
!    Routine stack
!        Variables     :     104 bytes*
!            Reads     :       4 [2.47e+00 ~ 2.5%]
!            Writes    :      14 [2.30e-02 ~ 0.0%]
!        Spills        :     216 bytes*
!            Reads     :      49 [2.29e+01 ~ 22.9%]
!            Writes    :      31 [9.23e+00 ~ 9.2%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
122	c $Id: int_norm.F 24111 2013-04-21 06:55:44Z d3y133 $
123	      implicit none
124	#include "apiP.fh"
125	#include "errquit.fh"
126	#include "bas.fh"
127	#include "nwc_const.fh"
128	#include "basP.fh"
129	#include "basdeclsP.fh"
130	#include "rtdb.fh"
131	#include "mafdecls.fh"
132	#include "bas_exndcf_dec.fh"
133	#include "stdio.fh"
134	      integer basisin  !< [Input] The basis set handle
135	      integer rtdb     !< [Input] The runtime database handle
136	      integer basis, nucont, iucont, type, nprim, ngen, ept, cpt, igen
137	      integer norm_typ
138	      logical norm_ok
139	      logical force_norm_rel
140	      character*30 pname
141	c
142	#include "bas_exndcf_sfn.fh"
143	      pname = "int_norm_janpa"
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(143,7)
!   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 4 
!   remark #15477: vector cost: 2.000 
!   remark #15478: estimated potential speedup: 1.520 
!   remark #15488: --- end vector cost summary ---
!   remark #25015: Estimate of max trip count of loop=1
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(143,7)
!<Remainder loop for vectorization>
!   remark #25436: completely unrolled by 1  
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(143,7)
!   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
!   remark #15451: unmasked unaligned unit stride stores: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 2 
!   remark #15477: vector cost: 0.370 
!   remark #15478: estimated potential speedup: 5.330 
!   remark #15488: --- end vector cost summary ---
!LOOP END
144	c
145	c     Normalize the contraction coefficients in this basis.
146	c     Eventually we need to store both the normalized and unnormalized
147	c     coefficients so that the user can print out something recognizable
148	c
149	      int_norm_janpa = bas_check_handle(basisin, 'int_norm_janpa')
150	      if (.not. int_norm_janpa) return
151	c
152	      basis = basisin + BASIS_HANDLE_OFFSET
153	c
154	c
155	      nucont = infbs_head(HEAD_NCONT,basis)
156	      do iucont = 1, nucont
157	         type  = infbs_cont(CONT_TYPE, iucont,basis)
158	         nprim = infbs_cont(CONT_NPRIM,iucont,basis) 
159	         ngen  = infbs_cont(CONT_NGEN, iucont,basis)
160	         ept   = infbs_cont(CONT_IEXP, iucont,basis)
161	         cpt   = infbs_cont(CONT_ICFP, iucont,basis)
162	         if (type .ge. 0) then
163	            do igen = 0,ngen-1
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(163,13)
!   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(208,10) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
!      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(209,13) ]
!      remark #25439: unrolled with remainder by 8  
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(235,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed ANTI dependence between dbl_mb(exndcf(2,basis)-1+?+i-1) (236:10) and dbl_mb(exndcf(2,basis)-1+?+i-1) (238:10)
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(240,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
!      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
!
!      LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(241,10) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
!         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!         remark #15346: vector dependence: assumed ANTI dependence between sum (242:13) and sum (242:13)
!      LOOP END
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(250,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed ANTI dependence between dbl_mb(exndcf(2,basis)-1+ept+i-1) (253:15) and dbl_mb(exndcf(2,basis)-1+?+i-1) (251:10)
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(208,10) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
!   <Remainder>
!      remark #25436: completely unrolled by 7  
!   LOOP END
!LOOP END
164	               call nmcoef_janpa2(dbl_mb(mb_exndcf(ept, basis)),
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(163,13)
!   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(208,10) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
!      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(209,13) ]
!      remark #25439: unrolled with remainder by 8  
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(235,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed ANTI dependence between dbl_mb(exndcf(2,basis)-1+?+i-1) (236:10) and dbl_mb(exndcf(2,basis)-1+?+i-1) (238:10)
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(240,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
!      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
!
!      LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(241,10) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
!         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!         remark #15346: vector dependence: assumed ANTI dependence between sum (242:13) and sum (242:13)
!      LOOP END
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(250,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed ANTI dependence between dbl_mb(exndcf(2,basis)-1+ept+i-1) (253:15) and dbl_mb(exndcf(2,basis)-1+?+i-1) (251:10)
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(208,10) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(164,21)
!   <Remainder>
!      remark #25436: completely unrolled by 7  
!   LOOP END
!LOOP END
165	     &              dbl_mb(mb_exndcf(cpt+igen*nprim,basis)),
166	     &              type, nprim)
167	            enddo
168	c....... sp
169	         else if (type .eq. -1) then
170	            call errquit(pname//' not ready for itype ',type,0)
171	         else if (type .eq. -2) then
172	c........ spd
173	            call errquit(pname//' not ready for itype ',type,0)
174	         else
175	            call errquit(pname//'invalid contraction type', 0,
176	     &       BASIS_ERR)
177	         endif
178	      enddo
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(178,7)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
179	c
180	      end
181	c     normalization compatible with JANPA softwares requirements
182	C     T.Y.Nikolaienko, L.A.Bulavin, D.M.Hovorun; Comput.Theor.Chem. (2014)
183	C     V. 1050, P. 15-22, DOI: 10.1016/j.comptc.2014.10.002
184	      subroutine nmcoef_janpa2(z,cc,l,np)
!INLINE REPORT: (NMCOEF_JANPA2) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(184,18)
!  -> EXTERN: (238,23) __powr8i8
!  -> EXTERN: (238,23) pow
!  -> EXTERN: (242,34) pow
!  -> EXTERN: (242,34) __powr8i8
!  -> EXTERN: (253,15) __powr8i8
!  -> EXTERN: (253,15) pow
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(184,18):remark #34051: REGISTER ALLOCATION : [nmcoef_janpa2_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F:184
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   24[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm8]
!        
!    Routine temporaries
!        Total         :     168
!            Global    :      51
!            Local     :     117
!        Regenerable   :       8
!        Spilled       :      20
!        
!    Routine stack
!        Variables     :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!        Spills        :     112 bytes*
!            Reads     :      22 [1.63e+01 ~ 16.3%]
!            Writes    :      20 [1.12e+01 ~ 11.2%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
185	
186	      Implicit none
187	      Integer l,np ! [in]
188	      Double precision z(*)  ! [in]
189	      Double precision cc(*) ! [in/out] normalized in exit
190	c local
191	      Double precision f     
192	#include "basdeclsP.fh"
193	      double precision pi,sum
194	      integer l_lim
195	      integer i,j
196	      double precision ovlp_prim,z1
197	c     Overlap integral for a gaussian function
198	c     see M.Ho and J.M.Hernandez-Perez, The Mathematica Journal, 14(3), 2012. doi:10.3888/tmj.14-3.
199	c     see Libint programmers manual at
200	c     https://github.com/evaleev/libint/blob/master/doc/progman/progman.tex
201	      ovlp_prim(z1,pi,l,f)=(pi/z1)**1.5d0*f/(2.d0*z1)**l
202	c******************************************************************************
203	      pi=acos(-1d0)
204	
205	c compute double factorial of (2*L-1)
206	      f = 1.0d0
207	      if(l.gt.1) then
208	         do i = (2*l-1),2,-2
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(208,10)
!   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(209,13) ]
!   remark #25439: unrolled with remainder by 8  
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(208,10)
!<Remainder>
!   remark #25436: completely unrolled by 7  
!LOOP END
209	            f = f*dble(i)
210	         end do
211	      endif
212	#ifdef SLOW
213	c
214	c     Normalize each primitive 
215	c
216	      do i = 1,np
217	        cc(i)= cc(i)/sqrt(ovlp_prim(2d0*z(i),pi,l,f))
218	      enddo
219	
220	c Normalize the contractions.
221	
222	      sum = 0.D0
223	      do i=1,np
224	         sum = sum + cc(i)*cc(i)*ovlp_prim(2d0*z(i),pi,l,f)
225	         do j= i+1,np
226	            sum = sum + 2d0*cc(i)*cc(j)*
227	     *           ovlp_prim(z(i)+z(j),pi,l,f)
228	         enddo
229	      enddo
230	#else
231	c
232	c Normalize the contractions.
233	c
234	      sum = 0.D0
235	      do i = 1,np
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(235,7)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed ANTI dependence between sum (236:10) and sum (236:10)
!LOOP END
236	         sum = sum + cc(i)*cc(i)
237	c     Normalize each primitive 
238	         cc(i)= cc(i)/sqrt(ovlp_prim(2d0*z(i),pi,l,f))
239	      enddo
240	      do i=1,np
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(240,7)
!   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(241,10)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed ANTI dependence between sum (242:13) and sum (242:13)
!   LOOP END
!LOOP END
241	         do j= i+1,np
242	            sum = sum + 2d0*cc(i)*cc(j)*
243	     *           ovlp_prim(z(i)+z(j),pi,l,f)
244	         enddo
245	      enddo
246	#endif
247	c..   
248	      sum = 1d0/sqrt(sum)
249	      
250	      do  i = 1,np
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(250,7)
!   remark #15527: loop was not vectorized: function call to pow cannot be vectorized   [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_nwmolden.F(253,15) ]
!LOOP END
251	         cc(i) = cc(i)*sum*
252	c     take out primitive normalization factor previously used
253	     *        sqrt(ovlp_prim(2d0*z(i),pi,l,f))
254	      enddo
255	      return
256	      end
257	
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_SPINFLIP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_SPINFLIP) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_spinflip.F(1,18)
  -> EXTERN: (27,12) ga_add_
  -> EXTERN: (31,18) ga_ddot_
  -> EXTERN: (32,10) ga_nodeid_
  -> EXTERN: (33,10) for_write_seq_lis
  -> EXTERN: (33,10) for_write_seq_lis_xmit
  -> EXTERN: (34,20) bas_numbf_
  -> EXTERN: (34,43) errquit_
  -> EXTERN: (39,13) for_write_seq_lis_xmit
  -> EXTERN: (39,13) for_write_seq_lis
  -> EXTERN: (43,23) bas_ce2bfr_
  -> EXTERN: (43,56) errquit_
  -> EXTERN: (47,25) ma_push_get_
  -> EXTERN: (49,21) errquit_
  -> EXTERN: (50,21) ga_get_
  -> EXTERN: (51,21) dscal_
  -> EXTERN: (52,21) ga_put_
  -> EXTERN: (53,25) ma_pop_stack_
  -> EXTERN: (54,21) errquit_
  -> EXTERN: (56,21) errquit_
  -> EXTERN: (61,12) ga_sync_
  -> EXTERN: (62,19) ga_ddot_
  -> EXTERN: (63,10) ga_nodeid_
  -> EXTERN: (64,10) for_write_seq_lis
  -> EXTERN: (64,10) for_write_seq_lis_xmit
  -> EXTERN: (65,50) for_write_seq_lis
  -> EXTERN: (73,12) ga_add_


    Report from: Loop nest & Vector optimizations [loop, vec]



Non-optimizable loops:


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_spinflip.F(59,10)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_spinflip.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_spinflip_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_spinflip.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     221
            Global    :      47
            Local     :     174
        Regenerable   :     145
        Spilled       :      12
        
    Routine stack
        Variables     :     240 bytes*
            Reads     :       6 [4.66e+00 ~ 4.7%]
            Writes    :      21 [8.19e+00 ~ 8.2%]
        Spills        :      48 bytes*
            Reads     :       8 [1.29e+00 ~ 1.3%]
            Writes    :       6 [1.29e+00 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_spinflip.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	      subroutine dft_spinflip(g_dens,g_s,basis,c_a,c_b,
!INLINE REPORT: (DFT_SPINFLIP) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_spinflip.F(1,18)
!  -> EXTERN: (27,12) ga_add_
!  -> EXTERN: (31,18) ga_ddot_
!  -> EXTERN: (32,10) ga_nodeid_
!  -> EXTERN: (33,10) for_write_seq_lis
!  -> EXTERN: (33,10) for_write_seq_lis_xmit
!  -> EXTERN: (34,20) bas_numbf_
!  -> EXTERN: (34,43) errquit_
!  -> EXTERN: (39,13) for_write_seq_lis_xmit
!  -> EXTERN: (39,13) for_write_seq_lis
!  -> EXTERN: (43,23) bas_ce2bfr_
!  -> EXTERN: (43,56) errquit_
!  -> EXTERN: (47,25) ma_push_get_
!  -> EXTERN: (49,21) errquit_
!  -> EXTERN: (50,21) ga_get_
!  -> EXTERN: (51,21) dscal_
!  -> EXTERN: (52,21) ga_put_
!  -> EXTERN: (53,25) ma_pop_stack_
!  -> EXTERN: (54,21) errquit_
!  -> EXTERN: (56,21) errquit_
!  -> EXTERN: (61,12) ga_sync_
!  -> EXTERN: (62,19) ga_ddot_
!  -> EXTERN: (63,10) ga_nodeid_
!  -> EXTERN: (64,10) for_write_seq_lis
!  -> EXTERN: (64,10) for_write_seq_lis_xmit
!  -> EXTERN: (65,50) for_write_seq_lis
!  -> EXTERN: (73,12) ga_add_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_spinflip.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_spinflip_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_spinflip.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm2]
!        
!    Routine temporaries
!        Total         :     221
!            Global    :      47
!            Local     :     174
!        Regenerable   :     145
!        Spilled       :      12
!        
!    Routine stack
!        Variables     :     240 bytes*
!            Reads     :       6 [4.66e+00 ~ 4.7%]
!            Writes    :      21 [8.19e+00 ~ 8.2%]
!        Spills        :      48 bytes*
!            Reads     :       8 [1.29e+00 ~ 1.3%]
!            Writes    :       6 [1.29e+00 ~ 1.3%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	     S     no_sflip,at_flip)
3	C$Id$
4	      implicit none
5	#include "errquit.fh"
6	#include "mafdecls.fh"
7	#include "global.fh"
8	#include "bas.fh"
9	#include "geom.fh"
10	      integer g_dens(2)
11	      integer g_s
12	      integer basis,geom
13	      double precision c_a,c_b
14	      integer no_sflip
15	      integer at_flip(no_sflip)
16	c
17	      integer at,ii,nbf
18	      integer ilo,ihi,ld
19	      integer l_dm,k_dm
20	      double precision pstrace_in,pstrace_out
21	c
22	c g_dens(2) has -B
23	c     compute spin DM and store it in g_dens(2)
24	c
25	!      call ga_add(1d0, g_dens(1), -1d0, g_dens(2), g_dens(2))
26	clast      call ga_add(1d0, g_dens(1), -2d0, g_dens(2), g_dens(2))
27	      call ga_add(c_a, g_dens(1), c_b, g_dens(2), g_dens(2))
28	c
29	c     check on trace(spin_dm *S)
30	c
31	      pstrace_in=ga_ddot(g_dens(2),g_s)
32	      if(ga_nodeid().eq.0) then
33	         write(6,*) ' spinflip: input pstrace ',pstrace_in
34	         if (.not. bas_numbf(basis, nbf)) call errquit
35	     $        ('dft_spinflip: bas_numbf ?', 0, BASIS_ERR)
36	         
37	         do ii=1,no_sflip
38	           at=at_flip(ii)
39	            write(6,*) '  spinflip: flipping at ',at
40	c     
41	c     grab atomic block and invert sign
42	c
43	            if (.not. bas_ce2bfr(basis, at, ilo, ihi)) call errquit
44	     $           ('dft_spinflip: bas_ce2bfr ?', 0, BASIS_ERR)
45	            ld=ihi-ilo+1
46	            if (ld .gt. 0) then
47	               if (.not.MA_Push_Get(MT_Dbl,ld*ld,'dm',
48	     F              l_dm,k_dm))
49	     &              call errquit('dft_spinf: cannot allocate',0, MA_ERR)
50	               call ga_get(g_dens(2),ilo,ihi,ilo,ihi,dbl_mb(k_dm),ld)
51	               call dscal(ld*ld,-1d0,dbl_mb(k_dm),1)
52	               call ga_put(g_dens(2),ilo,ihi,ilo,ihi,dbl_mb(k_dm),ld)
53	               if (.not.ma_pop_stack(l_dm))
54	     &              call errquit('dft_spinf: cannot pop stack',3,MA_ERR)
55	            else
56	               call errquit('dftspinflip: no basis for atom ',
57	     B              at,BASIS_ERR)
58	            endif
59	         enddo
!
!
!Non-optimizable loops:
!
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_spinflip.F(59,10)
!   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
!LOOP END
60	      endif
61	      call ga_sync()
62	      pstrace_out=ga_ddot(g_dens(2),g_s)
63	      if(ga_nodeid().eq.0)  then
64	         write(6,*) ' spinflip: output pstrace ',pstrace_out
65	         if(abs(pstrace_in-pstrace_out).gt.1d-3) write(6,*)
66	     W        'WARNING: large change in pstrace!'
67	      endif
68	      
69	c     restore - beta in g_dens(2)
70	c       A - (A -B) = B
71	!      call ga_add(1d0, g_dens(1), -1d0, g_dens(2), g_dens(2))
72	clast      call ga_add(0.5d0, g_dens(1), -0.5d0, g_dens(2), g_dens(2))
73	      call ga_add(-c_a/c_b, g_dens(1), 1d0/c_b, g_dens(2), g_dens(2))
74	      return
75	      end
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DFT_QUICKGUESS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_QUICKGUESS) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_quickguess.F(1,18)
  -> EXTERN: (17,15) util_file_name_
  -> EXTERN: (18,13) ga_nodeid_
  -> EXTERN: (19,15) for_write_seq_lis_xmit
  -> EXTERN: (19,15) for_write_seq_lis
  -> EXTERN: (20,15) ao_1prdm_read_
  -> EXTERN: (25,18) errquit_
  -> EXTERN: (26,18) util_file_name_
  -> EXTERN: (27,16) ga_nodeid_
  -> EXTERN: (28,18) for_write_seq_lis_xmit
  -> EXTERN: (28,18) for_write_seq_lis
  -> EXTERN: (29,18) ao_1prdm_read_
  -> EXTERN: (31,18) ga_copy_
  -> EXTERN: (32,18) ga_dscal_
  -> EXTERN: (33,18) ga_dscal_
  -> EXTERN: (37,14) ga_symmetrize_
  -> EXTERN: (38,23) ga_symmetrize_


    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_quickguess.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_quickguess_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_quickguess.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     119
            Global    :      23
            Local     :      96
        Regenerable   :      75
        Spilled       :       6
        
    Routine stack
        Variables     :     144 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      12 [1.36e+00 ~ 1.4%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_quickguess.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O2 -g -fp-model source -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: 10000
!  -inline-max-per-compile: 500000
!
1	      subroutine dft_quickguess(ipol,nbf_ao,g_dens,oskel,
!INLINE REPORT: (DFT_QUICKGUESS) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_quickguess.F(1,18)
!  -> EXTERN: (17,15) util_file_name_
!  -> EXTERN: (18,13) ga_nodeid_
!  -> EXTERN: (19,15) for_write_seq_lis_xmit
!  -> EXTERN: (19,15) for_write_seq_lis
!  -> EXTERN: (20,15) ao_1prdm_read_
!  -> EXTERN: (25,18) errquit_
!  -> EXTERN: (26,18) util_file_name_
!  -> EXTERN: (27,16) ga_nodeid_
!  -> EXTERN: (28,18) for_write_seq_lis_xmit
!  -> EXTERN: (28,18) for_write_seq_lis
!  -> EXTERN: (29,18) ao_1prdm_read_
!  -> EXTERN: (31,18) ga_copy_
!  -> EXTERN: (32,18) ga_dscal_
!  -> EXTERN: (33,18) ga_dscal_
!  -> EXTERN: (37,14) ga_symmetrize_
!  -> EXTERN: (38,23) ga_symmetrize_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_quickguess.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_quickguess_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_quickguess.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm1]
!        
!    Routine temporaries
!        Total         :     119
!            Global    :      23
!            Local     :      96
!        Regenerable   :      75
!        Spilled       :       6
!        
!    Routine stack
!        Variables     :     144 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :      12 [1.36e+00 ~ 1.4%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	     N     ntotel,nclosed,
3	     D     densmat)
4	      implicit none
5	#include "global.fh"      
6	#include "errquit.fh"
7	      integer ipol
8	      integer nbf_ao
9	      logical oskel
10	      integer ntotel,nclosed
11	      integer g_dens(*)
12	      logical densmat ![in]
13	c
14	      character*256 file_mat1
15	c      
16	      if(densmat) then
17	         call util_file_name('densmat', .false.,.false.,file_mat1)
18	         if(ga_nodeid().eq.0)
19	     W        write(6,*) ' reading DM from file ',file_mat1
20	         call ao_1prdm_read(nbf_ao,g_dens(1),file_mat1)
21	      endif
22	
23	      if(ipol.eq.2) then
24	         if(densmat) then
25	            call errquit(' code not ready for open-shell ',0,CAPMIS_ERR)
26	            call util_file_name('densmat', .false.,.false.,file_mat1)
27	            if(ga_nodeid().eq.0)
28	     W           write(6,*) ' reading DM from file ',file_mat1
29	            call ao_1prdm_read(nbf_ao,g_dens(2),file_mat1)
30	         else
31	            call ga_copy(g_dens(1),g_dens(2))
32	            call ga_dscal(g_dens(1),dble(ntotel-nclosed)/(ntotel))
33	            call ga_dscal(g_dens(2),dble(nclosed)/(ntotel))
34	         endif
35	      endif
36	      if(oskel) then
37	        call ga_symmetrize(g_dens(1))
38	        if(ipol.eq.2) call ga_symmetrize(g_dens(2))
39	      endif
40	      return
41	      end
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O3 -unroll -ip -xCORE-AVX2 -g -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled


Begin optimization report for: DFT_DENCVG

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_DENCVG) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dencvg.F(1,33)
  -> EXTERN: (20,12) ga_sync_
  -> EXTERN: (21,10) ga_nodeid_
  -> EXTERN: (22,13) ga_nnodes_
  -> EXTERN: (31,12) ga_distribution_
  -> EXTERN: (32,12) ga_nodeid_
  -> EXTERN: (37,23) ma_push_get_
  -> EXTERN: (38,18) errquit_
  -> EXTERN: (39,23) ma_push_get_
  -> EXTERN: (40,18) errquit_
  -> EXTERN: (41,18) ga_get_
  -> EXTERN: (43,18) ga_get_
  -> EXTERN: (48,21) ma_chop_stack_
  -> EXTERN: (49,18) errquit_
  -> EXTERN: (69,12) ga_dgop_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dencvg.F(45,13)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dencvg.F(46,16) ]
   remark #15315: loop was not vectorized: estimated number of iterations (2) is insufficient for vectorization
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 7.000 
   remark #15478: estimated potential speedup: 0.620 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   remark #25457: Number of partial sums replaced: 1
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dencvg.F(45,13)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dencvg.F(1,33):remark #34051: REGISTER ALLOCATION : [dft_dencvg_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dencvg.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     149
            Global    :      38
            Local     :     111
        Regenerable   :      83
        Spilled       :       5
        
    Routine stack
        Variables     :     104 bytes*
            Reads     :      12 [5.97e+00 ~ 6.0%]
            Writes    :       6 [3.43e+00 ~ 3.4%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dencvg.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O3 -unroll -ip -xCORE-AVX2 -g -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: disabled
!  -inline-max-per-compile: disabled
!
1	      double precision function dft_dencvg(g_dens,g_denso,nbf)
!INLINE REPORT: (DFT_DENCVG) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dencvg.F(1,33)
!  -> EXTERN: (20,12) ga_sync_
!  -> EXTERN: (21,10) ga_nodeid_
!  -> EXTERN: (22,13) ga_nnodes_
!  -> EXTERN: (31,12) ga_distribution_
!  -> EXTERN: (32,12) ga_nodeid_
!  -> EXTERN: (37,23) ma_push_get_
!  -> EXTERN: (38,18) errquit_
!  -> EXTERN: (39,23) ma_push_get_
!  -> EXTERN: (40,18) errquit_
!  -> EXTERN: (41,18) ga_get_
!  -> EXTERN: (43,18) ga_get_
!  -> EXTERN: (48,21) ma_chop_stack_
!  -> EXTERN: (49,18) errquit_
!  -> EXTERN: (69,12) ga_dgop_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dencvg.F(1,33):remark #34051: REGISTER ALLOCATION : [dft_dencvg_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dencvg.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm7]
!        
!    Routine temporaries
!        Total         :     149
!            Global    :      38
!            Local     :     111
!        Regenerable   :      83
!        Spilled       :       5
!        
!    Routine stack
!        Variables     :     104 bytes*
!            Reads     :      12 [5.97e+00 ~ 6.0%]
!            Writes    :       6 [3.43e+00 ~ 3.4%]
!        Spills        :       0 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       0 [0.00e+00 ~ 0.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	C$Id$
3	      implicit none
4	#include "errquit.fh"
5	c
6	      integer g_dens ! GA handle for Densit Matrix [input/output]
7	      integer g_denso ! GA handle for old DM [input]
8	      integer nbf
9	c
10	#include "mafdecls.fh"
11	#include "global.fh"
12	#include "tcgmsg.fh"
13	#include "msgids.fh"
14	c
15	      integer me,nproc,i,j
16	      integer ldm,idm,ldmo,idmo
17	      integer ilo,jlo,ihi,jhi,numi,numj
18	      double precision rms
19	c
20	      call ga_sync
21	      me=ga_nodeid()
22	      nproc=ga_nnodes()
23	c     
24	c--   >  Evaluate change in energy.
25	c     
26	c--   >  Check for density matrix convergence.
27	c     
28	
29	      rms = 0.0d0
30	#if 1
31	      call ga_distribution(g_dens,
32	     .     ga_nodeid(), ilo, ihi, jlo, jhi)
33	      if (ilo.gt.0 .and. ilo.le.ihi) then
34	         numi =  ihi-ilo+1
35	         numj =  jhi-jlo+1
36	         if (numi.gt.0 .and. numj.gt.0) then
37	            if (.not. MA_Push_Get(MT_Dbl,numi*numj,'dmat',ldm, idm))
38	     &           call errquit('dft_dencvg: failed to alloc tmpm',0,0)
39	            if (.not. MA_Push_Get(MT_Dbl, numi*numj,'dmato',ldmo,idmo))
40	     &           call errquit('dft_dencvg: failed to alloc tmpm',0,0)
41	            call ga_get(g_dens,ilo,ihi,jlo,jhi,
42	     .           dbl_mb(idm),numi)
43	            call ga_get(g_denso,ilo,ihi,jlo,jhi,
44	     .           dbl_mb(idmo),numi)
45	            do j=0,numi*numj-1
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dencvg.F(45,13)
!   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dencvg.F(46,16) ]
!   remark #15315: loop was not vectorized: estimated number of iterations (2) is insufficient for vectorization
!   remark #15450: unmasked unaligned unit stride loads: 2 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 11 
!   remark #15477: vector cost: 7.000 
!   remark #15478: estimated potential speedup: 0.620 
!   remark #15488: --- end vector cost summary ---
!   remark #25439: unrolled with remainder by 2  
!   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
!   remark #25457: Number of partial sums replaced: 1
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_dencvg.F(45,13)
!<Remainder>
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
46	               rms=rms+(DBL_MB(idm+j)-DBL_MB(idmo+j))**2
47	            enddo
48	            if(.not.ma_chop_stack(ldm))
49	     &           call errquit('dft_dencvg: cannot pop stack',0, MA_ERR)
50	            endif
51	         endif
52	#else
53	      if(.not.MA_Push_Get(MT_Dbl,nbf,'dmat',ldm,idm))
54	     &  call errquit('dft_dencvg: cannot allocate dmat',0, MA_ERR)
55	      if(.not.MA_Push_Get(MT_Dbl,nbf,'dmatold',ldmo,idmo))
56	     &  call errquit('dft_dencvg: cannot allocate dmatold',0, MA_ERR)
57	      do i=1+me,nbf,nproc
58	        call get_col(g_dens,nbf,i,Dbl_MB(idm))
59	        call get_col(g_denso,nbf,i,Dbl_MB(idmo))
60	        do j=0,nbf-1
61	          rms=rms+(DBL_MB(idm+j)-DBL_MB(idmo+j))**2
62	        enddo
63	      enddo
64	      if(.not.ma_pop_stack(ldmo))
65	     &  call errquit('dft_dencvg: cannot pop stack',0, MA_ERR)
66	      if(.not.ma_pop_stack(ldm))
67	     &  call errquit('dft_dencvg: cannot pop stack',0, MA_ERR)
68	#endif
69	      call ga_dgop(Msg_rms_dens,rms,1,'+')
70	      dft_dencvg = rms/dble(nbf*nbf)
71	
72	      return
73	      end
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O3 -unroll -ip -xCORE-AVX2 -g -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled


Begin optimization report for: DFT_DENSM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_DENSM) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(2,18)
  -> EXTERN: (71,10) ga_nodeid_
  -> EXTERN: (72,13) ga_nnodes_
  -> EXTERN: (80,13) rtdb_get_
  -> EXTERN: (83,14) for_write_seq_lis
  -> EXTERN: (83,14) for_write_seq_lis_xmit
  -> (88,20) DFT_FON
  -> INLINE: (91,18) DFT_FOCDM
    -> EXTERN: (444,12) ga_nodeid_
    -> EXTERN: (445,15) ga_nnodes_
    -> EXTERN: (449,17) ma_push_get_
    -> EXTERN: (450,10) errquit_
    -> EXTERN: (451,17) ga_duplicate_
    -> EXTERN: (452,10) errquit_
    -> EXTERN: (453,12) ga_zero_
    -> EXTERN: (458,18) get_col_
    -> EXTERN: (459,18) dscal_
    -> EXTERN: (460,18) put_col_
    -> EXTERN: (464,12) ga_sync_
    -> EXTERN: (465,12) ga_dgemm_
    -> EXTERN: (467,16) ma_pop_stack_
    -> EXTERN: (468,10) errquit_
    -> EXTERN: (469,17) ga_destroy_
    -> EXTERN: (469,36) errquit_
  -> EXTERN: (99,21) pstat_on_
  -> EXTERN: (103,16) rtdb_get_
  -> EXTERN: (106,18) dft_frac_mo_
  -> INLINE: (107,18) DFT_FOCDM
    -> EXTERN: (444,12) ga_nodeid_
    -> EXTERN: (445,15) ga_nnodes_
    -> EXTERN: (449,17) ma_push_get_
    -> EXTERN: (450,10) errquit_
    -> EXTERN: (451,17) ga_duplicate_
    -> EXTERN: (452,10) errquit_
    -> EXTERN: (453,12) ga_zero_
    -> EXTERN: (458,18) get_col_
    -> EXTERN: (459,18) dscal_
    -> EXTERN: (460,18) put_col_
    -> EXTERN: (464,12) ga_sync_
    -> EXTERN: (465,12) ga_dgemm_
    -> EXTERN: (467,16) ma_pop_stack_
    -> EXTERN: (468,10) errquit_
    -> EXTERN: (469,17) ga_destroy_
    -> EXTERN: (469,36) errquit_
  -> EXTERN: (113,18) ga_dgemm_
  -> EXTERN: (119,21) pstat_off_
  -> EXTERN: (123,19) ma_push_get_
  -> EXTERN: (124,12) errquit_
  -> EXTERN: (147,19) ga_duplicate_
  -> EXTERN: (148,12) errquit_
  -> EXTERN: (149,14) ga_zero_
  -> EXTERN: (151,16) dfill_
  -> (154,18) DFT_ZERO
  -> (156,18) DFT_ZERO
  -> (161,18) DFT_ZERO
  -> EXTERN: (178,32) util_erfc_
  -> EXTERN: (185,16) ga_zero_
  -> EXTERN: (186,16) ga_distribution_
  -> EXTERN: (187,14) ga_nodeid_
  -> EXTERN: (192,25) ma_push_get_
  -> EXTERN: (193,33) errquit_
  -> EXTERN: (195,20) ga_get_
  -> EXTERN: (200,24) dscal_
  -> EXTERN: (203,24) dcopy_
  -> EXTERN: (207,20) ga_put_
  -> EXTERN: (209,24) ma_pop_stack_
  -> EXTERN: (209,45) errquit_
  -> EXTERN: (216,16) ga_sync_
  -> EXTERN: (217,16) ga_dgemm_
  -> EXTERN: (220,19) ga_destroy_
  -> EXTERN: (220,38) errquit_
  -> EXTERN: (230,27) exp
  -> EXTERN: (234,29) exp
  -> EXTERN: (238,13) ga_nodeid_
  -> EXTERN: (239,13) util_print_
  -> EXTERN: (240,12) for_write_seq_fmt_xmit
  -> EXTERN: (240,12) for_write_seq_fmt_xmit
  -> EXTERN: (240,12) for_write_seq_fmt_xmit
  -> EXTERN: (240,12) for_write_seq_fmt_xmit
  -> EXTERN: (240,12) for_write_seq_fmt_xmit
  -> EXTERN: (240,12) for_write_seq_fmt
  -> EXTERN: (240,12) for_write_seq_fmt_xmit
  -> EXTERN: (252,19) f_ldnint_val
  -> EXTERN: (253,33) f_ldnint_val


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(90,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between focc((isp-1)*nbf+1) (91:18) and focc(i) (459:18)

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(454,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(91,18)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(172,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(175,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (176:13) and x (178:32)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(175,11)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(198,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(198,15)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(213,11)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(213,11)
      remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(214,13) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 3.340 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(213,11)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 3.340 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(213,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(227,10)
<Peeled loop for vectorization, Predicate Optimized v1>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(227,10)
<Predicate Optimized v1>
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(228,12) ]
   remark #25422: Invariant Condition at line 231 hoisted out of this loop
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 237 
   remark #15477: vector cost: 83.250 
   remark #15478: estimated potential speedup: 2.770 
   remark #15482: vectorized math library calls: 2 
   remark #15486: divides: 4 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(227,10)
<Remainder loop for vectorization, Predicate Optimized v1>
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(227,10)
<Peeled loop for vectorization, Predicate Optimized v2>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(227,10)
<Predicate Optimized v2>
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 118 
   remark #15477: vector cost: 41.500 
   remark #15478: estimated potential speedup: 2.760 
   remark #15482: vectorized math library calls: 1 
   remark #15486: divides: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(227,10)
<Remainder loop for vectorization, Predicate Optimized v2>
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(240,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between f3%f3 (240:12) and f3 (240:12)
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(105,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(454,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(107,18)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(112,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (114:19) and at (113:18)
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(2,18):remark #34051: REGISTER ALLOCATION : [dft_densm_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F:2

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     999
            Global    :     276
            Local     :     723
        Regenerable   :     462
        Spilled       :      46
        
    Routine stack
        Variables     :     328 bytes*
            Reads     :      26 [9.50e-01 ~ 0.9%]
            Writes    :      28 [1.50e+00 ~ 1.5%]
        Spills        :     328 bytes*
            Reads     :      95 [6.75e+00 ~ 6.8%]
            Writes    :      67 [3.04e+00 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_ZERO

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_ZERO) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(265,18)
  -> INLINE: (311,12) FZERO
    -> EXTERN: (409,13) util_erfc_
    -> EXTERN: (412,13) util_erfc_
  -> INLINE: (313,12) FZERO
    -> EXTERN: (409,13) util_erfc_
    -> EXTERN: (412,13) util_erfc_
  -> INLINE: (315,12) FZERO
    -> EXTERN: (409,13) util_erfc_
    -> EXTERN: (412,13) util_erfc_
  -> EXTERN: (321,13) ga_nodeid_
  -> EXTERN: (321,31) for_write_seq_lis_xmit
  -> EXTERN: (321,31) for_write_seq_lis_xmit
  -> EXTERN: (321,31) for_write_seq_lis_xmit
  -> EXTERN: (321,31) for_write_seq_lis
  -> EXTERN: (323,13) ga_nodeid_
  -> EXTERN: (323,31) for_write_seq_lis_xmit
  -> EXTERN: (323,31) for_write_seq_lis_xmit
  -> EXTERN: (323,31) for_write_seq_lis_xmit
  -> EXTERN: (323,31) for_write_seq_lis
  -> EXTERN: (325,13) errquit_
  -> EXTERN: (364,13) ga_nodeid_
  -> EXTERN: (365,13) for_write_seq_lis
  -> INLINE: (374,12) FZERO
    -> EXTERN: (409,13) util_erfc_
    -> EXTERN: (412,13) util_erfc_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(309,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(407,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(311,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (408:10) and x (409:13)
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(407,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(313,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (408:10) and x (409:13)
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(407,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(315,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (408:10) and x (409:13)
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(331,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(407,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(718,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (408:10) and x (409:13)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(265,18):remark #34051: REGISTER ALLOCATION : [dft_zero_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F:265

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :     242
            Global    :      90
            Local     :     152
        Regenerable   :     104
        Spilled       :      37
        
    Routine stack
        Variables     :     224 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      23 [4.10e+00 ~ 4.1%]
        Spills        :     248 bytes*
            Reads     :     102 [1.14e+01 ~ 11.4%]
            Writes    :      97 [8.87e+00 ~ 8.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_FON

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_FON) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(480,24)
  -> EXTERN: (510,17) rtdb_get_
  -> EXTERN: (515,16) rtdb_get_
  -> EXTERN: (520,16) rtdb_get_
  -> EXTERN: (524,9) for_write_seq_lis
  -> EXTERN: (524,9) for_write_seq_lis_xmit
  -> EXTERN: (524,9) for_write_seq_lis_xmit
  -> EXTERN: (524,9) for_write_seq_lis_xmit
  -> EXTERN: (525,9) for_write_seq_lis
  -> EXTERN: (525,9) for_write_seq_lis_xmit
  -> EXTERN: (531,12) errquit_
  -> EXTERN: (533,12) errquit_
  -> EXTERN: (553,26) errquit_
  -> EXTERN: (562,15) for_write_seq_lis_xmit
  -> EXTERN: (562,15) for_write_seq_lis
  -> EXTERN: (562,15) for_write_seq_lis_xmit
  -> EXTERN: (567,39) errquit_
  -> EXTERN: (572,15) for_write_seq_lis_xmit
  -> EXTERN: (572,15) for_write_seq_lis_xmit
  -> EXTERN: (572,15) for_write_seq_lis
  -> EXTERN: (579,24) errquit_
  -> EXTERN: (584,15) for_write_seq_lis_xmit
  -> EXTERN: (584,15) for_write_seq_lis_xmit
  -> EXTERN: (584,15) for_write_seq_lis
  -> EXTERN: (589,34) errquit_
  -> EXTERN: (598,15) for_write_seq_lis_xmit
  -> EXTERN: (598,15) for_write_seq_lis_xmit
  -> EXTERN: (598,15) for_write_seq_lis
  -> EXTERN: (603,34) errquit_
  -> EXTERN: (612,14) for_write_seq_lis_xmit
  -> EXTERN: (612,14) for_write_seq_lis_xmit
  -> EXTERN: (612,14) for_write_seq_lis
  -> EXTERN: (618,9) for_write_seq_lis
  -> EXTERN: (618,9) for_write_seq_lis_xmit
  -> EXTERN: (619,9) for_write_seq_lis
  -> EXTERN: (619,9) for_write_seq_lis_xmit
  -> EXTERN: (620,9) for_write_seq_lis
  -> EXTERN: (620,9) for_write_seq_lis_xmit


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(529,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(544,9)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(544,9)
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 1.440 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(544,9)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(552,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(566,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(578,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(588,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(602,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(544,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(544,9):remark #34026: call to memset implemented as a call to optimized library version
/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(480,24):remark #34051: REGISTER ALLOCATION : [dft_fon_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F:480

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     346
            Global    :      72
            Local     :     274
        Regenerable   :     262
        Spilled       :      27
        
    Routine stack
        Variables     :     408 bytes*
            Reads     :      12 [3.03e+00 ~ 3.0%]
            Writes    :      56 [2.37e+00 ~ 2.4%]
        Spills        :     176 bytes*
            Reads     :      89 [1.04e+01 ~ 10.4%]
            Writes    :      69 [5.61e+00 ~ 5.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DFT_FOCDM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_FOCDM) [4] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(425,18)
  -> EXTERN: (444,12) ga_nodeid_
  -> EXTERN: (445,15) ga_nnodes_
  -> EXTERN: (449,17) ma_push_get_
  -> EXTERN: (450,10) errquit_
  -> EXTERN: (451,17) ga_duplicate_
  -> EXTERN: (452,10) errquit_
  -> EXTERN: (453,12) ga_zero_
  -> EXTERN: (458,18) get_col_
  -> EXTERN: (459,18) dscal_
  -> EXTERN: (460,18) put_col_
  -> EXTERN: (464,12) ga_sync_
  -> EXTERN: (465,12) ga_dgemm_
  -> EXTERN: (467,16) ma_pop_stack_
  -> EXTERN: (468,10) errquit_
  -> EXTERN: (469,17) ga_destroy_
  -> EXTERN: (469,36) errquit_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(454,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(425,18):remark #34051: REGISTER ALLOCATION : [dft_focdm_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F:425

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     135
            Global    :      32
            Local     :     103
        Regenerable   :      77
        Spilled       :       9
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       5 [1.73e+00 ~ 1.7%]
            Writes    :       3 [9.22e-01 ~ 0.9%]
        Spills        :      24 bytes*
            Reads     :       7 [3.09e+00 ~ 3.1%]
            Writes    :       3 [1.71e+00 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FZERO

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FZERO) [5] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(386,33)
  -> EXTERN: (409,13) util_erfc_
  -> EXTERN: (412,13) util_erfc_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(407,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between x (408:10) and x (409:13)
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(386,33):remark #34051: REGISTER ALLOCATION : [fzero_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F:386

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :      49
            Global    :      26
            Local     :      23
        Regenerable   :       9
        Spilled       :      14
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [3.73e+00 ~ 3.7%]
        Spills        :     112 bytes*
            Reads     :      18 [8.70e+00 ~ 8.7%]
            Writes    :      19 [9.46e+00 ~ 9.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O3 -unroll -ip -xCORE-AVX2 -g -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: disabled
!  -inline-max-per-compile: disabled
!
1	c
2	      subroutine dft_densm(g_dens,g_vecs,nbf,nmo,ipol,
!INLINE REPORT: (DFT_DENSM) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(2,18)
!  -> EXTERN: (71,10) ga_nodeid_
!  -> EXTERN: (72,13) ga_nnodes_
!  -> EXTERN: (80,13) rtdb_get_
!  -> EXTERN: (83,14) for_write_seq_lis
!  -> EXTERN: (83,14) for_write_seq_lis_xmit
!  -> (88,20) DFT_FON
!  -> INLINE: (91,18) DFT_FOCDM
!    -> EXTERN: (444,12) ga_nodeid_
!    -> EXTERN: (445,15) ga_nnodes_
!    -> EXTERN: (449,17) ma_push_get_
!    -> EXTERN: (450,10) errquit_
!    -> EXTERN: (451,17) ga_duplicate_
!    -> EXTERN: (452,10) errquit_
!    -> EXTERN: (453,12) ga_zero_
!    -> EXTERN: (458,18) get_col_
!    -> EXTERN: (459,18) dscal_
!    -> EXTERN: (460,18) put_col_
!    -> EXTERN: (464,12) ga_sync_
!    -> EXTERN: (465,12) ga_dgemm_
!    -> EXTERN: (467,16) ma_pop_stack_
!    -> EXTERN: (468,10) errquit_
!    -> EXTERN: (469,17) ga_destroy_
!    -> EXTERN: (469,36) errquit_
!  -> EXTERN: (99,21) pstat_on_
!  -> EXTERN: (103,16) rtdb_get_
!  -> EXTERN: (106,18) dft_frac_mo_
!  -> INLINE: (107,18) DFT_FOCDM
!    -> EXTERN: (444,12) ga_nodeid_
!    -> EXTERN: (445,15) ga_nnodes_
!    -> EXTERN: (449,17) ma_push_get_
!    -> EXTERN: (450,10) errquit_
!    -> EXTERN: (451,17) ga_duplicate_
!    -> EXTERN: (452,10) errquit_
!    -> EXTERN: (453,12) ga_zero_
!    -> EXTERN: (458,18) get_col_
!    -> EXTERN: (459,18) dscal_
!    -> EXTERN: (460,18) put_col_
!    -> EXTERN: (464,12) ga_sync_
!    -> EXTERN: (465,12) ga_dgemm_
!    -> EXTERN: (467,16) ma_pop_stack_
!    -> EXTERN: (468,10) errquit_
!    -> EXTERN: (469,17) ga_destroy_
!    -> EXTERN: (469,36) errquit_
!  -> EXTERN: (113,18) ga_dgemm_
!  -> EXTERN: (119,21) pstat_off_
!  -> EXTERN: (123,19) ma_push_get_
!  -> EXTERN: (124,12) errquit_
!  -> EXTERN: (147,19) ga_duplicate_
!  -> EXTERN: (148,12) errquit_
!  -> EXTERN: (149,14) ga_zero_
!  -> EXTERN: (151,16) dfill_
!  -> (154,18) DFT_ZERO
!  -> (156,18) DFT_ZERO
!  -> (161,18) DFT_ZERO
!  -> EXTERN: (178,32) util_erfc_
!  -> EXTERN: (185,16) ga_zero_
!  -> EXTERN: (186,16) ga_distribution_
!  -> EXTERN: (187,14) ga_nodeid_
!  -> EXTERN: (192,25) ma_push_get_
!  -> EXTERN: (193,33) errquit_
!  -> EXTERN: (195,20) ga_get_
!  -> EXTERN: (200,24) dscal_
!  -> EXTERN: (203,24) dcopy_
!  -> EXTERN: (207,20) ga_put_
!  -> EXTERN: (209,24) ma_pop_stack_
!  -> EXTERN: (209,45) errquit_
!  -> EXTERN: (216,16) ga_sync_
!  -> EXTERN: (217,16) ga_dgemm_
!  -> EXTERN: (220,19) ga_destroy_
!  -> EXTERN: (220,38) errquit_
!  -> EXTERN: (230,27) exp
!  -> EXTERN: (234,29) exp
!  -> EXTERN: (238,13) ga_nodeid_
!  -> EXTERN: (239,13) util_print_
!  -> EXTERN: (240,12) for_write_seq_fmt_xmit
!  -> EXTERN: (240,12) for_write_seq_fmt_xmit
!  -> EXTERN: (240,12) for_write_seq_fmt_xmit
!  -> EXTERN: (240,12) for_write_seq_fmt_xmit
!  -> EXTERN: (240,12) for_write_seq_fmt_xmit
!  -> EXTERN: (240,12) for_write_seq_fmt
!  -> EXTERN: (240,12) for_write_seq_fmt_xmit
!  -> EXTERN: (252,19) f_ldnint_val
!  -> EXTERN: (253,33) f_ldnint_val
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(2,18):remark #34051: REGISTER ALLOCATION : [dft_densm_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F:2
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
!        
!    Routine temporaries
!        Total         :     999
!            Global    :     276
!            Local     :     723
!        Regenerable   :     462
!        Spilled       :      46
!        
!    Routine stack
!        Variables     :     328 bytes*
!            Reads     :      26 [9.50e-01 ~ 0.9%]
!            Writes    :      28 [1.50e+00 ~ 1.5%]
!        Spills        :     328 bytes*
!            Reads     :      95 [6.75e+00 ~ 6.8%]
!            Writes    :      67 [3.04e+00 ~ 3.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
3	     ,     geom,AO_bas_han,noc,ntotel,
4	     ,	evals,focc,ssmear,tdots,
5	     ,     iter,search0,
6	     .     fon, nel_fon,nmo_fon,ncore_fon,
7	     .                     spinset, rtdb)
8	c
9	      implicit none
10	c
11	#include "errquit.fh"
12	#include "bas.fh"
13	#include "geom.fh"
14	#include "mafdecls.fh"
15	#include "stdio.fh"
16	#include "global.fh"
17	#include "msgids.fh"
18	#include "dftps.fh"
19	#include "util.fh"
20	#include "rtdb.fh" 
21	c
22	      integer geom
23	      integer AO_bas_han
24	      integer ipol                  ! no. of spin states
25	      integer g_dens(2)
26	      integer g_vecs(2)
27	      integer nbf,nmo(2)
28	      logical spinset
29	      integer noc(2)             ! no. of occupied levels
30	      integer ntotel,iter
31	      double precision focc(nbf*ipol)! occupation no.
32	      double precision evals(ipol*nbf)
33	      double precision ssmear       ! smearing sigma
34	      double precision tdots       ! total energy
35	      logical search0,fon
36	      double precision nel_fon(4)
37	      integer ncore_fon(2), nmo_fon(4)
38	      integer ilo,ihi,jlo,jhi,numi,numj,icount
39	c
40	      integer i,isp,g_tmp
41	      integer me, nproc
42	      double precision zero,toll,efermi(2)
43	      double precision cksum,ntot(2)
44	      integer ltmpm,itmpm,ipoint
45	      double precision sqrtpi,kbau,eps,rhfuhf
46	      double precision one,x,xb
47	      double precision util_erfc
48	      external util_erfc
49	      integer nocsave(2)
50	c
51	      logical dft_fon
52	      external dft_fon
53	c
54	      double precision undovl
55	      parameter(undovl=-20d0*2.3025d0)
56	      parameter (zero=0.d0,toll=1.d-9,one=1.d0,
57	     ,   kbau=1.d0,eps=1.d-4)
58	c
59	      integer rtdb         ! FA-02-22-11, for occupations
60	      integer switch_focc  ! FA-02-22-11, for occupations
61	      logical status       ! FA-02-22-11, for occupations
62	      double precision anoc(2),new_ntotel
63	      logical debug_fon
64	      logical no_avg_fon
65	      integer nocinit
66	      save nocinit,anoc
67	      data nocinit /1/
68	c
69	c     preliminaries
70	      sqrtpi=sqrt(acos(-1d0))
71	      me=ga_nodeid()
72	      nproc=ga_nnodes()
73	      rhfuhf=2d0
74	      nocsave(1)=-1
75	      nocsave(2)=-2
76	      if(ipol.eq.2) rhfuhf=1d0
77	c       
78	c     check degener
79	c       
80	        if (rtdb_get(rtdb, 'dft:debugfon', mt_log, 1,
81	     &     debug_fon)) then
82	          if (debug_fon .and. me.eq.0)
83	     &       write(luout,*) "fractional occupation (fon) is on ",fon
84	        end if
85	c
86	c       average fractional occupations (leading orbitals)
87	        if (fon) then
88	          status = dft_fon(rtdb,nmo_fon,ncore_fon,nel_fon,
89	     .       nbf,ntotel,focc,noc,ipol,me)
90	          do isp=1,ipol
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(90,11)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed ANTI dependence between focc((isp-1)*nbf+1) (91:18) and focc(i) (459:18)
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(454,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(91,18)
!      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!   LOOP END
!LOOP END
91	            call dft_focdm(focc(1+(isp-1)*nbf),noc(isp),geom,
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(90,11)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed ANTI dependence between focc((isp-1)*nbf+1) (91:18) and focc(i) (459:18)
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(454,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(91,18)
!      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!   LOOP END
!LOOP END
92	     &         AO_bas_han,nbf,g_vecs(isp),g_dens(isp),toll)
93	          enddo
94	          if(ssmear.lt.toll)return
95	        endif ! fon
96	c
97	      if(ssmear.lt.toll.or.iter.lt.-1) then
98	c
99	        if (odftps) call pstat_on(ps_dgemm)
100	c
101	c       fractional occupation by orbital
102	        switch_focc=0
103	        status=rtdb_get(rtdb,'focc:occup_switch', mt_int,1,switch_focc)
104	        if (switch_focc.eq.1 .and. status) then ! using specified occupations
105	          do isp=1,ipol
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(105,11)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(454,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(107,18)
!      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!   LOOP END
!LOOP END
106	            call dft_frac_mo(rtdb,g_vecs(isp),focc,nbf,ipol,ntotel)
107	            call dft_focdm(focc(1+(isp-1)*nbf),noc(isp),geom,
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(105,11)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(454,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(107,18)
!      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!   LOOP END
!LOOP END
108	     &         AO_bas_han,nbf,g_vecs(isp),g_dens(isp),toll)
109	          enddo  ! isp
110	          return
111	        else                    ! default occupations
112	          do isp=1,ipol
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(112,11)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed OUTPUT dependence between at (114:19) and at (113:18)
!LOOP END
113	            call ga_dgemm('N', 'T', nbf, nbf, noc(isp),
114	     $         2d0/dble(ipol), g_vecs(isp),g_vecs(isp),
115	     $         zero, g_dens(isp))
116	          enddo
117	        endif                   ! switch_focc
118	
119	        if (odftps) call pstat_off(ps_dgemm)
120	c
121	      else	  ! with smearing
122	c
123	        if (.not. MA_Push_Get(MT_Dbl, nbf, 'tmpm', ltmpm, itmpm))
124	     &     call errquit('dftdensm: failed to alloc tmpm',nbf, MA_ERR)
125	c
126	c     fon
127	c
128	        if(nocinit.eq.1) then
129	           if(fon) then
130	              anoc(1)=ncore_fon(1)+nel_fon(1)
131	              anoc(2)=0d0
132	              if(ipol.eq.2)anoc(2)=ncore_fon(2)+nel_fon(2)
133	              nocinit=0
134	           else
135	              anoc(1)=noc(1)
136	              anoc(2)=0d0
137	              if(ipol.eq.2) anoc(2)=noc(2)
138	              nocinit=1
139	           endif
140	        endif
141	        new_ntotel=rhfuhf*(anoc(1)+anoc(2))
142	c       
143	c       initialize ef
144	c       
145	        efermi(1)=0.d0
146	        efermi(2)=0.d0
147	        if (.not. ga_duplicate(g_dens, g_tmp, 'ga_temp'))
148	     &     call errquit('dft_densm: error creating ga',0,GA_ERR)
149	        call ga_zero(g_tmp)
150	        if(search0)then
151	          call dfill(nbf*ipol, 0.d0, focc, 1)
152	          if(spinset.and.ipol.eq.2) then
153	            nmo(2)=0
154	            call dft_zero(2,nbf,nmo,anoc(1),efermi(1),evals,
155	     ,         ssmear,toll,.true.)
156	            call dft_zero(2,nbf,nmo,anoc(2),efermi(2),evals(nbf+1),
157	     .         ssmear,toll,.true.)
158	            nmo(2)=nmo(1)
159	          else
160	cold            call dft_zero(ipol,nbf,nmo,ntotel,efermi(1),evals,ssmear,
161	            call dft_zero(ipol,nbf,nmo,new_ntotel,
162	     E            efermi(1),evals,ssmear,
163	     .         toll,spinset)
164	            efermi(2)=efermi(1)
165	          endif
166	        else
167	          if(spinset) then
168	            nocsave(1)=noc(1)
169	            if(ipol.eq.2) nocsave(2)=noc(2)
170	          endif
171	        endif
172	        do isp=1,ipol
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(172,9)
!   remark #15542: loop was not vectorized: inner loop was already vectorized
!   remark #25015: Estimate of max trip count of loop=2
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(175,11)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed OUTPUT dependence between x (176:13) and x (178:32)
!      remark #25439: unrolled with remainder by 2  
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(175,11)
!   <Remainder>
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(198,15)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #25439: unrolled with remainder by 2  
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(198,15)
!   <Remainder>
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(213,11)
!   <Peeled loop for vectorization>
!      remark #25015: Estimate of max trip count of loop=3
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(213,11)
!      remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(214,13) ]
!      remark #15300: LOOP WAS VECTORIZED
!      remark #15442: entire loop may be executed in remainder
!      remark #15450: unmasked unaligned unit stride loads: 1 
!      remark #15475: --- begin vector cost summary ---
!      remark #15476: scalar cost: 5 
!      remark #15477: vector cost: 1.250 
!      remark #15478: estimated potential speedup: 3.340 
!      remark #15488: --- end vector cost summary ---
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(213,11)
!   <Remainder loop for vectorization>
!      remark #15301: REMAINDER LOOP WAS VECTORIZED
!      remark #15442: entire loop may be executed in remainder
!      remark #15450: unmasked unaligned unit stride loads: 1 
!      remark #15475: --- begin vector cost summary ---
!      remark #15476: scalar cost: 5 
!      remark #15477: vector cost: 1.250 
!      remark #15478: estimated potential speedup: 3.340 
!      remark #15488: --- end vector cost summary ---
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(213,11)
!   <Remainder loop for vectorization>
!   LOOP END
!LOOP END
173	          ntot(isp)=0.d0
174	          ipoint=(isp-1)*nbf
175	          do i = 1, nmo(isp)
176	            x=(evals(ipoint+i)-efermi(isp))/ssmear
177	            if(search0)
178	     *         focc(i+ipoint)= util_erfc(x)*0.5d0*rhfuhf
179	            if(focc(i+ipoint).gt.toll) then
180	              noc(isp)=i
181	            else
182	              focc(i+ipoint)=0.d0
183	            endif
184	          enddo
185	          call ga_zero(g_tmp)
186	          call ga_distribution(g_vecs(isp),
187	     .       ga_nodeid(), ilo, ihi, jlo, jhi)
188	          if (ilo.gt.0 .and. ilo.le.ihi) then
189	            numi =  ihi-ilo+1
190	            numj =  jhi-jlo+1
191	            if (numi.gt.0 .and. numj.gt.0) then
192	              if (.not. MA_Push_Get(MT_Dbl, numi*numj, 'matS',
193	     T           ltmpm, itmpm)) call errquit(
194	     T           'dftdensm: failed to alloc tmpm',0,0)
195	              call ga_get(g_vecs(isp),ilo,ihi,jlo,jhi,
196	     .           dbl_mb(itmpm),numi)
197	              icount=itmpm
198	              do i=jlo,jhi
199	                if(focc(i+ipoint).gt.toll) then
200	                  call dscal(numi, focc(i+ipoint), 
201	     D               DBL_MB(icount), 1)
202	                else
203	                  call dcopy(numi, 0d0,0, DBL_MB(icount), 1)
204	                endif
205	                icount=icount+numi
206	              enddo
207	              call ga_put(g_tmp,ilo,ihi,jlo,jhi,
208	     .           dbl_mb(itmpm),numi)
209	              if (.not.ma_pop_stack(ltmpm)) call errquit
210	     T           ('dft_densm: cannot pop stack',0, MA_ERR)
211	            endif
212	          endif 
213	          do i=1,nmo(isp)
214	            ntot(isp)=ntot(isp)+focc(i+ipoint)
215	          enddo
216	          call ga_sync()
217	          call ga_dgemm('N', 'T', nbf, nbf, noc(isp),1.d0,g_tmp,
218	     $       g_vecs(isp), zero, g_dens(isp))
219	        enddo                   ! end of loop over spins
220	        if (.not. ga_destroy(g_tmp)) call errquit
221	     &     ('dft_densm: could not destroy g_tmp', 0, GA_ERR)
222	c       
223	c       compute entropy correction to total e
224	c     
225	        if(ssmear.gt.1d-8) then
226	          cksum=0.d0
227	         do i=1,nmo(1)
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(227,10)
!<Peeled loop for vectorization, Predicate Optimized v1>
!   remark #25015: Estimate of max trip count of loop=3
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(227,10)
!<Predicate Optimized v1>
!   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(228,12) ]
!   remark #25422: Invariant Condition at line 231 hoisted out of this loop
!   remark #15300: LOOP WAS VECTORIZED
!   remark #15442: entire loop may be executed in remainder
!   remark #15450: unmasked unaligned unit stride loads: 2 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 237 
!   remark #15477: vector cost: 83.250 
!   remark #15478: estimated potential speedup: 2.770 
!   remark #15482: vectorized math library calls: 2 
!   remark #15486: divides: 4 
!   remark #15488: --- end vector cost summary ---
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(227,10)
!<Remainder loop for vectorization, Predicate Optimized v1>
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(227,10)
!<Peeled loop for vectorization, Predicate Optimized v2>
!   remark #25015: Estimate of max trip count of loop=3
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(227,10)
!<Predicate Optimized v2>
!   remark #15300: LOOP WAS VECTORIZED
!   remark #15442: entire loop may be executed in remainder
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 118 
!   remark #15477: vector cost: 41.500 
!   remark #15478: estimated potential speedup: 2.760 
!   remark #15482: vectorized math library calls: 1 
!   remark #15486: divides: 2 
!   remark #15488: --- end vector cost summary ---
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(227,10)
!<Remainder loop for vectorization, Predicate Optimized v2>
!LOOP END
228	           x=(evals(i)-efermi(1))/ssmear
229	           if((-x*x).gt.undovl)
230	     a        cksum=cksum+exp(-x*x)/sqrtpi
231	           if(ipol.eq.2) then
232	             xb=(evals(i+nbf)-efermi(2))/ssmear
233	             if((-xb*xb).gt.undovl)
234	     b          cksum=cksum+exp(-xb*xb)/sqrtpi
235	           endif
236	         enddo
237	         tdots=tdots-cksum*ssmear*0.5d0*rhfuhf
238	         if(ga_nodeid().eq.0 .and.
239	     $      util_print('general information',print_default) ) then 
240	           write(LuOut,1688) ssmear,
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(240,12)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed OUTPUT dependence between f3%f3 (240:12) and f3 (240:12)
!   remark #25015: Estimate of max trip count of loop=2
!LOOP END
241	     ,        efermi(1),tdots,(i,ntot(i),i=1,ipol)
242	 1688      format(' sigma= ',d9.2,
243	     ,        ' eFermi= ',f8.5,' T*S= ',1p,e9.2,0p,
244	     ,        2(' nel(',i1,')=',f8.2)/) 
245	C          write(LuOut,1723) (focc(i),i=1,nbf*ipol)
246	C          1723       format(' Foccs ',(
247	         endif
248	       endif
249	c
250	       if(spinset) then
251	         if(search0) then
252	           noc(1)=nint(ntot(1)*ipol*0.5d0)
253	           if(ipol.eq.2) noc(2)=nint(ntot(2))
254	         else
255	           noc(1)=nocsave(1)
256	           noc(2)=nocsave(2)
257	         endif
258	       endif
259	c
260	      endif  ! smear
261	c
262	      return
263	      end
264	c
265	      subroutine dft_zero(ipol,nbf,nmo,
!INLINE REPORT: (DFT_ZERO) [2] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(265,18)
!  -> INLINE: (311,12) FZERO
!    -> EXTERN: (409,13) util_erfc_
!    -> EXTERN: (412,13) util_erfc_
!  -> INLINE: (313,12) FZERO
!    -> EXTERN: (409,13) util_erfc_
!    -> EXTERN: (412,13) util_erfc_
!  -> INLINE: (315,12) FZERO
!    -> EXTERN: (409,13) util_erfc_
!    -> EXTERN: (412,13) util_erfc_
!  -> EXTERN: (321,13) ga_nodeid_
!  -> EXTERN: (321,31) for_write_seq_lis_xmit
!  -> EXTERN: (321,31) for_write_seq_lis_xmit
!  -> EXTERN: (321,31) for_write_seq_lis_xmit
!  -> EXTERN: (321,31) for_write_seq_lis
!  -> EXTERN: (323,13) ga_nodeid_
!  -> EXTERN: (323,31) for_write_seq_lis_xmit
!  -> EXTERN: (323,31) for_write_seq_lis_xmit
!  -> EXTERN: (323,31) for_write_seq_lis_xmit
!  -> EXTERN: (323,31) for_write_seq_lis
!  -> EXTERN: (325,13) errquit_
!  -> EXTERN: (364,13) ga_nodeid_
!  -> EXTERN: (365,13) for_write_seq_lis
!  -> INLINE: (374,12) FZERO
!    -> EXTERN: (409,13) util_erfc_
!    -> EXTERN: (412,13) util_erfc_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(265,18):remark #34051: REGISTER ALLOCATION : [dft_zero_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F:265
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   25[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm9]
!        
!    Routine temporaries
!        Total         :     242
!            Global    :      90
!            Local     :     152
!        Regenerable   :     104
!        Spilled       :      37
!        
!    Routine stack
!        Variables     :     224 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :      23 [4.10e+00 ~ 4.1%]
!        Spills        :     248 bytes*
!            Reads     :     102 [1.14e+01 ~ 11.4%]
!            Writes    :      97 [8.87e+00 ~ 8.9%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
266	     ,     ntotel,efermi,evals,ssmear,toll,spinset)
267	      implicit none
268	#include "errquit.fh"
269	#include "global.fh"
270	#include "msgids.fh"
271	#include "stdio.fh"
272	      integer ipol
273	      integer nbf,nmo(2)
274	      double precision evals(nbf*ipol) 
275	      double precision ssmear
276	      double precision toll
277	cold      integer ntotel
278	      double precision ntotel
279	      double precision efermi
280	      logical spinset
281	c
282	      integer attempts,mx_attem
283	      double precision emax,emin,fmax,fmin,fmed,step
284	      parameter(mx_attem=200)
285	      external fzero
286	      double precision fzero
287	
288	      attempts=0
289	C
290	C     determine extrema of search
291	C
292	      if (ipol.eq.1) then
293	c
294	c     closed shell
295	c
296	         efermi=evals(int(ntotel/2))
297	      else
298	c
299	c     open shell
300	c
301	         if(spinset) then
302	            efermi=evals(int(ntotel/2))
303	         else
304	            efermi=0.5d0*(evals(int(ntotel/2))+
305	     +           evals(nbf+int(ntotel/2)))
306	         endif
307	      endif
308	      step=max(2.d0*ssmear,1.d0)
309	 11   emax=efermi+step
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(309,2)
!   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(407,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(311,12)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed OUTPUT dependence between x (408:10) and x (409:13)
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(407,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(313,12)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed OUTPUT dependence between x (408:10) and x (409:13)
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(407,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(315,12)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed OUTPUT dependence between x (408:10) and x (409:13)
!   LOOP END
!LOOP END
310	      emin=efermi-step
311	      fmax=fzero(
312	     *     ipol,emax,evals,nbf,nmo,ntotel,ssmear)
313	      fmin=fzero(
314	     *     ipol,emin,evals,nbf,nmo,ntotel,ssmear)
315	      fmed=fzero(
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(309,2)
!   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(407,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(311,12)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed OUTPUT dependence between x (408:10) and x (409:13)
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(407,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(313,12)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed OUTPUT dependence between x (408:10) and x (409:13)
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(407,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(315,12)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed OUTPUT dependence between x (408:10) and x (409:13)
!   LOOP END
!LOOP END
316	     *     ipol,efermi,evals,nbf,nmo,ntotel,ssmear)
317	C      if(abs(fmed).lt.toll) goto
318	      if(fmax*fmin.gt.0.d0) then
319	         attempts=attempts+1
320	      if(attempts.gt.mx_attem) then
321	         if(ga_nodeid().eq.0) write(0,*) ' efermi emax emin ',
322	     ,        efermi,emax,emin
323	         if(ga_nodeid().eq.0) write(0,*) ' fmed fmax fmin ',
324	     ,        fmed,fmax,fmin
325	       call errquit('dft_zero: extrema:too many attempts',mx_attem,
326	     &       CALC_ERR)
327	      endif
328	         step=step+step
329	         goto 11
330	      endif
331	      attempts=0
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(331,7)
!   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(407,7) inlined into /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(718,12)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed OUTPUT dependence between x (408:10) and x (409:13)
!   LOOP END
!LOOP END
332	c
333	c     bisection brute-force search
334	c
335	 1    continue
336	      attempts=attempts+1
337	      if(attempts.gt.mx_attem) then
338	#ifdef DEBUG
339	         if(ga_nodeid().eq.0) then
340	         write(LuOut,*) ' efermi emax emin ',
341	     ,        efermi,emax,emin
342	         write(LuOut,*) ' fmed fmax fmin ',fmed,fmax,fmin
343	         write(LuOut,*) 'ZERO could no reach required accuracy'
344	         endif
345	#endif
346	C         call errquit('dft_zero: too many attempts',mx_attem)     
347	         goto 1999
348	       endif
349	      if(fmax*fmed.gt.0) then
350	c	zero between emin and efermi
351	         emax=efermi
352	         fmax=fmed
353	      else	
354	c     zero between fmed and fmax
355	         emin=efermi
356	         fmin=fmed
357	      endif
358	C         if(me.eq.0) then
359	C            write(0,*) ' fmax = ',fmax,' fmin = ',fmin
360	C            write(0,*) ' emax = ',emax,' emin = ',emin
361	C            write(0,*) ' attempts ',attempts
362	C         endif
363	      if(abs(fmax-fmin).le.0.d0) then
364	         if(ga_nodeid().eq.0) then
365	            write(0,*) ' WARNING: fmax=fmin'
366	         endif
367	      endif
368	      if(attempts.lt.15.or.abs(fmax-fmin).lt.0.d0) then
369	      efermi=0.5d0*(emin+emax)
370	      else
371	         efermi=-fmin*(emax-emin)/(fmax-fmin)+emin
372	      endif
373	      
374	      fmed=fzero(
375	     *     ipol,efermi,evals,nbf,nmo,ntotel,ssmear)
376	      if(abs(fmed).gt.toll.and.abs(emin-emax).gt.toll*0.1d0) goto 1
377	1999  continue
378	#ifdef DEBUG
379	      if(ga_nodeid().eq.0) write(LuOut,*) ' fmed emin-emax ',abs(fmed),
380	     *abs(emin-emax)
381	#endif
382	
383	      return
384	      end
385	c
386	      double precision function fzero(
!INLINE REPORT: (FZERO) [5] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(386,33)
!  -> EXTERN: (409,13) util_erfc_
!  -> EXTERN: (412,13) util_erfc_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(386,33):remark #34051: REGISTER ALLOCATION : [fzero_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F:386
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm4]
!        
!    Routine temporaries
!        Total         :      49
!            Global    :      26
!            Local     :      23
!        Regenerable   :       9
!        Spilled       :      14
!        
!    Routine stack
!        Variables     :      16 bytes*
!            Reads     :       0 [0.00e+00 ~ 0.0%]
!            Writes    :       2 [3.73e+00 ~ 3.7%]
!        Spills        :     112 bytes*
!            Reads     :      18 [8.70e+00 ~ 8.7%]
!            Writes    :      19 [9.46e+00 ~ 9.5%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
387	     *     ipol,efermi,evals,nbf,nmo,ntotel,ssmear)
388	      implicit none
389	      integer ipol
390	      integer nbf,nmo(2)
391	      double precision efermi
392	      double precision evals(nbf*ipol)
393	cold      integer ntotel 
394	      double precision ntotel
395	      double precision ssmear
396	#include "msgids.fh"
397	c
398	      integer i
399	      double precision util_erfc
400	      external util_erfc
401	      double precision one,x,xb,rhfuhf,
402	     , fzeroa ,fzerob ,na,nb
403	      rhfuhf=2d0/ipol
404	      fzeroa=0d0
405	      fzerob=0d0
406	      nb=0d0
407	      do i=1,nmo(1)
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(407,7)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed OUTPUT dependence between x (408:10) and x (409:13)
!LOOP END
408	         x=(evals(i)-efermi)/ssmear
409	         na=util_erfc(x)*0.5d0
410		if(ipol.eq.2.and.nmo(2).ne.0) then
411	         xb=(evals(i+nbf)-efermi)/ssmear
412	         nb=util_erfc(xb)*0.5d0
413	        endif
414	         fzeroa=fzeroa+na
415	         if(ipol.eq.2) fzerob=fzerob+nb
416	      enddo
417	c      write(6,*) ' ef a b ',efermi,fzeroa,fzerob
418	         fzero=ntotel-(fzeroa+fzerob)*rhfuhf
419	c      write(6,*) ' ntotel  ',ntotel
420	c      write(6,*) ' fzero efer ',fzero,efermi
421	c      write(6,*) ' ==============='
422	      return
423	      end
424	c
425	      subroutine dft_focdm(focc,noc,geom,AO_bas_han,nbf,
!INLINE REPORT: (DFT_FOCDM) [4] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(425,18)
!  -> EXTERN: (444,12) ga_nodeid_
!  -> EXTERN: (445,15) ga_nnodes_
!  -> EXTERN: (449,17) ma_push_get_
!  -> EXTERN: (450,10) errquit_
!  -> EXTERN: (451,17) ga_duplicate_
!  -> EXTERN: (452,10) errquit_
!  -> EXTERN: (453,12) ga_zero_
!  -> EXTERN: (458,18) get_col_
!  -> EXTERN: (459,18) dscal_
!  -> EXTERN: (460,18) put_col_
!  -> EXTERN: (464,12) ga_sync_
!  -> EXTERN: (465,12) ga_dgemm_
!  -> EXTERN: (467,16) ma_pop_stack_
!  -> EXTERN: (468,10) errquit_
!  -> EXTERN: (469,17) ga_destroy_
!  -> EXTERN: (469,36) errquit_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(425,18):remark #34051: REGISTER ALLOCATION : [dft_focdm_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F:425
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0]
!        
!    Routine temporaries
!        Total         :     135
!            Global    :      32
!            Local     :     103
!        Regenerable   :      77
!        Spilled       :       9
!        
!    Routine stack
!        Variables     :      32 bytes*
!            Reads     :       5 [1.73e+00 ~ 1.7%]
!            Writes    :       3 [9.22e-01 ~ 0.9%]
!        Spills        :      24 bytes*
!            Reads     :       7 [3.09e+00 ~ 3.1%]
!            Writes    :       3 [1.71e+00 ~ 1.7%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
426	     *     g_vecs,g_dens,toll)
427	      implicit none
428	#include "errquit.fh"
429	#include "mafdecls.fh"
430	#include "stdio.fh"
431	#include "global.fh"
432	#include "bas.fh"
433	#include "geom.fh"
434	      integer noc
435	      integer AO_bas_han,nbf,geom,g_vecs,g_dens
436	      double precision focc(*),toll
437	c
438	      integer me,nproc,ltmpm,itmpm,g_tmp,i,nocold
439	      double precision zero
440	      parameter(zero=0.d0)
441	      logical debug
442	c
443	c     preliminaries
444	      me = ga_nodeid()
445	      nproc = ga_nnodes()
446	      nocold=noc
447	      debug = .false.
448	c
449	      if (.not. MA_Push_Get(MT_Dbl, nbf, 'tmpm', ltmpm, itmpm))
450	     &   call errquit('dftdensm: failed to alloc tmpm',0, MA_ERR)
451	      if (.not. ga_duplicate(g_dens, g_tmp, 'ga_temp'))
452	     &   call errquit('dft_densm: error creating ga',0,GA_ERR)
453	      call ga_zero(g_tmp)
454	      do i = 1, nbf
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(454,7)
!   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!LOOP END
455	        if(focc(i).gt.toll) then
456	          noc=i
457	          if(mod(i-1+me,nproc).eq.0) then
458	            call get_col(g_vecs, nbf, i, DBL_MB(itmpm))
459	            call dscal(nbf, focc(i), DBL_MB(itmpm), 1)
460	            call put_col(g_tmp, nbf, i, DBL_MB(itmpm))
461	          endif
462	        endif
463	      enddo
464	      call ga_sync()
465	      call ga_dgemm('N', 'T', nbf, nbf, noc,1.d0,g_tmp,
466	     $   g_vecs, zero, g_dens)
467	      if (.not.ma_pop_stack(ltmpm))
468	     &   call errquit('dft_densm: cannot pop stack',0, MA_ERR)
469	      if (.not. ga_destroy(g_tmp)) call errquit
470	     &   ('dft_densm: could not destroy g_tmp', 0, GA_ERR)
471	c     
472	c     reset noc for future calls
473	c     
474	      noc=nocold
475	      return
476	      end
477	c
478	c     determine fractional occupations for fon calculations
479	c
480	      logical function dft_fon(rtdb,nmo_fon,ncore_fon,nel_fon,
!INLINE REPORT: (DFT_FON) [3] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(480,24)
!  -> EXTERN: (510,17) rtdb_get_
!  -> EXTERN: (515,16) rtdb_get_
!  -> EXTERN: (520,16) rtdb_get_
!  -> EXTERN: (524,9) for_write_seq_lis
!  -> EXTERN: (524,9) for_write_seq_lis_xmit
!  -> EXTERN: (524,9) for_write_seq_lis_xmit
!  -> EXTERN: (524,9) for_write_seq_lis_xmit
!  -> EXTERN: (525,9) for_write_seq_lis
!  -> EXTERN: (525,9) for_write_seq_lis_xmit
!  -> EXTERN: (531,12) errquit_
!  -> EXTERN: (533,12) errquit_
!  -> EXTERN: (553,26) errquit_
!  -> EXTERN: (562,15) for_write_seq_lis_xmit
!  -> EXTERN: (562,15) for_write_seq_lis
!  -> EXTERN: (562,15) for_write_seq_lis_xmit
!  -> EXTERN: (567,39) errquit_
!  -> EXTERN: (572,15) for_write_seq_lis_xmit
!  -> EXTERN: (572,15) for_write_seq_lis_xmit
!  -> EXTERN: (572,15) for_write_seq_lis
!  -> EXTERN: (579,24) errquit_
!  -> EXTERN: (584,15) for_write_seq_lis_xmit
!  -> EXTERN: (584,15) for_write_seq_lis_xmit
!  -> EXTERN: (584,15) for_write_seq_lis
!  -> EXTERN: (589,34) errquit_
!  -> EXTERN: (598,15) for_write_seq_lis_xmit
!  -> EXTERN: (598,15) for_write_seq_lis_xmit
!  -> EXTERN: (598,15) for_write_seq_lis
!  -> EXTERN: (603,34) errquit_
!  -> EXTERN: (612,14) for_write_seq_lis_xmit
!  -> EXTERN: (612,14) for_write_seq_lis_xmit
!  -> EXTERN: (612,14) for_write_seq_lis
!  -> EXTERN: (618,9) for_write_seq_lis
!  -> EXTERN: (618,9) for_write_seq_lis_xmit
!  -> EXTERN: (619,9) for_write_seq_lis
!  -> EXTERN: (619,9) for_write_seq_lis_xmit
!  -> EXTERN: (620,9) for_write_seq_lis
!  -> EXTERN: (620,9) for_write_seq_lis_xmit
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(480,24):remark #34051: REGISTER ALLOCATION : [dft_fon_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F:480
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm3]
!        
!    Routine temporaries
!        Total         :     346
!            Global    :      72
!            Local     :     274
!        Regenerable   :     262
!        Spilled       :      27
!        
!    Routine stack
!        Variables     :     408 bytes*
!            Reads     :      12 [3.03e+00 ~ 3.0%]
!            Writes    :      56 [2.37e+00 ~ 2.4%]
!        Spills        :     176 bytes*
!            Reads     :      89 [1.04e+01 ~ 10.4%]
!            Writes    :      69 [5.61e+00 ~ 5.6%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
481	     .     nbf,ntotel,focc,noc,ipol,me)
482	c
483	      implicit none
484	#include "global.fh"
485	#include "stdio.fh"
486	#include "errquit.fh"
487	#include "rtdb.fh"
488	#include "mafdecls.fh"
489	c
490	      integer rtdb
491	      integer ipol
492	      integer nbf
493	      double precision focc(nbf,ipol)
494	      integer ntotel
495	      integer noc(2)
496	      integer me
497	c
498	      integer i
499	      double precision avg_fon, avg_fon2
500	      double precision nel_fon(4)
501	      integer nmo_fon(4), ncore_fon(2)
502	      integer ispin
503	      double precision ncheck
504	      logical debug
505	      integer nfilled
506	      logical do_avg_fon
507	      logical do_core_fon
508	c
509	      debug = .false.
510	      if (.not. rtdb_get(rtdb, 'dft:debugfon', mt_log, 1, debug)) 
511	     &     debug = .false.
512	c
513	c     do average fractional occupation by default
514	      do_avg_fon = .true.
515	      if (.not.rtdb_get(rtdb,'dft:avg_fon',mt_log,1,do_avg_fon))
516	     &     do_avg_fon = .true.
517	c
518	c     do average occupation starting with core orbitals
519	      do_core_fon = .false.
520	      if (.not.rtdb_get(rtdb,'dft:core_fon',mt_log,1,do_core_fon))
521	     &     do_core_fon = .false.
522	c
523	      if (me.eq.0 .and. debug) then
524	        write (luout,*) 'FON: ipol, noc, ntotel',ipol,noc(:),ntotel
525	        write (luout,*) 'do_avg_fon: ', do_avg_fon
526	      end if                    ! debug
527	c
528	      ncheck = 0d0
529	      do ispin = 1,ipol
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(529,7)
!   remark #15542: loop was not vectorized: inner loop was already vectorized
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(544,9)
!      remark #25408: memset generated
!      remark #15542: loop was not vectorized: inner loop was already vectorized
!
!      LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(544,9)
!         remark #15300: LOOP WAS VECTORIZED
!         remark #15451: unmasked unaligned unit stride stores: 1 
!         remark #15475: --- begin vector cost summary ---
!         remark #15476: scalar cost: 3 
!         remark #15477: vector cost: 1.250 
!         remark #15478: estimated potential speedup: 1.440 
!         remark #15488: --- end vector cost summary ---
!         remark #25015: Estimate of max trip count of loop=1
!      LOOP END
!
!      LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(544,9)
!      <Remainder loop for vectorization>
!         remark #25015: Estimate of max trip count of loop=12
!      LOOP END
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(552,11)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(566,11)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(578,11)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(588,11)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(602,11)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   LOOP END
!LOOP END
530	        if (nmo_fon(ispin).lt.1) 
531	     &     call errquit('dft_densm:fon nmo_fon <1',1, INPUT_ERR)
532	        if (nel_fon(ispin).lt.0d0) 
533	     &     call errquit('dft_scf_so:fon nel_fon <0',1, INPUT_ERR)
534	c
535	        avg_fon = nel_fon(ispin)/dble(nmo_fon(ispin))  ! average occupation
536	        if (nmo_fon(ispin+2).lt.1.or.nel_fon(ispin+2).le.0d0) then
537	            avg_fon2 = 0.0d0
538	        else
539	            avg_fon2 = nel_fon(ispin+2)/dble(nmo_fon(ispin+2))  ! average occupation
540	        endif
541	        nfilled = ncore_fon(ispin)  ! number of filled orbitals for each spin
542	c
543	c       initialize
544	        do i = 1,nbf
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(544,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_densm.F(544,9):remark #34026: call to memset implemented as a call to optimized library version
545	          focc(i,ispin) = 0.0
546	        end do   
547	c
548	c       fill the molecular orbitals either starting from the core or valence states
549	        if (do_core_fon) then
550	c
551	c         partially filled molecular orbitals
552	          do i = 1,nmo_fon(ispin)   
553	            if (i > nbf) call errquit(
554	     &       'dft_densm:fon focc index exceeds nbf',1,INPUT_ERR)
555	            if (do_avg_fon) then
556	             focc(i,ispin) = avg_fon  ! assign average occupation
557	            else
558	             focc(i,ispin) = nel_fon(ispin) ! assign given fractional electron
559	            end if ! do_avg_fon
560	            ncheck = ncheck + focc(i,ispin)
561	            if (me.eq.0 .and. debug) 
562	     &        write(luout,*) i,ispin,focc(i,ispin)
563	          end do  ! nmo_fon
564	c
565	c         fully filled molecular orbitals        
566	          do i = 1,nfilled
567	            if (i+nmo_fon(ispin)>nbf) call errquit(
568	     &       'dft_densm:fon focc index exceeds nbf',1,INPUT_ERR)
569	            focc(i+nmo_fon(ispin),ispin) = 2d0/ipol
570	            ncheck = ncheck + focc(i+nmo_fon(ispin),ispin)
571	            if (me.eq.0 .and. debug) 
572	     &        write(luout,*) i,ispin,focc(i+nmo_fon(ispin),ispin)
573	          end do  ! nfilled
574	
575	        else
576	c
577	c         fully filled molecular orbitals
578	          do i = 1,nfilled
579	            if (i>nbf) call errquit(
580	     &       'dft_densm:fon focc index exceeds nbf',1,INPUT_ERR)
581	            focc(i,ispin) = 2d0/ipol
582	            ncheck = ncheck + focc(i,ispin)
583	            if (me.eq.0 .and. debug) 
584	     &        write(luout,*) i,ispin,focc(i,ispin)
585	          end do  ! nfilled
586	c
587	c         partially filled molecular orbitals
588	          do i = 1,nmo_fon(ispin)   
589	            if (i+nfilled > nbf) call errquit(
590	     &       'dft_densm:fon focc index exceeds nbf',1,INPUT_ERR)
591	            if (do_avg_fon) then
592	             focc(i+nfilled,ispin) = avg_fon  ! assign average occupation
593	            else
594	             focc(i+nfilled,ispin) = nel_fon(ispin) ! assign given fractional electron
595	            end if ! do_avg_fon
596	            ncheck = ncheck + focc(i+nfilled,ispin)
597	            if (me.eq.0 .and. debug) 
598	     &        write(luout,*) i,ispin,focc(i+nfilled,ispin)
599	          end do  ! nmo_fon
600	c
601	c         second partially filled molecular orbitals
602	          do i = 1,nmo_fon(ispin+2)
603	            if (i+nfilled > nbf) call errquit(
604	     &       'dft_densm:fon focc index exceeds nbf',1,INPUT_ERR)
605	            if (do_avg_fon) then
606	             focc(i+nfilled+nmo_fon(ispin),ispin) = avg_fon2  ! assign average occupation
607	            else
608	             focc(i+nfilled+nmo_fon(ispin),ispin) = nel_fon(ispin+2) ! assign given fractional electron
609	            end if ! do_avg_fon
610	            ncheck = ncheck + focc(i+nfilled+nmo_fon(ispin),ispin)
611	            if (me.eq.0 .and. debug)
612	     &       write(luout,*) i,ispin,focc(i+nfilled+nmo_fon(ispin),ispin)
613	          end do  ! nmo_fon second partial
614	       end if  ! do_core_fon
615	      end do                    ! ispin
616	c
617	      if (me.eq.0 .and. debug) then
618	        write(luout,*) 'FON: focc:',focc(:,1)
619	        write(luout,*) 'ncheck:' , ncheck
620	        write(luout,*) 'ntotel:' , ntotel
621	      end if   
622	c
623	      if(abs(ncheck-dble(ntotel)).gt.1d-3 .and. me.eq.0) then
624	         dft_fon=.false.
625	      else
626	         dft_fon=.true.
627	      endif
628	c
629	      return
630	      end
631	c $Id$
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O3 -unroll -ip -xCORE-AVX2 -g -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled


Begin optimization report for: DFT_INVDIAG

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_INVDIAG) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F(1,18)
  -> EXTERN: (21,10) ga_nodeid_
  -> EXTERN: (22,13) ga_nnodes_
  -> EXTERN: (23,12) ga_sync_
  -> EXTERN: (25,17) ga_create_
  -> EXTERN: (26,10) errquit_
  -> EXTERN: (28,15) ma_push_get_
  -> EXTERN: (29,9) errquit_
  -> EXTERN: (30,15) ma_push_get_
  -> EXTERN: (31,9) errquit_
  -> EXTERN: (34,12) ga_sync_
  -> EXTERN: (37,12) dft_scaleig_
  -> EXTERN: (50,23) for_write_seq_lis
  -> EXTERN: (50,23) for_write_seq_lis_xmit
  -> EXTERN: (51,16) util_flush_
  -> EXTERN: (61,14) ga_get_
  -> EXTERN: (65,14) ga_put_
  -> EXTERN: (68,12) ga_sync_
  -> EXTERN: (72,12) ga_dgemm_
  -> EXTERN: (74,15) ma_pop_stack_
  -> EXTERN: (75,9) errquit_
  -> EXTERN: (76,15) ma_pop_stack_
  -> EXTERN: (77,9) errquit_
  -> EXTERN: (78,12) ga_sync_
  -> EXTERN: (80,17) ga_destroy_
  -> EXTERN: (80,37) errquit_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F(49,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F(60,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F(62,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between dbl_mb(itmp+j) (63:11) and dbl_mb(iev+i-1) (63:11)
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=2
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F(62,9)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=2
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_invdiag_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     208
            Global    :      57
            Local     :     151
        Regenerable   :     123
        Spilled       :       8
        
    Routine stack
        Variables     :     136 bytes*
            Reads     :       9 [5.72e+00 ~ 5.7%]
            Writes    :       7 [1.80e+00 ~ 1.8%]
        Spills        :      16 bytes*
            Reads     :       3 [5.87e-01 ~ 0.6%]
            Writes    :       3 [5.87e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O3 -unroll -ip -xCORE-AVX2 -g -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: disabled
!  -inline-max-per-compile: disabled
!
1	      Subroutine dft_invdiag(g_A, g_cdinv, n)
!INLINE REPORT: (DFT_INVDIAG) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F(1,18)
!  -> EXTERN: (21,10) ga_nodeid_
!  -> EXTERN: (22,13) ga_nnodes_
!  -> EXTERN: (23,12) ga_sync_
!  -> EXTERN: (25,17) ga_create_
!  -> EXTERN: (26,10) errquit_
!  -> EXTERN: (28,15) ma_push_get_
!  -> EXTERN: (29,9) errquit_
!  -> EXTERN: (30,15) ma_push_get_
!  -> EXTERN: (31,9) errquit_
!  -> EXTERN: (34,12) ga_sync_
!  -> EXTERN: (37,12) dft_scaleig_
!  -> EXTERN: (50,23) for_write_seq_lis
!  -> EXTERN: (50,23) for_write_seq_lis_xmit
!  -> EXTERN: (51,16) util_flush_
!  -> EXTERN: (61,14) ga_get_
!  -> EXTERN: (65,14) ga_put_
!  -> EXTERN: (68,12) ga_sync_
!  -> EXTERN: (72,12) ga_dgemm_
!  -> EXTERN: (74,15) ma_pop_stack_
!  -> EXTERN: (75,9) errquit_
!  -> EXTERN: (76,15) ma_pop_stack_
!  -> EXTERN: (77,9) errquit_
!  -> EXTERN: (78,12) ga_sync_
!  -> EXTERN: (80,17) ga_destroy_
!  -> EXTERN: (80,37) errquit_
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_invdiag_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
!        
!    Routine temporaries
!        Total         :     208
!            Global    :      57
!            Local     :     151
!        Regenerable   :     123
!        Spilled       :       8
!        
!    Routine stack
!        Variables     :     136 bytes*
!            Reads     :       9 [5.72e+00 ~ 5.7%]
!            Writes    :       7 [1.80e+00 ~ 1.8%]
!        Spills        :      16 bytes*
!            Reads     :       3 [5.87e-01 ~ 0.6%]
!            Writes    :       3 [5.87e-01 ~ 0.6%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	
3	C$Id$
4	      implicit none
5	#include "errquit.fh"
6	c      
7	      integer g_a   ! [input]
8	      integer g_cdinv ! [output]
9	      integer n
10	c
11	#include "mafdecls.fh"
12	#include "global.fh"
13	#include "tcgmsg.fh"
14	#include "stdio.fh"
15	c
16	      integer me,nproc,i,j,g_tmp2
17	      integer lev,iev,ltmp,itmp
18	      double precision toll,THRESHOLD
19	      parameter (toll=1.d-6,THRESHOLD=1.D-12)
20	c
21	      me=ga_nodeid()
22	      nproc=ga_nnodes()
23	      call ga_sync
24	*ga:1:0
25	      if (.not. ga_create(mt_dbl, n, n, 'ga_temp2', n, 0, g_tmp2)) 
26	     &   call errquit('dft_main0d: error creating g_xcinv',0, GA_ERR)
27	c
28	      if(.not.MA_Push_Get(MT_Dbl,n,'evals',lev,iev))
29	     &  call errquit('dft_invdiag: cannot allocate evals',0, MA_ERR)
30	      if(.not.MA_Push_Get(MT_Dbl,n,'itmp',ltmp,itmp))
31	     &  call errquit('dft_invdiag: cannot allocate itmp',0, MA_ERR)
32	      
33	C     diag
34	      call ga_sync
35	#if defined(PARALLEL_DIAG)         
36	#ifdef SCALAPACK
37	      call dft_scaleig(g_a, g_tmp2, DBl_MB(iev),
38	     P     0) 
39	#else
40	      call ga_diag_std(g_A,g_tmp2,DBl_MB(iev))
41	#endif
42	#else
43	      call ga_diag_std_seq(g_A,g_tmp2,DBl_MB(iev))
44	#endif
45	
46	C     check on eigenvalues
47	
48	      do i=0,n-1
49	        if(abs(DBl_MB(iev+i)).lt.toll) then
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F(49,9)
!   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!LOOP END
50	          if(me.eq.0) write(LuOut,*) ' GAFACT - singular eigenvalue',i
51	          call util_flush(LuOut)
52	          DBl_MB(iev+i)=0.d0
53	        else
54	          DBl_MB(iev+i)=1.d0/DBl_MB(iev+i)
55	        endif 
56	      enddo
57	
58	C     (U * sigma^-1)
59	
60	      do i=me+1,n,nproc
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F(60,7)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F(62,9)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed FLOW dependence between dbl_mb(itmp+j) (63:11) and dbl_mb(iev+i-1) (63:11)
!      remark #25439: unrolled with remainder by 2  
!      remark #25015: Estimate of max trip count of loop=2
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_invdiag.F(62,9)
!   <Remainder>
!      remark #25015: Estimate of max trip count of loop=2
!   LOOP END
!LOOP END
61	        call ga_get(g_tmp2,1,n,i,i,DBL_MB(itmp),1)
62	        do j=0,n-1
63	          DBL_MB(itmp+j)=DBL_MB(itmp+j)*DBl_MB(iev+i-1)
64	        enddo
65	        call ga_put(g_A,1,n,i,i,DBL_MB(itmp),1)
66	      enddo
67	
68	      call ga_sync
69	
70	C     (U * sigma^-1) * U(transp) 
71	      
72	      call ga_dgemm('N','T',n,n,n,1.d0,g_A,g_tmp2,0.d0,g_cdinv)
73	
74	      if(.not.ma_pop_stack(ltmp))
75	     &  call errquit('dft_invdiag: cannot pop stack',0, MA_ERR)
76	      if(.not.ma_pop_stack(lev))
77	     &  call errquit('dft_invdiag: cannot pop stack',0, MA_ERR)
78	      call ga_SYNC
79	c      call gadest(g_tmp2)
80	      if (.not. ga_destroy(g_tmp2)) call errquit
81	     &   ('dft_invdiag: could not destroy g_tmp2', 0, GA_ERR)
82	      return
83	      end
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O3 -unroll -ip -xCORE-AVX2 -g -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled


Begin optimization report for: DFT_MXOVL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_MXOVL) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(1,18)
  -> EXTERN: (38,10) ga_nodeid_
  -> EXTERN: (39,13) ga_nnodes_
  -> EXTERN: (41,12) for_write_seq_fmt
  -> EXTERN: (41,12) for_write_seq_fmt_xmit
  -> EXTERN: (43,18) bas_numbf_
  -> EXTERN: (44,12) errquit_
  -> EXTERN: (46,14) ga_create_atom_blocked_
  -> EXTERN: (48,15) ma_push_get_
  -> EXTERN: (49,12) errquit_
  -> EXTERN: (50,15) ma_push_get_
  -> EXTERN: (51,12) errquit_
  -> EXTERN: (52,15) ma_push_get_
  -> EXTERN: (53,12) errquit_
  -> EXTERN: (54,12) ifill_
  -> EXTERN: (59,12) ga_dgemm_
  -> EXTERN: (60,12) ga_dgemm_
  -> EXTERN: (68,16) ga_get_
  -> EXTERN: (80,16) dfill_
  -> EXTERN: (81,16) put_col_
  -> EXTERN: (84,12) ga_igop_
  -> EXTERN: (89,12) ga_copy_
  -> EXTERN: (90,12) dcopy_
  -> EXTERN: (91,12) dfill_
  -> EXTERN: (94,14) get_col_
  -> EXTERN: (96,14) put_col_
  -> EXTERN: (99,17) ga_destroy_
  -> EXTERN: (99,35) errquit_
  -> EXTERN: (102,15) ma_chop_stack_
  -> EXTERN: (103,8) errquit_
  -> EXTERN: (105,12) ga_dgop_
  -> EXTERN: (118,12) for_write_seq_fmt
  -> EXTERN: (118,12) for_write_seq_fmt_xmit


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(63,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(69,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between prodmax (70:38) and prodmax (71:15)
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=2
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(69,11)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=2
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(92,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between ix (93:9) and ix (94:14)
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(110,10)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(110,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(111,13) ]
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(112,10) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(110,10)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(110,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(113,10)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(113,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(114,13) ]
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(115,10) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(113,10)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(113,10)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_mxovl_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     383
            Global    :      92
            Local     :     291
        Regenerable   :     205
        Spilled       :      13
        
    Routine stack
        Variables     :     168 bytes*
            Reads     :      17 [5.96e+00 ~ 6.0%]
            Writes    :      17 [2.38e+00 ~ 2.4%]
        Spills        :      64 bytes*
            Reads     :      12 [1.24e+00 ~ 1.2%]
            Writes    :       9 [9.75e-01 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
!
! ------- Annotated listing with optimization reports for "/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F" -------
!
!Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000
!
!Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O3 -unroll -ip -xCORE-AVX2 -g -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR
!INLINING OPTION VALUES:
!  -inline-factor: 100
!  -inline-min-size: 30
!  -inline-max-size: 250 (user-specified)
!  -inline-max-total-size: 2000
!  -inline-max-per-routine: disabled
!  -inline-max-per-compile: disabled
!
1	      subroutine dft_mxovl(basis, evals, 
!INLINE REPORT: (DFT_MXOVL) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(1,18)
!  -> EXTERN: (38,10) ga_nodeid_
!  -> EXTERN: (39,13) ga_nnodes_
!  -> EXTERN: (41,12) for_write_seq_fmt
!  -> EXTERN: (41,12) for_write_seq_fmt_xmit
!  -> EXTERN: (43,18) bas_numbf_
!  -> EXTERN: (44,12) errquit_
!  -> EXTERN: (46,14) ga_create_atom_blocked_
!  -> EXTERN: (48,15) ma_push_get_
!  -> EXTERN: (49,12) errquit_
!  -> EXTERN: (50,15) ma_push_get_
!  -> EXTERN: (51,12) errquit_
!  -> EXTERN: (52,15) ma_push_get_
!  -> EXTERN: (53,12) errquit_
!  -> EXTERN: (54,12) ifill_
!  -> EXTERN: (59,12) ga_dgemm_
!  -> EXTERN: (60,12) ga_dgemm_
!  -> EXTERN: (68,16) ga_get_
!  -> EXTERN: (80,16) dfill_
!  -> EXTERN: (81,16) put_col_
!  -> EXTERN: (84,12) ga_igop_
!  -> EXTERN: (89,12) ga_copy_
!  -> EXTERN: (90,12) dcopy_
!  -> EXTERN: (91,12) dfill_
!  -> EXTERN: (94,14) get_col_
!  -> EXTERN: (96,14) put_col_
!  -> EXTERN: (99,17) ga_destroy_
!  -> EXTERN: (99,35) errquit_
!  -> EXTERN: (102,15) ma_chop_stack_
!  -> EXTERN: (103,8) errquit_
!  -> EXTERN: (105,12) ga_dgop_
!  -> EXTERN: (118,12) for_write_seq_fmt
!  -> EXTERN: (118,12) for_write_seq_fmt_xmit
!
!/home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(1,18):remark #34051: REGISTER ALLOCATION : [dft_mxovl_] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F:1
!
!    Hardware registers
!        Reserved     :    2[ rsp rip]
!        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
!        Callee-save  :    6[ rbx rbp r12-r15]
!        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
!        
!    Routine temporaries
!        Total         :     383
!            Global    :      92
!            Local     :     291
!        Regenerable   :     205
!        Spilled       :      13
!        
!    Routine stack
!        Variables     :     168 bytes*
!            Reads     :      17 [5.96e+00 ~ 6.0%]
!            Writes    :      17 [2.38e+00 ~ 2.4%]
!        Spills        :      64 bytes*
!            Reads     :      12 [1.24e+00 ~ 1.2%]
!            Writes    :       9 [9.75e-01 ~ 1.0%]
!    
!    Notes
!    
!        *Non-overlapping variables and spills may share stack space,
!         so the total stack size might be less than this.
!    
!
2	     ,     g_evecs, g_oevecs, g_s,g_tmp,
3	     ,     nocc,oprint,homo,lumo)
4	
5	C$Id$
6	      Implicit none
7	#include "errquit.fh"
8	#include "bas.fh"
9	#include "cdft.fh"
10	#include "mafdecls.fh"
11	#include "global.fh"
12	#include "tcgmsg.fh"
13	#include "msgids.fh"
14	#include "stdio.fh"
15	      integer basis
16	      integer g_s ! [in] overlap
17	      integer g_evecs          ! new eigenvecs [input/output]
18	      integer g_oevecs         ! old eigenvecs [input]
19	      integer g_tmp            ! scratch space
20	      double precision evals(*)! eigenvalues  [input/output]
21	      integer nocc ! [in]
22	      logical oprint ! [in]
23	      double precision homo,lumo ! [in/out]
24	c
25	c     local
26	c
27	      integer g_s1              ! overlap mod
28	      integer me,nproc
29	c      integer nbf,i,j,ix
30	      integer i,j,ix
31	      integer k_ord,l_ord,k_tmp,l_tmp,k_scr,l_scr
32	c     
33	      integer  ga_create_atom_blocked
34	      external ga_create_atom_blocked
35	c
36	      double precision prodmax
37	c
38	      me=ga_nodeid()
39	      nproc=ga_nnodes()
40	      if (me.eq.0 .and. oprint)
41	     .     write(LuOut,3224)homo, lumo
42	c     
43	      if ( .not. bas_numbf(basis,nbf) ) 
44	     &     call errquit(' exiting in max_ovl',1, BASIS_ERR)
45	c
46	      g_s1 = ga_create_atom_blocked(geom, basis, 'AO ovl')
47	c
48	      if(.not.MA_Push_Get(MT_Dbl,nbf,'tmpm',l_tmp, k_tmp))
49	     &     call errquit('dft_mxovl: cannot allocate tmpm',0, MA_ERR)
50	      if(.not.MA_Push_Get(MT_Dbl,nbf,'scr',l_scr, k_scr))
51	     &     call errquit('dft_mxovl: cannot allocate scr',0, MA_ERR)
52	      if(.not.MA_Push_Get(MT_int,nbf,'ord',l_ord, k_ord))
53	     &     call errquit('dft_mxovl: cannot allocate ord',0, MA_ERR)
54	      call ifill(nbf, 0, int_mb(k_ord), 1)
55	
56	C
57	C     compute matrix mult (V_old)T * S * V_new = S`
58	C     
59	      call ga_dgemm('T','N',nbf,nbf,nbf,1.d0,g_oevecs,g_s,0.d0,g_tmp)
60	      call ga_dgemm('N','N',nbf,nbf,nbf,1.d0,g_tmp,g_evecs,0.d0,g_s1)
61	c
62	      if(me.eq.0) then
63	        do i=1,nbf
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(63,9)
!   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(69,11)
!      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!      remark #15346: vector dependence: assumed ANTI dependence between prodmax (70:38) and prodmax (71:15)
!      remark #25439: unrolled with remainder by 2  
!      remark #25015: Estimate of max trip count of loop=2
!   LOOP END
!
!   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(69,11)
!   <Remainder>
!      remark #25015: Estimate of max trip count of loop=2
!   LOOP END
!LOOP END
64	          prodmax=-30.d0
65	C
66	C         get row of g_s1
67	C
68	          call ga_get(g_s1,i,i,1,nbf,DBL_MB(k_tmp),1)
69	          do j=1,nbf
70	            if(abs(dbl_mb(k_tmp+j-1)).gt.prodmax) then
71	              prodmax=abs(dbl_mb(k_tmp+j-1))
72	              ix=j
73	            endif
74	          enddo
75	
76	          int_mb(k_ord+i-1) = ix
77	C
78	C         invalidate column that you have taken
79	C
80	          call dfill(nbf, 0.0d0, dbl_mb(k_tmp), 1)
81	          call put_col(g_s1,nbf,ix,DBL_MB(k_tmp))
82	        enddo
83	      endif
84	      call ga_igop(Msg_mxovl_1,int_mb(k_ord),nbf,'+')
85	c      if(me.eq.0) then
86	c        write(*,*)' orbital order: ',(int_mb(k_ord+i-1),i=1,nbf)
87	c      endif
88	c
89	      call ga_copy(g_evecs,g_oevecs)
90	      call dcopy(nbf,evals,1,dbl_mb(k_tmp),1)
91	      call dfill(nbf,0.d0,evals,1)
92	      do i=me+1,nbf,nproc
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(92,7)
!   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
!   remark #15346: vector dependence: assumed OUTPUT dependence between ix (93:9) and ix (94:14)
!LOOP END
93	        ix=int_mb(k_ord+i-1)
94	        call get_col(g_oevecs,nbf,ix,DBL_MB(k_scr))
95	        evals(i)=dbl_mb(k_tmp+ix-1)
96	        call put_col(g_evecs,nbf,i,DBL_MB(k_scr))
97	      enddo
98	c
99	      if (.not. ga_destroy(g_s1)) call errquit
100	     &   ('dft_mxovl: could not destroy g_s1', 0, GA_ERR)
101	c
102	      if(.not.MA_chop_Stack(l_tmp))
103	     & call errquit('dft_mxovl: cannot pop stack',0, MA_ERR)
104	c
105	      call ga_dgop(Msg_mxovl_2,evals,nbf,'+')
106	c
107	      homo = -1.0d8
108	      lumo =  1.0d8
109	      if(nocc.gt.0) then
110	         do i = 1, nocc
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(110,10)
!<Peeled loop for vectorization>
!   remark #25015: Estimate of max trip count of loop=3
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(110,10)
!   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(111,13) ]
!   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(112,10) ]
!   remark #15300: LOOP WAS VECTORIZED
!   remark #15442: entire loop may be executed in remainder
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 8 
!   remark #15477: vector cost: 1.250 
!   remark #15478: estimated potential speedup: 4.940 
!   remark #15488: --- end vector cost summary ---
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(110,10)
!<Remainder loop for vectorization>
!   remark #15301: REMAINDER LOOP WAS VECTORIZED
!   remark #15442: entire loop may be executed in remainder
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 8 
!   remark #15477: vector cost: 1.250 
!   remark #15478: estimated potential speedup: 4.940 
!   remark #15488: --- end vector cost summary ---
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(110,10)
!<Remainder loop for vectorization>
!LOOP END
111	            homo = max(homo,evals(i))
112	         enddo
113	         do i = nocc+1, nbf
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(113,10)
!<Peeled loop for vectorization>
!   remark #25015: Estimate of max trip count of loop=3
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(113,10)
!   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(114,13) ]
!   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(115,10) ]
!   remark #15300: LOOP WAS VECTORIZED
!   remark #15442: entire loop may be executed in remainder
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 8 
!   remark #15477: vector cost: 1.250 
!   remark #15478: estimated potential speedup: 4.940 
!   remark #15488: --- end vector cost summary ---
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(113,10)
!<Remainder loop for vectorization>
!   remark #15301: REMAINDER LOOP WAS VECTORIZED
!   remark #15442: entire loop may be executed in remainder
!   remark #15450: unmasked unaligned unit stride loads: 1 
!   remark #15475: --- begin vector cost summary ---
!   remark #15476: scalar cost: 8 
!   remark #15477: vector cost: 1.250 
!   remark #15478: estimated potential speedup: 4.940 
!   remark #15488: --- end vector cost summary ---
!LOOP END
!
!LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxovl.F(113,10)
!<Remainder loop for vectorization>
!LOOP END
114	            lumo = min(lumo,evals(i))
115	         enddo
116	      endif
117	      if (me.eq.0 .and. oprint)
118	     &     write(LuOut,3225)homo, lumo
119	 3224 format(10x,' HOMO = ',f6.2,' LUMO = ',f6.2)
120	 3225 format(4x,' MXOVL HOMO = ',f6.2,' LUMO = ',f6.2)
121	      
122	      return
123	      end
Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -I../include -I../grid -I/home/meji656/Sources/nwchem.gw/src/include -I/home/meji656/Sources/nwchem.gw/src/tools/install/include -c -i8 -align -fpp -qopt-report-file=stderr -qopt-report=3 -qopt-report-phase=vec,cg,loop,ipo -qopt-report-annotate-position=both -qopt-report-file=stderr -qno-openmp -fimf-arch-consistency=true -finline-limit=250 -O3 -unroll -ip -xCORE-AVX2 -g -DEXT_INT -DLINUX -DLINUX64 -DIFCV8 -DIFCLINUX -DSCALAPACK -DNOIO -DEAFHACK -DPARALLEL_DIAG -DUSE_LIBXC -DUSE_PLUMED -DUSE_TBLITE -DGWDEBUG -DMKL -DUSE_INTEGER8 -DUSE_GAPZHEEVD -DUSE_PDSYEVR

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 250 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled


Begin optimization report for: DFT_MXSPIN_OVLP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DFT_MXSPIN_OVLP) [1] /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(1,18)
  -> EXTERN: (39,10) ga_nodeid_
  -> EXTERN: (40,13) ga_nnodes_
  -> EXTERN: (42,13) ga_create_atom_blocked_
  -> EXTERN: (44,15) ma_push_get_
  -> EXTERN: (45,12) errquit_
  -> EXTERN: (47,15) ma_push_get_
  -> EXTERN: (48,12) errquit_
  -> EXTERN: (50,15) ma_push_get_
  -> EXTERN: (51,12) errquit_
  -> EXTERN: (54,12) ga_sync_
  -> EXTERN: (55,12) ga_zero_
  -> EXTERN: (56,12) int_1e_ga_
  -> EXTERN: (60,12) ga_dgemm_
  -> EXTERN: (61,12) ga_dgemm_
  -> EXTERN: (65,9) for_write_seq_fmt
  -> EXTERN: (74,16) ga_get_
  -> EXTERN: (92,11) for_write_seq_fmt_xmit
  -> EXTERN: (92,11) for_write_seq_fmt_xmit
  -> EXTERN: (92,11) for_write_seq_fmt
  -> EXTERN: (93,11) for_write_seq_fmt_xmit
  -> EXTERN: (93,11) for_write_seq_fmt_xmit
  -> EXTERN: (93,11) for_write_seq_fmt
  -> EXTERN: (94,11) for_write_seq_fmt_xmit
  -> EXTERN: (94,11) for_write_seq_fmt_xmit
  -> EXTERN: (94,11) for_write_seq_fmt
  -> EXTERN: (108,15) util_print_
  -> EXTERN: (115,15) ma_push_get_
  -> EXTERN: (116,11) errquit_
  -> EXTERN: (124,14) ga_get_
  -> EXTERN: (134,7) for_write_seq_lis
  -> EXTERN: (135,7) for_write_seq_lis
  -> EXTERN: (138,12) ga_sync_
  -> EXTERN: (146,11) for_write_seq_fmt_xmit
  -> EXTERN: (146,11) for_write_seq_fmt_xmit
  -> EXTERN: (146,11) for_write_seq_fmt
  -> EXTERN: (147,11) for_write_seq_fmt_xmit
  -> EXTERN: (147,11) for_write_seq_fmt_xmit
  -> EXTERN: (147,11) for_write_seq_fmt
  -> EXTERN: (149,9) for_write_seq_lis
  -> EXTERN: (154,12) ga_sync_
  -> EXTERN: (155,15) ma_push_get_
  -> EXTERN: (156,11) errquit_
  -> EXTERN: (174,10) for_write_seq_fmt_xmit
  -> EXTERN: (174,10) for_write_seq_fmt
  -> EXTERN: (174,10) for_write_seq_fmt_xmit
  -> EXTERN: (174,10) for_write_seq_fmt_xmit
  -> EXTERN: (184,12) ga_sync_
  -> EXTERN: (186,12) movecs_print_anal_
  -> EXTERN: (193,12) movecs_print_anal_
  -> EXTERN: (214,12) ga_sync_
  -> EXTERN: (215,15) ga_create_
  -> EXTERN: (216,15) errquit_
  -> EXTERN: (218,12) ga_dgemm_
  -> EXTERN: (223,15) ga_create_
  -> EXTERN: (224,15) errquit_
  -> EXTERN: (226,15) ga_create_
  -> EXTERN: (227,15) errquit_
  -> EXTERN: (229,15) ma_push_get_
  -> EXTERN: (230,12) errquit_
  -> EXTERN: (232,12) ga_sync_
  -> EXTERN: (236,12) ga_svd_seq_
  -> EXTERN: (241,17) ga_destroy_
  -> EXTERN: (241,35) errquit_
  -> EXTERN: (243,17) ga_destroy_
  -> EXTERN: (243,35) errquit_
  -> EXTERN: (246,12) ga_sync_
  -> EXTERN: (253,15) ga_create_
  -> EXTERN: (254,15) errquit_
  -> EXTERN: (256,12) ga_zero_
  -> EXTERN: (258,12) ga_sync_
  -> EXTERN: (260,13) ga_put_
  -> EXTERN: (262,12) ga_sync_
  -> EXTERN: (266,15) ga_create_
  -> EXTERN: (267,15) errquit_
  -> EXTERN: (269,12) ga_dgemm_
  -> EXTERN: (273,17) ga_destroy_
  -> EXTERN: (273,34) errquit_
  -> EXTERN: (278,17) ga_destroy_
  -> EXTERN: (278,34) errquit_
  -> EXTERN: (284,12) ga_sync_
  -> EXTERN: (288,15) ma_push_get_
  -> EXTERN: (289,12) errquit_
  -> EXTERN: (306,12) ga_sync_
  -> EXTERN: (307,15) ga_create_
  -> EXTERN: (309,15) errquit_
  -> EXTERN: (315,15) ga_copy_patch_
  -> EXTERN: (319,12) ga_sync_
  -> EXTERN: (327,7) for_write_seq_fmt
  -> EXTERN: (329,7) for_write_seq_fmt
  -> EXTERN: (331,7) for_write_seq_fmt
  -> EXTERN: (333,7) for_write_seq_fmt
  -> EXTERN: (335,7) for_write_seq_fmt
  -> EXTERN: (336,7) for_write_seq_fmt
  -> EXTERN: (338,7) for_write_seq_fmt
  -> EXTERN: (340,7) for_write_seq_fmt
  -> EXTERN: (342,7) for_write_seq_fmt
  -> EXTERN: (353,13) movecs_print_anal_
  -> EXTERN: (359,12) ga_sync_
  -> EXTERN: (361,7) for_write_seq_fmt
  -> EXTERN: (368,11) for_write_seq_fmt_xmit
  -> EXTERN: (368,11) for_write_seq_fmt_xmit
  -> EXTERN: (368,11) for_write_seq_fmt
  -> EXTERN: (369,11) for_write_seq_fmt_xmit
  -> EXTERN: (369,11) for_write_seq_fmt
  -> EXTERN: (369,11) for_write_seq_fmt_xmit
  -> EXTERN: (370,11) for_write_seq_fmt_xmit
  -> EXTERN: (370,11) for_write_seq_fmt
  -> EXTERN: (370,11) for_write_seq_fmt_xmit
  -> EXTERN: (372,9) for_write_seq_lis
  -> EXTERN: (379,17) ga_destroy_
  -> EXTERN: (379,39) errquit_
  -> EXTERN: (382,17) ga_destroy_
  -> EXTERN: (382,39) errquit_
  -> EXTERN: (385,15) ma_pop_stack_
  -> EXTERN: (386,8) errquit_
  -> EXTERN: (388,15) ma_pop_stack_
  -> EXTERN: (389,8) errquit_
  -> EXTERN: (393,15) ma_pop_stack_
  -> EXTERN: (394,8) errquit_
  -> EXTERN: (396,15) ma_pop_stack_
  -> EXTERN: (397,8) errquit_
  -> EXTERN: (401,17) ga_destroy_
  -> EXTERN: (401,34) errquit_
  -> EXTERN: (404,15) ma_chop_stack_
  -> EXTERN: (405,8) errquit_


    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(70,9)
   remark #15523: loop was not vectorized: loop control variable jbig was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(76,11)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(82,11) ]
      remark #15315: loop was not vectorized: estimated number of iterations (2) is insufficient for vectorization
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 0.620 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=2
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(76,11)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=2
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(88,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (92:11) and at (94:11)

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(92,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (92:11) and at (92:11)
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(93,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (93:11) and at (93:11)
      remark #25015: Estimate of max trip count of loop=2
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(94,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (94:11) and at (94:11)
      remark #25015: Estimate of max trip count of loop=2
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(121,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(123,7)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(142,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (146:11) and at (147:11)

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(146,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (146:11) and at (146:11)
      remark #25015: Estimate of max trip count of loop=2
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(147,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (147:11) and at (147:11)
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(160,10)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between j (161:10) and j (161:10)

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(161,10)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
      remark #25015: Estimate of max trip count of loop=2
   LOOP END
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(174,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (174:10) and at (174:10)
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(191,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(259,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(292,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(300,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between nalp (295:11) and nalp (295:11)
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(292,7)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(312,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(364,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (368:11) and at (370:11)

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(368,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (368:11) and at (368:11)
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(369,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (369:11) and at (369:11)
   LOOP END

   LOOP BEGIN at /home/meji656/Sources/nwchem.gw/src/nwdft/scf_dft/dft_mxspin_ovlp.F(370,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (370:11) and at (370:11)
      remark #25015: Estimate of max trip count of loop=2
   LOOP END
LOOP END
make[2]: *** [../../config/makefile.h:3918: /home/meji656/Sources/nwchem.gw/lib/LINUX64/libnwdft.a(dft_mxspin_ovlp.o)] Interrupt
make[1]: *** [../../config/makelib.h:146: optimized] Interrupt
make: *** [../config/makelib.h:224: subdirs] Interrupt
