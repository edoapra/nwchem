                      E_SCF(A)          E_SCF(B)        DeltaE from DeltaV    E_SCF(B)-E_SCF(A)  DV1
Pd-Pd -> Pd-Pt   -255.670633187906 -243.744540922510  3.9400149529652935       11.926092265396   6.9179102586405232
Ag-Ag -> Ag-Au   -293.911960662702 -278.655496671041  5.9473836475145871       15.256463991661   8.8061294803396635


=====
CODE
=====
 How to compute DeltaV=V_Pt-V_Pd

A) Ingredients for V_Pd:

1) AO basis Pd

2) ECP Pd

B) Ingredients for V_Pt

1) AO basis Pd,Pt

2) ECP Pd, Pt

Steps
 
 1. compute V_Pd =< a | V | a>
 Using Pd coeff. & exp. and all is needed to converge Pd2.
 V_Pd file contains Pd2 eigenvalues.

2. Quick noscf PdPt runs using Pd2 M.O.s
   compute V_Pr= <a| V |a> and combine it with Pd2 eigenvalues to compute

DeltaV=V_Pt-V_Pd (dove V_Pd read from disk after having been computed at step 1)
 
c     compute deltav = vb - va
      do j=1,nmo
         do i=1,nmo
            vmo_b(i,j)= vmo_b(i,j)-vmo_a(i,j)
         enddo
      enddo

c     deltaV_ii
      e=0d0
      do i=1,nocc
         e=e+vmo_b(i,i)
      enddo


c     - (deltaV_ia)^2/(e_a - e_i)
      do i=1,nocc
         do a=nocc+1,nmo
            e = e - vmo_b(i,a)**2/(eval(a)-eval(i))
         enddo
      enddo



====
Input example
=====

start pdal

geometry 
pd  0. 0. 0.
pd 0. 0  2.8
symmetry c2v
end

basis spherical
pd library def2-svp
pt library pd def2-svp
end

ecp
pd library def2-ecp
pt library def2-ecp
end
dft
xc pbe0
smear 1d-5
convergence ncydp 0 damp 45 dampon 1d99 dampoff 1d-5
end
unset dft:deltavb
set dft:deltava 2
task dft

geometry  #noautosym nocenter
pd 0. 0. 0.
pt 0. 0  2.8
symmetry c4v
end

dft
noscf
noprint "final vectors analysis" multipole
end
set dft:deltavb 2

task dft ignore
=== output ===
  e DeltaV     6.9179102586435226     
  e DeltaV2    3.9400149529772661     
====
E(B) = E(A) + DeltaV

ECP_VCA = w_A * ECP_A + w_B * ECP_B

W_A=1-x w_B=x 

Z_VCA = w_A * Z_A + w_B *Z_B 


Pd n_tot_el 46
Pt n_tot_el 78
Z_tot = 0.5 *(46+78)=62 => Sm
